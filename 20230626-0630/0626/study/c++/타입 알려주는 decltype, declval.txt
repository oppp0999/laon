* decltype
    - 사용 문법
    -> decltype(/* 타입을 알고자 하는 식*/)

    
    ex1)
    #include <iostream>

    struct A {
    double d;
    };

    int main() {
        int a = 3;
        decltype(a) b = 2;  // int

        int& r_a = a;
        decltype(r_a) r_b = b;  // int&

        int&& x = 3;
        decltype(x) y = 2;  // int&&

        A* aa;
        decltype(aa->d) dd = 0.1;  // double
    }

    -> decltype이 각각 int, int&, int&& 로 취환돼서 컴파일
        -> decltype에 전달된 식이 괄호로 둘러쌓이지 않은 식별자 표현식(id-expression)이라면 해당 식의 타입을 얻을 수 있다.


# 식별자 표현식
    -> 변수의 이름, 함수의 이름, enum 이름, 클래스 멤버 변수(a.b 나 a->b 같은 꼴) 등 을 의미
    -> 어떠한 연산을 하지 않고 단순히 객체 하나만을 가리키는 식이라고 보면 됨.

    -> decltype에 식별자 표현식이 아닌 식을 전달하면?
        -> 해당 식의 값의 종류에 따라 달라짐
            1. xvalue 라면 decltype 는 T&& 가 됩니다.

            2. lvalue 라면 decltype 는 T& 가 됩니다.

            3. prvalue 라면 decltype 는 T 가 됩니다.



* Value Category
    -> 모든 c++식에는 두 가지 정보가 있음 -> 타입, 값 카테고리
        - 타입 : 데이터 형식
        - 값 카테고리 : 좌측값/우측값

    -> 식의 값 카테고리는 두 가지로 질문
        1. 정체를 알 수 있는가?
            -> 해당 식이 어떤 다른 식과 같은 것인지 아닌지를 구분 할 수 있다.
                -> 일반적인 변수라면 주소 값을 취해 구분
                -> 함수의 경우라면 이름 확인
            
        2. 이동 시킬 수 있는가?
            -> 해당 식을 다른 곳으로 안전하게 이동할 수 있는지의 여부
                -> 해당 식을 받는 이동 생성자, 이동 대입 연산자 등을 사용

        -> 값 카테고리 구분
            1. 정체를 알 수 있지만 이동 시킬 수 있다 : xvalue
            2. 정체를 알 수 있지만 이동 시킬 수 없다 : lvalue

            3. 정체를 알 수 없지만 이동 시킬 수 있다 : prvalue
            4. 정체를 알 수 없지만 이동 시킬 수 없다 : 쓸모 없음


# lvalue
    -> int i; 
    -> i;
        -> j 라는 것이 있을 때 구분이 되고, i라는 식의 주소값은 실제 변수 i의 주소값
        -> i는 이동할 수 없다. int&& x = i;가 컴파일 되지 않음
        -> i 는 lvalue

    -> 이름을 가진 대대분의 객체들은 모두 lvalue -> 해당 객체의 주소값을 취할 수 있기 때문
        -> lvalue 카테고리 안에 들어가는 식들을 나열
            1. 변수, 함수의 이름, 어떤 타입의 데이터 멤버 (예컨대 std::endl, std::cin) 등등
            2. 좌측값 레퍼런스를 리턴하는 함수의 호출식. std::cout << 1, ++it
            3. a = b, a += b, a *= b 같이 복합 대입 연산자 식들
            4. ++a , --a  같은 전위 증감 연산자 식들
            5. a.m, p->m 과 같이 멤버를 참조할 때. m은 enum 값이거나 static 이 안니 멤버 함수인 경우 제외
                5.1
                class A {
                int f();         // static 이 아닌 멤버 함수
                static int g();  // static 인 멤버 함수
                }

                A a;
                a.g;  // <-- lvalue
                a.f;  // <-- lvalue 아님 (아래 나올 prvalue)
            6. a[n] 과 같은 배열 참조 식둘
            7. 문자열 리터럴 "hi"