#1 이름 없는 공간 -> 해당 파일 안에서 접근 할 수 있는 static 과 비슷

##1.ex - 1
    namespace {
    int OnlyInThisFile() {}
    int only_in_this_file = 0;
    } 

    int main() {
    OnlyInThisFile();
    only_in_this_file = 3;
    }
- 같은 파일 위치했을 때 int main()에서 namespace 안에 정의된 모든 것들을 사용 가능

#2 C++ C -> 동일한 문법 사용
- 기본적인 문법 구조 (조건문 -> if, else, switch, 제어문 -> for, while, break, continue)
-- 사용법 동일

#3 c++의 참조자 (레퍼런스)
-> C와 다르게 포인터는 다른 변수나 상수를 가리키는 방법으로 또 다른 방식을 제공, 이를 참조자라고 함

##3.ex - 1
    #include <iostream>

    int change_val(int *p) {
    *p = 3;
    return 0;
    }

    int main() {
    int number = 5;

    std::cout << number << std::endl;
    change_val(&number);
    std::cout << number << std::endl;
    }
- change_val 함수의 인자 p에 number의 주소값을 전달하여, *p를 통해 number를 참조하여 number의 값을 바꿈

* 참조자를 정하는 방법
-> 가리키고자 하는 타입 뒤에 &를 붙이면 됨.
-- int 형 변수의 참조자를 만들고 싶을 때 int&, double의 참조자를 만드려면 double&로 하면 됨.
--- int* 와 같은 포인터 타입의 참조자를 만드려면 int*& 로 쓰기

##3.ex - 2
    #include <iostream>

    int main() {
    int a = 3;
    int& another_a = a;

    another_a = 5;
    std::cout << "a : " << a << std::endl;
    std::cout << "another_a : " << another_a << std::endl;

    return 0;
    }
- another_a 에 5를 대입했지만 실제 a의 값도 같이 변경 되는 것을 확인 할 수 있음

----주의 사항----
1. 레퍼런스 정의 시 반드시 누구의 별명인지 명시
-> int& another_a; X
-> int& another_a = a; O
-> int* p; O

2. 레퍼런스 별명 설정 후 별명 변경 불가
int &another_a = a; 이후 -> &another_a = b; X
- another_a = b; O (값 대입으론 가능)

3. 메모리 상에 존재하지 않을 수도 있다.

4. 상수에 대한 참조자
int &ref = 4; X -> 상수값 자체는 리터럴
const int& ret = 4; O -> const때문에 값이 변하지 않기 때문에 ret =4 로 인식
---------------

* 레퍼런스의 배열과 배열의 레퍼런스
    int a, b;
    int& arr[2] = {a, b};
    -> 불가능

    int arr[3] = {1, 2, 3};
    int(&ref)[3] = arr;
    -> 가능, 포인터와 다르게 배열의 레퍼런스의 경우 참조하기 위해서 반드시 배열의 크기를 명시
    --> 즉 (&ref)[5] 라면 크기가 5인 배열이 명시가 되어야함 arr[5]

* 레퍼런스를 리턴하는 함수
    int& function() {
    int a = 2;
    return a;
    }

    int main() {
    int b = function();
    return 0;
    }
    -> 불가능
-> b에 a가 가진 2의 값을 할당하고 a는 메모리가 삭제된다.
--> int& 의 리턴 타입을 가진 함수는 참조자를 리턴하는데 명시되어있던 a가 메모리에서 삭제되기 때문 

* 외부 변수의 레퍼런스 리턴
    int& function(int& a) {
    a = 5;
    return a;
    }

    int main() {
    int b = 2;
    int c = function(b);
    return 0;
    }
    -> 가능
-> function(b)를 실행한 시점으로 부터 a는 main의 b를 참조
--> function이 리턴한 참조자는 아직 살아있는 변수인 b를 참조
---> 즉, int c = 5; 가 됨

* 값을 리턴하는 함수를 참조자로 받기
    int function() {
    int a = 5;
    return a;
    }

    int main() {
    int& c = function();
    return 0;
    }
    -> 불가능
-> 리턴값은 해당 문장이 끝난 후 바로 사라지는 값이기 때문
-> 하지만 const int& c = function(); -> 가능

#4 C++의 세계로
-> 프로그램 실행 시에 자유롭게 할당하고 해제할 수 있는 힙(heap)이 존재

##4.ex - 1    /* new 와 delete 의 사용 */
    #include <iostream>

    int main() {
    int* p = new int;
    *p = 10;

    std::cout << *p << std::endl;

    delete p;
    return 0;
    }
-> new 는 malloc과 대응되는 것으로 메모리를 할당
-> delete 는 free에 대응되는 것으로 메모리를 해제

CODE 4 -> int 크기의 공간을 할당항 그 주소 값을 p에 집어 넣음 -> 즉 T* p = new T; (T = 임의의 타입)

CODE 5 -> 값을 대입

CODE 9 -> p에 할당된 공간이 해제, 반드시 new를 통해 할당한 공간만 해제 가능

* new로 배열 할당하기
    #include <iostream>

    int main() {
    int arr_size;
    std::cout << "array size : ";
    std::cin >> arr_size;
    int *list = new int[arr_size];
    for (int i = 0; i < arr_size; i++) {
        std::cin >> list[i];
    }
    for (int i = 0; i < arr_size; i++) {
        std::cout << i << "th element of list : " << list[i] << std::endl;
    }
    delete[] list;
    return 0;
    }

CODE 3 ~ 6 -> arr_size 정의 후 cin으로 값 입력 받기

CODE 7 -> list에 new를 이용하여 크기가 arr_size 인 int 배열을 생성, 배열을 생성할 때 [] 을 이용해 크기 넣기 -> T* pointer = new T[size]; (T = 임의의 타입)

CODE 8 ~ 13 -> arr_size 만큼 입력을 반복해 받아와 list[i] 부분에 저장 및 출력

CODE 14 -> new[] 을 이용해 할당 하였기 때문에 delete[] 를 통해 해제 -> 즉, new - delete 짝을 이룸 (new[] - delete[])

#5 객체지향프로그래밍의 시작
객체란? -> 변수들과 참고 자료들로 이루어진 소프트웨어 덩어리
추상화란?-> 객체가 현실 세계에서의 존재를 나타내기 위함
-> 객체는 자기 만의 정보를 나타내는 변수, 이를 가지고 있는 어떠한 작업을 하는 함수들 -> 인스턴스, 변수, 인스턴스 메소드
--> 외부로 부터 보호
캡슐화란? -> 외부에서 직접 인스턴스 변수의 값을 바꿀 수 없고 항상 인스턴스 메소드를 통해 간접적으로 조절

* 클래스
- 인스턴스 -> 클래스를 이용해 만들어진 객체

##5.ex - 1
    #include <iostream>

    class Animal {
    private:
    int food;
    int weight;

    public:
    void set_animal(int _food, int _weight) {
        food = _food;
        weight = _weight;
    }
    void increase_food(int inc) {
        food += inc;
        weight += (inc / 3);
    }
    void view_stat() {
        std::cout << "이 동물의 food   : " << food << std::endl;
        std::cout << "이 동물의 weight : " << weight << std::endl;
    }
    };  // 세미콜론 잊지 말자

    int main() {
    Animal animal;
    animal.set_animal(100, 50);
    animal.increase_food(30);

    animal.view_stat();
    return 0;
    }

CODE 23 -> 타입 선언하는 방식으로 사용

CODE 3 ~ 21 -> 변수 (food, weight), 함수(set_animal, increase_food, view_stat) -> 각각을 클래스 상에서 멤버 변수, 멤버 함수라고 부름
-> 인스턴스로 생성된 객체에서는 인스턴스 변수, 인스턴스 함수라고 부름

CODE 3 ~ 6 -> 접근지시자 -> 외부에서 이러한 멤버들에 접근을 할 수 있는지 없는지 지시
-> private로 되어있는 모든 것들은 자기 객체 안에서만 접근 가능, 객체 외부에서는 접근 불가능

CODE 9 ~ 12 -> 같은 객체 안에서 food 와 weight에 접근은 가능
    Animal animal;
    animal.food = 100;
    -> 불가능
-> 처럼 객체 밖에서 인위적으로 food에 접근하는 것은 불가능

CODE 8 ~ 20 -> public이라는 것은 말 그대로 공개된 것으로 외부에서 사용 가능
CODE 24 ~ 28 -> 외부 사용.

* 참고
키워드를 명시 하지 않았다면 기본적으로 private로 설정

* 함수의 오버로딩
-> 같은 이름을 가진 함수가 여러개 존재해도 됨 -> 구분법 (함수를 호출 할 때 사용하는 인자를 보고 결정)

##5.ex - 2
    #include <iostream>

    void print(int x) { std::cout << "int : " << x << std::endl; }
    void print(char x) { std::cout << "char : " << x << std::endl; }
    void print(double x) { std::cout << "double : " << x << std::endl; }

    int main() {
    int a = 1;
    char b = 'c';
    double c = 3.2f;

    print(a);
    print(b);
    print(c);

    return 0;
    }

CODE 3 ~ 5 -> 함수의 이름이 같더라도 인자가 다르면 다른 함수

---- C++ 컴파일러에서 함수 오버로딩 과정 ----
-- 1단계
1. 자신과 타입이 일치하는 함수 찾기

-- 2단계
1. 정확히 일치하는 타입이 없는 경우 아래와 같은 형변환을 통해서 일치하는 함수를 찾아본다.
2. Char, unsigned char, short 는 int 로 변환된다.
3. Unsigned short 는 int 의 크기에 따라 int 혹은 unsigned int 로 변환된다.
3. Float 은 double 로 변환된다.
4. Enum 은 int 로 변환된다.

-- 3단계
1. 위와 같이 변환해도 일치하는 것이 없다면 아래의 좀더 포괄적인 형변환을 통해 일치하는 함수를 찾는다.
2. 임의의 숫자(numeric) 타입은 다른 숫자 타입으로 변환된다. (예를 들어 float -> int)
3. Enum 도 임의의 숫자 타입으로 변환된다 (예를 들어 Enum -> double)
4. 0 은 포인터 타입이나 숫자 타입으로 변환된 0 은 포인터 타입이나 숫자 타입으로 변환된다
5. 포인터는 void 포인터로 변환된다.

-- 4단계
1. 일치하는 함수가 없거나 같은 단계에서 두 개 이상이 일치하는 경우 -> 오류 발생
ex -> void print(char x), void print(int x) 일 때, 
print(double) double타입을 가진 인자를 넣게 되면 double은 int, char 둘 다 바뀌기때문에 3단계에서 일치하는 부분이 두가지 -> 오류

* Date 클래스
    include<iostream>

        class Date {
    int year_;
    int month_;  // 1 부터 12 까지.
    int day_;    // 1 부터 31 까지.

    public:
    void SetDate(int year, int month, int date);
    void AddDay(int inc);
    void AddMonth(int inc);
    void AddYear(int inc);

    // 해당 월의 총 일 수를 구한다.
    int GetCurrentMonthTotalDays(int year, int month);

    void ShowDate();
    };

    void Date::SetDate(int year, int month, int day) {
    year_ = year;
    month_ = month;
    day_ = day;
    }

    int Date::GetCurrentMonthTotalDays(int year, int month) {
    static int month_day[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (month != 2) {
        return month_day[month - 1];
    } else if (year % 4 == 0 && year % 100 != 0) {
        return 29;  // 윤년
    } else {
        return 28;
    }
    }

    void Date::AddDay(int inc) {
    while (true) {
        // 현재 달의 총 일 수
        int current_month_total_days = GetCurrentMonthTotalDays(year_, month_);

        // 같은 달 안에 들어온다면;
        if (day_ + inc <= current_month_total_days) {
        day_ += inc;
        return;
        } else {
        // 다음달로 넘어가야 한다.
        inc -= (current_month_total_days - day_ + 1);
        day_ = 1;
        AddMonth(1);
        }
    }
    }

    void Date::AddMonth(int inc) {
    AddYear((inc + month_ - 1) / 12);
    month_ = month_ + inc % 12;
    month_ = (month_ == 12 ? 12 : month_ % 12);
    }

    void Date::AddYear(int inc) { year_ += inc; }

    void Date::ShowDate() {
    std::cout << "오늘은 " << year_ << " 년 " << month_ << " 월 " << day_
                << " 일 입니다 " << std::endl;
    }

    int main() {
    Date day;
    day.SetDate(2011, 3, 1);
    day.ShowDate();

    day.AddDay(30);
    day.ShowDate();

    day.AddDay(2000);
    day.ShowDate();

    day.SetDate(2012, 1, 31);  // 윤년
    day.AddDay(29);
    day.ShowDate();

    day.SetDate(2012, 8, 4);
    day.AddDay(2500);
    day.ShowDate();
    return 0;
    }
--> 보는 것처럼 함수 전체 몸통은 클래스 밖으로 나와서 구현되어있음 Date::을 이용하여,
--> 이렇게 하는 이유는 클래스 내부에 쓸 경우 클래스 크기가 너무 길어져서 보기 좋지 않기 때문
- 다만 예외적으로 템플릿 클래스의 경우 모두 클래스 내부에 작성

* 생성자 (Constructor) -> 객체 생성시 자동으로 호출되는 함수, 이때 호출되면서 객체를 초기화 해주는 역할
    // 객체를 초기화 하는 역할을 하기 때문에 리턴값이 없음
    /* 클래스 이름 */ (/* 인자 */) {}

    Date(int year, int month, int day){} 로 정의한다면
    Date day(2011, 3, 1); -> Date 클래스의 대한 day 객체를 생성할 때 함수를 호출하듯이 사용 가능 , 전체 명시하면 Date day = Date(2011,3,1);

* 디폴트 생성자 -> 생성자를 정의하지 않았을 경우 컴파일러가 자동으로 추가해주는 생성자
    Date day;
    day.ShowDate();
    -> 가능

    -> 주의 사항 
    Date day3();
    ->불가능 , 리턴값 Date, day3() 인자 없는 day3함수가 정의가 됨 -> 쓸 때 Date day3; 로 쓰기

* 생성자 오버로딩

    Date() {
        std::cout << "기본 생성자 호출!" << std::endl;
        year_ = 2012;
        month_ = 7;
        day_ = 12;
    }

    Date(int year, int month, int day) {
    std::cout << "인자 3 개인 생성자 호출!" << std::endl;
    year_ = year;
    month_ = month;
    day_ = day;
  }


    -> 클래스 내부에 기본적으로 생성자가 호출 되었다면
    1. Date day = Date(); -> 2017 7 12
    2. Date day2(2012, 10, 31); -> 2012 10 31 
    값이 다르고 인자 값을 주었을 때 오버로딩이 되는 것을 알 수 있다.

* 소멸자 -> delete 가 있지만, 자동으로 소멸되는 자동 호출 함수가 있다. -> 소멸자
소멸자는 인자를 아무것도 가지지 않는다는 것
~Marine();
-> 디폴트 소멸자가 존재하고 따로 정의하지 않는다면 아무런 작업도 수행하지 않음

소멸자 ex - 
    Marine::~Marine() {
    std::cout << name << " 의 소멸자 호출 ! " << std::endl;
    if (name != NULL) {
        delete[] name;
    }
    }

* 복사 생성자 -> 어떤 클래스 T가 있다면 T(const T& a); 로 정의
-> 함수 내부에서 받은 인자값을 변화 시킬 일이 없다면 꼭 const 사용
-> pc.coord_x = 3; -> 불가능

디폴트 복사 생성자가 존재하지만 pc3 = pc2 로 생성되었을 때 만약 디폴트 소멸자가 있어서 pc2가 소멸되었을 때 가리키고있던 포인터가 소멸되면서 런타임 오류가 난다.

* 생성자의 초기화 리스트 (initializer list)

    Marine::Marine() : hp(50), coord_x(0), coord_y(0), damage(5), is_dead(false) {}
    -> 함수 본체에는 아무것도 없지만 생성자 역할을 하고 있음
    -> 생성자 이름 뒤에 : 을 통해서 생성자 호출과 동시에 멤버 변수들을 초기화 할 수 있다.

    Marine::Marine() {
    hp = 50;
    coord_x = coord_y = 0;
    damage = 5;
    is_dead = false;
    }
    -> 기본 생성자 

* 클래스 내부 static 변수
-> 어떤 클래스의 static 멤버 변수의 경우, 멤버 변수들 처럼 객체가 소멸될 때 소멸되는 것이 아닌, 프로그램이 종료될 때 소멸

