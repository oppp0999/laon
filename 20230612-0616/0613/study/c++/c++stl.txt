* C++ 표준 템플릿 라이브러리 ( STL )
    1. 임의 타입의 객체를 보관할 수 있는 컨테이너 (container)
    2. 컨테이너에 보관된 원소에 접근할 수 있는 반복자 (iterator)
    3. 반복자들을 가지고 일련의 작업을 수행하는 알고리즘 (algorithm)

#1 임의 타입의 객체를 보관할 수 있는 컨테이너 (container)
    -> 다루려는 객체가 어떤 특성을 갖는지 무관하게 라이브러리를 자유롭게 사용할 수 있다는 것.
    

* c++ 'STL' 컨테이너 - 벡터 (std::vector)
    1. C++ STL 컨테이너는 크게 두 종류
        1.1 배열처럼 객체들을 순차적으로 보관하는 시퀀스 컨테이너
            - vector, list, deque 3개가 정의
            - vector -> 가변 길이 배열, 메모리상에서 실제로 순차적으로 저장, 원소 접근이 빠름
                -> 현재 가지고 있는 원소의 개수 보다 더 많은 공간을 할당 -> push_back을 이용하요면 미리 할당된 공간에 복사
                -> vector의 시간 복잡도
                    1. 임의의 위치 원소 접근 ([], at) : O(1)
                    2. 맨 뒤에 원소 추가 및 제거 (push_back/pop_back) : amortized O(1), 최악 (O(n))
                    3. 임의의 위치 원소 추가 및 제거 (insert, erase) : O(n)


        1.2 키를 바탕으로 대응되는 값을 찾아주는 연관 컨테이너
            -> 특정한 키를 넣으면 이에 대응되는 값을 돌려주는 것
            -> 두 가지의 구조를 얻을 수 있다
                1.2.1 특정 키가 연관 컨테이너에 존재하는지 유무 (true) -> 셋(set), 멀티셋(multiset)
                1.2.2 특정 키에 대응되는 값이 무엇인지 질의 (45) -> 맵(map), 멀티맵(multimap)
                    -> 맵과 멀티맵으로도 셋처럼 사용 가능

    
* 반복자 (iterator)
    - 반복자는 컨테이너에 iterator 멤버 타입으로 정의되어 있음.
    - vector의 경우 반복자를 얻기 위해서는 begin(), end()
        [1](vec.begin()), [2], [3], [4], [5], [6](vec 마지막 원소), [ ](vec.end())

        1. begin() -> vector 첫번째 원소를 가리키는 반복자를 리턴
        2. end() -> vector 마지막 원소 한 칸 뒤를 가리키는 반복자를 리턴
            - 마지막 원소의 뒤를 가리키는 이유는?
                -> 빈 벡터를 표현할 수 있다. -> begin() == end()

    
    ex1)
    #include <iostream>
    #include <vector>


    template <typename T>
    void print_vector(std::vector<T>& vec) {
        // 전체 벡터를 출력하기
        for (typename std::vector<T>::iterator itr = vec.begin(); itr != vec.end(); ++itr) {
            std::cout << *itr << std::endl;
        }
    }
    int main() {
        std::vector<int> vec;
        vec.push_back(10);
        vec.push_back(20);
        vec.push_back(30);
        vec.push_back(40);

        std::cout << "처음 벡터 상태" << std::endl;
        print_vector(vec);
        std::cout << "----------------------------" << std::endl;

        // vec[2] 앞에 15 추가
        vec.insert(vec.begin() + 2, 15);
        print_vector(vec);

        std::cout << "----------------------------" << std::endl;
        // vec[3] 제거
        vec.erase(vec.begin() + 3);
        print_vector(vec);
        
        std::cout << "----------------------------" << std::endl;
        std::vector<int>::iterator itr = vec.begin() + 2;
        std::cout << "3 번째 원소 :: " << *itr << std::endl;
    }

CODE 6 ~ 11 -> 반복자 타입은 std::vector<>::iterator 멤버 타입으로 정의되어 있다.
    8 -> 템플릿 버전의 경우에는 typename 을 추가해야함 -> iterator가 std::vector<T> 의 의존 타입이기 때문
    - vec.begin(), vec.end() 함수가 이를 리턴하고, end()가 vector 의 마지막 원소 바로 뒤를 가리키기 때문에
        for 문에서 vector 전체 원소를 보고 싶다면 vec.end() 가 아닐 때 까지 반복하면됨.
    9 -> 반복자가 포인터처럼 사용되는데 가리키는 원소의 값을 보고 싶다면 -> *를 이용하여 주소값의 값을 보았던 것처럼 사용
        실제로 itr은 포인터가 아닌 * 연산자를 오버로딩하여 마치 포인터 처럼 동작하게 만드는 것

CODE 24 ~ 25 -> insert 함수, 인자로 반복자를 받고, 그 앞에 원소를 추가 -> 10, 20, 30, 40 -> 10, 20, 15, 30, 40

CODE 29 ~ 30 -> erase 함수, 인자로 반복자를 받고, 반복자가 가리키는 원소를 제거, 4번째인 30이 삭제 -> 10, 20, 15, 30, 40 -> 10, 20, 15, 40

CODE 32 ~ 34 -> + 를 통해서 그만큼 떨어져잇는 원소를 가리키게 할 수도 있음

#vector 반복자 erase, insert 사용시 주의사항

    ---------->오류 방법
    std::vector<int>::iterator itr = vec.begin();
    std::vector<int>::iterator end_itr = vec.end();

    for (; itr != end_itr; ++itr) {
        if (*itr == 20) {
        vec.erase(itr);
        }
    }

    -> 컨데이너에 원소를 추가하거나 제거하게 되면 기존에 사용했던 모든 반복자들을 사용할 수 없음
    -> 즉 vec.erase(itr) 에서 지정했던 itr이 가리키고 있는 부분은 유효한 반복자가 아니게 되게 때문에 오류 발생
    
    -----------> 옳은 방법
    std::vector<int>::iterator itr = vec.begin();

    for (; itr != vec.end(); ++itr) {
    if (*itr == 20) {
        vec.erase(itr);
        itr = vec.begin();
    }
    }

#vector - const_iterator 반복자
    -> const_iterator로 가리키고 있는 원소의 값을 바꿀 수 없다.

     std::vector<int>::const_iterator citr = vec.cbegin() + 2;
    
    // 상수 반복자가 가리키는 값은 바꿀수 없다. 불가능!
    *citr = 30;

#vector - reverse iterator 역반복자
    -> 벡터 뒤에서 부터 앞으로
    역반복자가 가리키는 포인트 위치
    [](vec.rend()), [1](vector 첫 번째 원소), [2], [3], [4], [5], [6](vec.rbegin(), vector 마지막 원소)

    또한,
    상수 역반복자도 존재 -> const_reverse_iterator 타입이고, crbegin(), crend()

* 범위 기반 for문 (range based for loop)
    ex1)
    // range-based for 문
    for (int elem : vec) {
        std::cout << "원소 : " << elem << std::endl;
    }

    -> elem 에 vec의 원소들이 매 루프 마다 복사되서 들어가게 됨. -> elem = vec[i]; 동일

    for (const auto& elem : vec) {
        std::cout << elem << std::endl;
    }

    -> const auto& 로 elem 을 선언하였으므로, elem 은 vec 의 원소들을 상수 레퍼런스로 접근

* 리스트 (list)
    -> 양방향 연결 구조를 가진 자료형
    [1](list 첫번째 원소) <-> [2] <-> [3] <-> [4](list 마지막 원소)
    각각의 원소가 앞쪽 뒤쪽 원소를 가르킴

    리스트가 가진 반복자의 연산 수행
    std::list<int>::iterator itr = lst.begin();
    1. itr++    //가능
    2. itr--    //가능
    3. itr + 5  //불가능
        -> 임의의 위치에 있는 원소를 가리킬 수 없음, 반복자는 오직 한 칸 씩 밖에 움직일 수 없음
    
    -> 리스트에서 정의 된 반복자의 타입은 BidirectionalIterator 이다. (양방향 이동, 한 칸 씩)

#리스트 사용 시 벡터와 다른 erase

    for (std::list<int>::iterator itr = lst.begin(); itr != lst.end(); ++itr) {
    // 값이 30 인 원소를 삭제한다.
    if (*itr == 30) {
        lst.erase(itr);
        break;
    }
    }
    -> 벡터와 다르게 원소를 지워도 반복자가 무효화 되지 않음 -> 각 원들의 주소값들은 바뀌지 않기 때문

* 덱 (deque - double ended queue)
    -> 임의의 위치의 원소에 접근할 수 있고, 맨 뒤에 원소를 추가/제거 가능. 앞에서도 가능
    -> 메모리 상에 연속으로 존재하지 않기 때문에 더 많은 메모리가 필요

    -> 하지만 일정 크기로 잘려 블록 들이 존재하기에 가득찬 블록에서 추가 원소를 추가한다면 새로운 블록을 만들어 넣으면 끝
        -> 벡터는 새로 큰 메모리를 할당 + 기존 값들 복사 

    ex1)
    #include <deque>
    #include <iostream>

    template <typename T>
    void print_deque(std::deque<T>& dq) {
    // 전체 덱을 출력하기
    std::cout << "[ ";
    for (const auto& elem : dq) {
        std::cout << elem << " ";
    }
    std::cout << " ] " << std::endl;
    }
    int main() {
    std::deque<int> dq;
    dq.push_back(10);
    dq.push_back(20);
    dq.push_front(30);
    dq.push_front(40);

    std::cout << "초기 dq 상태" << std::endl;
    print_deque(dq);

    std::cout << "맨 앞의 원소 제거" << std::endl;
    dq.pop_front();
    print_deque(dq);
    }

    -> 기본적으로 원소 추가하고 pop을 통해서 원소 위치를 편하게 제거할 수 있다.
        [], at 같은 임의의 위치 도 접근 가능
-> 반복자는 RandomAccessIterator 타입으로 벡터랑 동일한 방식으로 작동

# 어떤 상황에서 컨테이너를 사용해야해??
    1. 일반적인 상황에서는 그냥 벡터를 사용한다.
    2. 만약에 맨 끝이 아닌 중간에 원소들을 추가하거나 제거하는 일을 많이 하고, 원소들을 순차적으로만 접근 한다면 리스트를 사용한다.
    3. 만약에 맨 처음과 끝 모두에 원소들을 추가하는 작업을 많이하면 덱을 사용한다.

* 셋 (set)

    ex1)
    #include <iostream>
    #include <set>

    template <typename T>
    void print_set(std::set<T>& s) {
        // 셋의 모든 원소들을 출력하기
        std::cout << "[ ";
        for (typename std::set<T>::iterator itr = s.begin(); itr != s.end(); ++itr) {
            std::cout << *itr << " ";
        }
        std::cout << " ] " << std::endl;
    }
    int main() {
        std::set<int> s;
        s.insert(10);
        s.insert(50);
        s.insert(20);
        s.insert(40);
        s.insert(30);

        std::cout << "순서대로 정렬되서 나온다" << std::endl;
        print_set(s);

        std::cout << "20 이 s 의 원소인가요? :: ";
        auto itr = s.find(20);
        if (itr != s.end()) {
            std::cout << "Yes" << std::endl;
        } else {
            std::cout << "No" << std::endl;
        }

        std::cout << "25 가 s 의 원소인가요? :: ";
        itr = s.find(25);
        if (itr != s.end()) {
            std::cout << "Yes" << std::endl;
        } else {
            std::cout << "No" << std::endl;
        }
    }

CODE 15 ~ 19 -> set에 원소를 추가하기 위해서는 시퀀스 컨테이너 처럼 insert 함수를 사용
    -> 다른 점은 어디에 추가할지 정보가 없음 -> 그냥 insert
    -> 번호를 매기는 느낌보다 상자에 안에 그냥 있냐 없냐 느낌

CODE 4 ~ 12 -> 셋 반복자의 타입은 BidirectionalIterator, 시퀀스 컨테이너의 리스트 처럼 임의의 위치에 있는 원소에 접근하는 것은 불가능 그저, 순차적으로 하나씩 접근
    -> set에 원소를 넣을 때 -> 정렬된 상태를 유지하며 추가.

CODE 24 ~ 38 -> set에는 find 함수가 제공 -> 원소가 존재하는지 아닌지 확인 가능
    -> 원소가 존재한다면 이를 가리키는 반복자를 리턴(std::set<>::iterator)
        존재하지 않는다면 s.end() 리턴

#set의 특징
    1. set은 내부적으로 트리 구조로 구성
    2. 중복되는 값이 없음
        s.insert(10);
        s.insert(20);
        s.insert(30);
        s.insert(20);
        s.insert(10);
        -> [ 10 20 30 ]

* 클래스를 set에 넣고 싶을 때

    bool operator<(const Todo& t) const {
        if (priority == t.priority) {
            return job_desc < t.job_desc;
        }
        return priority > t.priority;
    }

    todos.insert(Todo(1, "농구 하기"));
    todos.insert(Todo(2, "수학 숙제 하기"));

    -> 라고 set에 클래스내부 중요도와 내용을 넣게 된다면 중요도를 비교하기 위한 operator< 만들어 줄 수밖에 없다
        하지만 == 중요도가 같을 때 따로 처리하는 이유는 중복으로 보기 때문에 내용이 달라서 지워버림.


    다른 방식의 비교 수행하는 클래스 추가
    ex1)
    #include <iostream>
    #include <set>
    #include <string>

    template <typename T, typename C>
    void print_set(std::set<T, C>& s) {
    // 셋의 모든 원소들을 출력하기
    for (const auto& elem : s) {
        std::cout << elem << " " << std::endl;
    }
    }
    class Todo {
    int priority;
    std::string job_desc;

    public:
    Todo(int priority, std::string job_desc)
        : priority(priority), job_desc(job_desc) {}

    friend struct TodoCmp;

    friend std::ostream& operator<<(std::ostream& o, const Todo& td);
    };
    struct TodoCmp {
    bool operator()(const Todo& t1, const Todo& t2) const {
        if (t1.priority == t2.priority) {
        return t1.job_desc < t2.job_desc;
        }
        return t1.priority > t2.priority;
    }
    };

    std::ostream& operator<<(std::ostream& o, const Todo& td) {
    o << "[ 중요도: " << td.priority << "] " << td.job_desc;
    return o;
    }
    int main() {
    std::set<Todo, TodoCmp> todos;

    todos.insert(Todo(1, "농구 하기"));
    todos.insert(Todo(2, "수학 숙제 하기"));
    todos.insert(Todo(1, "프로그래밍 프로젝트"));
    todos.insert(Todo(3, "친구 만나기"));
    todos.insert(Todo(2, "영화 보기"));

    print_set(todos);

    std::cout << "-------------" << std::endl;
    std::cout << "숙제를 끝냈다면!" << std::endl;
    todos.erase(todos.find(Todo(2, "수학 숙제 하기")));
    print_set(todos);
    }

CODE 24 ~ 31 -> 비교 수행하기 위한 클래스, 정확한 클래스에 정의된 함수 객체를 바탕으로 모든 비교를 수행
    38 -> set에 두번째 인자를 넘겨주게 되면 set은 이미 받아서 TodoCmp 클래스에 함수 객체 바탕으로 비교 수행하기

    set의 클래스 정의를 보면ㅡ
    template <class Key, class Compare = std::less<Key>,
            class Allocator = std::allocator<Key>
            >
    class set;
    -> 두 번째 인자로 Compare를 받는 다는 것을 알 수 있다. -> std::less<key>가 들어있는데 -> key operator< 를 사용한다는 것과 같은 의미
    -> Compare 타입을 전달하지 않으면 그냥 key 클래스의 operator< 수행


* 맵 (map)
    -> set은 키만 보관했지만, map은 키에 대응되는 값(value) 까지 보관

    ex1)
    #include <iostream>
    #include <map>
    #include <string>

    template <typename K, typename V>
    void print_map(std::map<K, V>& m) {
        // 맵의 모든 원소들을 출력하기
        for (auto itr = m.begin(); itr != m.end(); ++itr) {
            std::cout << itr->first << " " << itr->second << std::endl;
        }
    }

    int main() {
        std::map<std::string, double> pitcher_list;

        // 참고로 2017년 7월 4일 현재 투수 방어율 순위입니다.

        // 맵의 insert 함수는 pair 객체를 인자로 받습니다.
        pitcher_list.insert(std::pair<std::string, double>("박세웅", 2.23));
        pitcher_list.insert(std::pair<std::string, double>("해커 ", 2.93));
        pitcher_list.insert(std::pair<std::string, double>("피어밴드 ", 2.95));

        // 타입을 지정하지 않아도 간단히 std::make_pair 함수로
        // std::pair 객체를 만들 수 도 있습니다.
        pitcher_list.insert(std::make_pair("차우찬", 3.04));
        pitcher_list.insert(std::make_pair("장원준 ", 3.05));
        pitcher_list.insert(std::make_pair("헥터 ", 3.09));

        // 혹은 insert 를 안쓰더라도 [] 로 바로
        // 원소를 추가할 수 있습니다.
        pitcher_list["니퍼트"] = 3.56;
        pitcher_list["박종훈"] = 3.76;
        pitcher_list["켈리"] = 3.90;

        print_map(pitcher_list);

        std::cout << "박세웅 방어율은? :: " << pitcher_list["박세웅"] << std::endl;
    }

CODE 14 -> 템플릿 인자 2개를 가짐. 첫번째는 키의 타입, 두 번째는 값의 타입 (투수 이름, 투수의 방어율)

CODE 19 ~ 21 -> 맵에 원소를 넣기 위해서는 std::pair 객체를 전달
    -> std::pair 정의
    template <class T1, class T2>
    struct std::pair {
        T1 first;
        T2 second;
    };

CODE 25 ~ 27 -> 함수는 인자로 들어오는 객체를 보고 타입을 추측해 알아서 std::pair 객체를 만들어 리턴해줌

CODE 31 ~ 33 -> operator[] 를 이용해서 새로운 원소를 추가할 수도 있다. (키가 존재한다면 값이 대체)

CODE 5 ~ 11 -> set과 마찬가지로 순차적으로 원소 탐색 가능, 반복자가 맵에 저장되어있는 std::pair를 가리킴
    -> itr->first (해당 원소 키) itr->second (해당 원소의 값)
    8 ~ 10 -> 범위 기반 for로 변경 
        template <typename K, typename V>
        void print_map(std::map<K, V>& m) {
            // kv 에는 맵의 key 와 value 가 std::pair 로 들어갑니다.
            for (const auto& kv : m) {
                std::cout << kv.first << " " << kv.second << std::endl;
            }
        }

    ex2)
    -> map에 없는 키를 참조하게 되면 자동으로 값의 디폴트 생성자를 호출하여 원소를 추가해버리는 상황을 막기 위한 코드

    #include <iostream>
    #include <map>
    #include <string>

    template <typename K, typename V>
    void print_map(const std::map<K, V>& m) {
    // kv 에는 맵의 key 와 value 가 std::pair 로 들어갑니다.
        for (const auto& kv : m) {
            std::cout << kv.first << " " << kv.second << std::endl;
        }
    }

    template <typename K, typename V>
    void search_and_print(std::map<K, V>& m, K key) {
        auto itr = m.find(key);
        if (itr != m.end()) {
            std::cout << key << " --> " << itr->second << std::endl;
        } else {
            std::cout << key << "은(는) 목록에 없습니다" << std::endl;
        }
    }

    int main() {
        std::map<std::string, double> pitcher_list;

        pitcher_list["오승환"] = 3.58;

        print_map(pitcher_list);
        std::cout << "-----------------" << std::endl;

        search_and_print(pitcher_list, std::string("오승환"));
        search_and_print(pitcher_list, std::string("류현진"));
    }

-> search_and_print 하지 않으면 기본적으로  pitcher_list["류현진"] 했을 때
    결과값으로 류현진 0 으로 0값이 디폴트로 정해지면서 원소가 추가가 된다.

CODE 13 ~ 21 -> 이를 해결하기 위해서 find를 이용하여 안전하게 키에 대응되는 값을 찾는 방법이다.

* 멀티셋(multiset) 과 멀티맵(multimap)
    -> 원소가 이미 존재하고 있는데 insert를 해도 허락

    ex1) multiset
    #include <iostream>
    #include <set>
    #include <string>

    template <typename K>
    void print_set(const std::multiset<K>& s) {
        // 셋의 모든 원소들을 출력하기
        for (const auto& elem : s) {
            std::cout << elem << std::endl;
        }
    }

    int main() {
        std::multiset<std::string> s;

        s.insert("a");
        s.insert("b");
        s.insert("a");
        s.insert("c");
        s.insert("d");
        s.insert("c");

        print_set(s);
    }
    -> a,a,b,c,c,d
    -> 그냥 set이었다면 출력 값은 a,b,c,d

    ex2) multimap
    #include <iostream>
    #include <map>
    #include <string>

    template <typename K, typename V>
    void print_map(const std::multimap<K, V>& m) {
        // 맵의 모든 원소들을 출력하기
        for (const auto& kv : m) {
            std::cout << kv.first << " " << kv.second << std::endl;
        }
    }

    int main() {
        std::multimap<int, std::string> m;
        m.insert(std::make_pair(1, "hello"));
        m.insert(std::make_pair(1, "hi"));
        m.insert(std::make_pair(1, "ahihi"));
        m.insert(std::make_pair(2, "bye"));
        m.insert(std::make_pair(2, "baba"));

        print_map(m);

        // 뭐가 나올까요?
        std::cout << "--------------------" << std::endl;
        std::cout << m.find(1)->second << std::endl;
    }
    -> 멀티맵의 경우에는 [] 연산자를 사용할 수 없다.
    -> 중복 현상 때문에 어떤 걸 불러올 지 알 수 없기 때문,

CODE 25 -> find 함수를 사용하여 해당하는 키가 없으면 m.end() 리턴
    -> 만약 3개의 문자열이 대응되는 값이 있다면 랜덤으로 hello, hi, ahihi 중 하나를 불러옴

    ->
    // 1 을 키로 가지는 반복자들의 시작과 끝을
    // std::pair 로 만들어서 리턴한다.
    auto range = m.equal_range(1);
    for (auto itr = range.first; itr != range.second; ++itr) {
        std::cout << itr->first << " : " << itr->second << " " << std::endl;
    }
    -> equal_range 함수의 경우 인자로 멀티맵을 받은 뒤 키에 대응되는 원소들의 반복자들 중에서 시작과 끝 바로 다음을 가리키는 반복자를 std::pair 객체로 만들어 리턴

* 정렬되지 않은 셋과 맵 unordered_set 과 unordered_map
    ex1)
    #include <iostream>
    #include <string>
    #include <unordered_set>

    template <typename K>
    void print_unordered_set(const std::unordered_set<K>& m) {
        // 셋의 모든 원소들을 출력하기
        for (const auto& elem : m) {
            std::cout << elem << std::endl;
        }
    }

    int main() {
        std::unordered_set<std::string> s;

        s.insert("hi");
        s.insert("my");
        s.insert("name");
        s.insert("is");
        s.insert("psi");
        s.insert("welcome");
        s.insert("to");
        s.insert("c++");

        print_unordered_set(s);
    }
    -> 모든 원소들을 반복자로 추력해보면 순서가 랜덤으로 나옴.

# 해쉬 함수
    unordered_set 과 unordered_map은 원소를 삽입하거나 검색 하기 위해 해시 함수를 사용
    -> 같은 원소면 같은 상자에 들어감 -> 물론 다른 원소가 같은 해시 함수값을 가져가 같은 상자에 들어갈 수 있다(해시충돌)

    ex1)
    #include <iostream>
    #include <string>
    #include <unordered_set>

    template <typename K>
    void print_unordered_set(const std::unordered_set<K>& m) {
    // 셋의 모든 원소들을 출력하기
    for (const auto& elem : m) {
        std::cout << elem << std::endl;
    }
    }

    template <typename K>
    void is_exist(std::unordered_set<K>& s, K key) {
    auto itr = s.find(key);
    if (itr != s.end()) {
        std::cout << key << " 가 존재!" << std::endl;
    } else {
        std::cout << key << " 가 없다" << std::endl;
    }
    }
    int main() {
        std::unordered_set<std::string> s;

        s.insert("hi");
        s.insert("my");
        s.insert("name");
        s.insert("is");
        s.insert("psi");
        s.insert("welcome");
        s.insert("to");
        s.insert("c++");

        print_unordered_set(s);
        std::cout << "----------------" << std::endl;
        is_exist(s, std::string("c++"));
        is_exist(s, std::string("c"));

        std::cout << "----------------" << std::endl;
        std::cout << "'hi' 를 삭제" << std::endl;
        s.erase(s.find("hi"));
        is_exist(s, std::string("hi"));
    }

CODE 13 ~ 21 -> find 함수를 통해서 원소의 존재를 알 수 있다, 없다면 end 리턴

CODE 41 ~ 42 -> 원소 제거를 위해 간단히 find 가리키는 반복자를 찾은 뒤 이를 전달.

* 내가 만든 클래스를 `unordered_set/unordered_map` 의 원소로 넣고 싶을 때
    -> 클래스의 객체를 위한 '해시 함수'를 직접 만들어야함.
    -> 순서대로 정렬하지 않기에 operator< 는 필요없음
    -> operator== 는 필요함 -> 해시 충돌 발생 시에 상자안에 있는 원소들과 비교

    ex1)
    #include <functional>
    #include <iostream>
    #include <string>
    #include <unordered_set>

    template <typename K>
    void print_unordered_set(const std::unordered_set<K>& m) {
        // 셋의 모든 원소들을 출력하기
        for (const auto& elem : m) {
            std::cout << elem << std::endl;
        }
    }

    template <typename K>
    void is_exist(std::unordered_set<K>& s, K key) {
        auto itr = s.find(key);
        if (itr != s.end()) {
            std::cout << key << " 가 존재!" << std::endl;
        } else {
            std::cout << key << " 가 없다" << std::endl;
         }   
    }
    class Todo {
        int priority;  // 중요도. 높을 수록 급한것!
        std::string job_desc;

        public:
            Todo(int priority, std::string job_desc)
                : priority(priority), job_desc(job_desc) {}

            bool operator==(const Todo& t) const {
                if (priority == t.priority && job_desc == t.job_desc) return true;
                return false;
            }

            friend std::ostream& operator<<(std::ostream& o, const Todo& t);
            friend struct std::hash<Todo>;
    };

    // Todo 해시 함수를 위한 함수객체(Functor)
    // 를 만들어줍니다!
    namespace std {
        template <>
        struct hash<Todo> {
        size_t operator()(const Todo& t) const {
            hash<string> hash_func;

            return t.priority ^ (hash_func(t.job_desc));
        }
        };
    }  // namespace std
    std::ostream& operator<<(std::ostream& o, const Todo& t) {
        o << "[중요도 : " << t.priority << " ] " << t.job_desc;
        return o;
    }

    int main() {
        std::unordered_set<Todo> todos;

        todos.insert(Todo(1, "농구 하기"));
        todos.insert(Todo(2, "수학 숙제 하기"));
        todos.insert(Todo(1, "프로그래밍 프로젝트"));
        todos.insert(Todo(3, "친구 만나기"));
        todos.insert(Todo(2, "영화 보기"));
        print_unordered_set(todos);
        std::cout << "----------------" << std::endl;
    }

CODE 43 ~ 50 -> string 을 템플릿 인자로 받기위해 hash_func으로 객체를 만든 뒤 Functor로 사용
    -> 해시 함수는 객체의 operator() 를 오버로드하여 std::size_t 타입을 리턴 하면된다. (보통은 int랑 동일)
    -> priority는 int 값 이므로 해시값 자체를 쓰고 string의 해시값은 hash_func 객체로 계산
    -> 두 결과 값을 XOR 연산하여 합친다.

    hash 클래스가 namespace std 안에 정의 되어 있냐면, 특정 namespace 안에 클래스/함수를 추가히기 위해 명시적으로 namespace (이름) 을 써줘야함.

CODE 31 ~ 34 -> 연산자를 추가하여 Todo 객체를 unordered_set 에 사용 함
