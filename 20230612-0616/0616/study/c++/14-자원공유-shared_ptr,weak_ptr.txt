때로는 여러 개의 스마트 포인터가 하나의 객체를 같이 소유 해야 하는 경우가 발생 
    -> 어떤 객체가 먼저 소멸되는지 알 수 없기 때문에 이 자원 역시 어느 타이밍에 해제 시켜야 할 지 알 수 없음

- 몇 개의 객체에서 가리키는지 추적한 다음 그 수가 0이 되어야만 비로소 해제를 시켜주는 방식의 포인터가 필요

* shared_ptr
    -> 기존에 유일하게 객체를 소유하는 unique_ptr 와는 다르게 객체를 가리킬 경우, 다른 shared_ptr 역시 그 객체를 가리킬 수 있다.

    std::shared_ptr<A> p1(new A());
    std::shared_ptr<A> p2(p1);  // p2 역시 생성된 객체 A 를 가리킨다.

    // 반면에 unique_ptr 의 경우
    std::unique_ptr<A> p1(new A());
    std::unique_ptr<A> p2(p1);  // 컴파일 오류!

    -> 즉, shared_ptr 같은 객체를 가리킬 수 있다. 몇개의 shared_ptr들이 원래 객체를 가리키는지 알아야함.
    -> 이를, 참조 개수(reference count)라고 하는데, 참조 개수가 0이 되어야만 가리키고 있는 객체를 해제 할 수 있다.

    -> 같은 객체를 가리키고 있으므로, 참조 개수 2

    ex1)
    #include <iostream>
    #include <memory>
    #include <vector>

    class A {
    int *data;

    public:
    A() {
        data = new int[100];
        std::cout << "자원을 획득함!" << std::endl;
    }

    ~A() {
        std::cout << "소멸자 호출!" << std::endl;
        delete[] data;
    }
    };

    int main() {
        std::vector<std::shared_ptr<A>> vec;

        vec.push_back(std::shared_ptr<A>(new A()));
        vec.push_back(std::shared_ptr<A>(vec[0]));
        vec.push_back(std::shared_ptr<A>(vec[1]));

        // 벡터의 첫번째 원소를 소멸 시킨다.
        std::cout << "첫 번째 소멸!" << std::endl;
        vec.erase(vec.begin());

        // 그 다음 원소를 소멸 시킨다.
        std::cout << "다음 원소 소멸!" << std::endl;
        vec.erase(vec.begin());

        // 마지막 원소 소멸
        std::cout << "마지막 원소 소멸!" << std::endl;
        vec.erase(vec.begin());

        std::cout << "프로그램 종료!" << std::endl;
    }

    -> shared_ptr를 원소로 가지는 벡터 vec을 정의 -> vec[0], vec[1], vec[2] 모두 같은 A 객체를 가리키는 shared_ptr 생성
    -> shared_ptr 의 경우 객체를 가리키는 모든 스마트 포인터 들이 소멸되어야만 객체를 파괴하기 때문에, 처음 두 번의 erase 에서는 아무것도 하지 않다가 
        마지막의 erase 에서 비로소 A 의 소멸자를 호출하는 것을 볼 수 있음

    std::cout << p1.use_count(); 를 이용하면 shared_ptr 들은 참조 개수들이 몇개 인지 알 수 있다.

# 참조 카운트 개수를 저장 한다면?
    -> 다른 곳에 카운트가 다르게 이용되는 걸 막기 위해
        - 문제를 방지하기 위해 처음으로 실제 객체를 가리키는 shared_ptr 가 제어 블록(control block) 을 동적으로 할당한 후, 
            shared_ptr 들이 이 제어 블록에 필요한 정보를 공유하는 방식으로 구현
    -> 즉, shared_ptr 복사 생성 할 때 마다 해당 제어 블록의 위치만 공유하면 되고, shared_ptr가 소멸 할 때마다 제어 블록의 참조 개수를 하나 줄이고, 생성 할 땐 늘리는 방식


* make_shared 로 생성하자.
    먼저 shared_prt 를 처음 생성 할 때
    std::shared_ptr<A> p1(new A());
    -> A를 생성하기 위해 동적 할당 한 번, 제어 블록 동적으로 할당 -> 2번의 동적 할당
    -> 아예 두 개를 합친 크기로 한 번 할당하는 것이 빠르다.

    -방안-
    std::shared_ptr<A> p1 = std::make_shared<A>();
    -> A의 생성자의 인자들을 받아서 이를 객체 A와 shared_prt의 제어 블록까지 한 번에 할당 한 후에 만들어진 shared_prt 리턴

    -> A의 생성자에 인자가 없어서 make_shared 에 아무 것도 전달 되지 않았지만 만약에 A의 생성자에 인자가 있다면
        make_shared 에 인자로 전달해주면 됨.


* shared_prt 생성 시 주의 할 점
    -> shared_prt은 인자로 주소값이 전달된다면, 마치 자기가 해당 객체를 첫번째로 소유하는 shared_prt 것 마냥 행동
    -> 두 개의 제어 블록이 따로 생성
        A* a = new A();
        std::shared_ptr<A> pa1(a);
        std::shared_ptr<A> pa2(a);

    -> pa1이 소멸된다면 참조 카운터 0이 되어 자신이 가리키는 객체 A를 소멸, pa2는 가리키고 있는데
        -> 오류 발생
        -> 이런 상황을 방지하기 위해 주소값을 통해서 생성하는 것을 지양해야한다.


    ex1) 객체 내부에서 자기 자신을 가리키는 shared_prt 만들 때 주의

    #include <iostream>
    #include <memory>

    class A { // : public std::enable_shared_from_this<A>
    int *data;

    public:
    A() {
        data = new int[100];
        std::cout << "자원을 획득함!" << std::endl;
    }

    ~A() {
        std::cout << "소멸자 호출!" << std::endl;
        delete[] data;
    }

    std::shared_ptr<A> get_shared_ptr() { return std::shared_ptr<A>(this); } // return shared_from_this();
    };

    int main() {
        std::shared_ptr<A> pa1 = std::make_shared<A>();
        std::shared_ptr<A> pa2 = pa1->get_shared_ptr();

        std::cout << pa1.use_count() << std::endl;
        std::cout << pa2.use_count() << std::endl;
    }

    -> get_shared_ptr 함수에서 shared_prt 을 생성할 때, 이미 자기 자신을 가리키는 shared_prt 가 있다는 사실을 모른채 새로운 제어 블록 생성
    -> enable_shared_from_this 를 통해 해결 할 수 있다.

# enable_shared_from_this
    -> this 를 사용해서 shared_prt 을 만들고 싶은 클래스가 있다면,
        enable_shared_from_this 를 상속 받으면 됨

CODE 4 , 18 -> shared_from_this라는 멤버 함수는 이미 정의되어 있는 제어 블록을 사용해 shared_prt 을 생성
    -> 이전 처럼 같은 객체에 두 개의 다른 제어 블록이 생성되는 일을 막을 수 있다.

    -> 반드시, shared_prt이 먼저 정의 되어 있어야함.
        -> shared_from_this 제어블록 확인만 할 뿐, 만들지 않음.


* 서로 참조하는 shared_ptr
    -> shared_prt는 참조 개수가 0이 되면 가리키는 객체를 메모리에서 해제 시킨다고 함.
    -> 객체들을 더 이상 사용하지 않는데도 불구하고 참조 개수가 절대로 0이 될 수 없는 상황

    -> 그래서 소멸자가 제대로 호출 되지 않음. -> 이러지도 못하는데, 저러지도 못하넹 베이베베 베입베
    -> 해결 방법 - weak_ptr


* weak_ptr
    -> 일반 포인터와 shared_prt 사이에 위치한 스마트 포인터로 스마트 포인터 처럼 객체를 안전하게 참조할 수 있다
        - 하지만, shared_prt 와 다르게 참조 개수를 늘리지 않음.
    -> 