* 자원 관리으 ㅣ중요성
    -> 가비지 컬렉터라 불리는 자원 청소기가 기본적으로 내장 -> 자원 해제하는 일을 크게 신경 쓸 필요가없다
    -> c++은 한 번 획득한 자원은 해제해주지 않는 이상 영원히 남아있음 -> 프로그램이 종료되면 운영체제가 해제해줌.

    A *pa = new A();
    thrower()
    delete
    -> A가 생성되고 thrower로 인해서 delete가 되지 않으면 메모리 누수 발생

    
* Resource Acquisition Is Initialization - RAII -> 자원을 흭득하다.
    -> 자원 관리를 스택에 할당한 객체를 통해 수행
    -> 예외가 발생해서 함수를 빠져나가도, 그 함수의 스택에 정의되어 있는 모든 객체들은 빠짐없이 소멸자가 호출
        -> 이를 stack unwinding 이라 함.
        -> 물론 예외가 발생하지 않는다면, 함수가 종료 될 때 당연히 소멸자들이 호출
    -> 포인터 pa의 경우 객체가 아니기 때문에 소멸자 호출 X
        -> pa를 일반적인 포인터가 아닌, '객체' 로 만들어서 자신이  소멸 될 때 자신이 가르키고 있는 데이터도 delete
            -> 즉, 자워 관리를 스태의 객체를 통해 수행
    -> 똑똑하게 작동하는 포인터 객체 -> 스마트 포인터 (smart pointer)
        - auto_ptr를 보안한
            1. unique_ptr
            2. shared_ptr

* 객체의 유일한 소유권 - unique_ptr
    -> 메모리를 잘못된 방식으로 관리했을 때 문제점 두 가지
        1. 메모리를 사용한 후에 해제하지 않은 경우(메모리 누수(leak)) 라 부름
            - RAII 패턴을 이용해서 해결 할 수 있음

        2. 메모리를 다시 참조하는 경우
            Data* data = new Data();
            Date* data2 = data;

            // data 의 입장 : 사용 다 했으니 소멸시켜야지.
            delete data;

            // ...

            // data2 의 입장 : 나도 사용 다 했으니 소멸시켜야지
            delete data2;
            -> data와 data2 가 동시에 한 객체를 가리키고 있는데, delete data 를 통해 객체를 소멸 -> data2 가 이미 소멸된 객체를 다시 소멸
                -> 이런 버그를 double free 버그
            -> 이번 문제 발생의 원인은 객체의 소유권이 명확하지 않아서 이다.
                -> data에 new data() 로 생성된 객체의 소유권을 보유한다면, delete data 만 가능하고, delete data2는 불가능
                    -> 특정 개체에 유일한 소유 권을 보여하는 포인터 객체 => unique_ptr

        
    ex1)
    #include <iostream>
    #include <memory>

    class A {
    int *data;

    public:
    A() {
        std::cout << "자원을 획득함!" << std::endl;
        data = new int[100];
    }

    void some() { std::cout << "일반 포인터와 동일하게 사용가능!" << std::endl; }

    ~A() {
        std::cout << "자원을 해제함!" << std::endl;
        delete[] data;
    }
    };

    void do_something() {
        std::unique_ptr<A> pa(new A());
        pa->some();
    }

    int main() { do_something(); }

CODE 22 -> 템플릿에 인자로 포인터를 가리킬 클래스를 전달 -> pa는 A 클래스의 객체를 가키는 포인터
            => A* pa = new A() ; 와 동일한 문자열

CODE 23 -> pa가 포인터처럼 사용 , unique_ptr '->' 연산자를 오버로드해서 마치 포인터를 다루는 것과 같이 사용
    -> unique_ptr 덕분에 RAII 패턴 사용 가능, pa는 스택에 정의된 객체이기에 do_something() 함수가 종료될 때 자동으로 소멸자가 호출
    -> unique_ptr은 소멸자 안에서 자신이 가리키고 있는 자원을 해제해주기 때문에, 자원이 잘 해제


* 삭제된 함수

    ex1) 컴파일 했을 때 복사 생성자를 호출하는 부분에서 오류가 발생
    #include <iostream>

    class A {
        public:
        A(int a){};
        A(const A& a) = delete;
    };

    int main() {
        A a(3);  // 가능
        A b(a);  // 불가능 (복사 생성자는 삭제됨)
    }

CODE 6 -> 복사 생성자를 명시적으로 삭제하였기 때문 -> 클래스 A의 복사 생성자는 존재하지 않음

    -> unique_ptr의 복사 생성자가 명시적으로 없어짐 -> 어떠한 객체를 유일하게 소유해야하기 때문에
    -> 만약 복사 생성자를 할 수 있다면 -> unique_ptr 소멸 될 때 전부 객체를 delete 하려 해서 double free 버그 발생


* unique_ptr 소유권 이전하기
    -> unique_ptr 복사가 안되지만 소유권은 이전 할 수 있다.

    ex1)
    #include <iostream>
    #include <memory>

    class A {
    int *data;

    public:
    A() {
        std::cout << "자원을 획득함!" << std::endl;
        data = new int[100];
    }

    void some() { std::cout << "일반 포인터와 동일하게 사용가능!" << std::endl; }

    ~A() {
        std::cout << "자원을 해제함!" << std::endl;
        delete[] data;
    }
    };

    void do_something() {
        std::unique_ptr<A> pa(new A());
        std::cout << "pa : ";
        pa->some();

        // pb 에 소유권을 이전.
        std::unique_ptr<A> pb = std::move(pa);
        std::cout << "pb : ";
        pb->some();
    }

    int main() { do_something(); }

CODE 27 -> pa 를 pb에 강제로 이동 -> pb가 new A로 생성된 객체의 소유권을 갖게 되고 ,pa는 아무것도 가리키고 있지 않음
    -> pa.get()을 통해서 실제로 주소값을 확인하면 0(nullptr) 이 나옴. pa를 이동시킨 후에 pa->some() 하면 문제 발생
    즉, 소유권 이동 후 unique_ptr 접근 조심
    -> 소유권이 이전된 unique_ptr를 댕글링 포인터(dangling pointer) -> 재참조 조심!!!


* unique_ptr 를 함수 인자로 전달하기

    ex1) unique_ptr 소유권의 의미 원칙을 지키면서 전달하는 방법 -> 원래의 포인터 주소값을 전달
    #include <iostream>
    #include <memory>

    class A {
    int* data;

    public:
    A() {
        std::cout << "자원을 획득함!" << std::endl;
        data = new int[100];
    }

    void some() { std::cout << "일반 포인터와 동일하게 사용가능!" << std::endl; }

    void do_sth(int a) {
        std::cout << "무언가를 한다!" << std::endl;
        data[0] = a;
    }

    ~A() {
        std::cout << "자원을 해제함!" << std::endl;
        delete[] data;
    }
    };

    void do_something(A* ptr) { ptr->do_sth(3); }

    int main() {
        std::unique_ptr<A> pa(new A());
        do_something(pa.get());
    }

    -> unique_ptr -> get 함수를 호출, 실제 객체의 주소값을 리턴
    -> do_something -> 일반적인 포인터를 받고 있음. 소유권이라는 의미는 버린 채, do_something 함수 내부에서 객체에 접근할 수 있는 권한
    
    1. unique_ptr 어떤 객체의 유일한 소유권을 나타내는 포인터이며, unique_ptr 가 소멸될 때 가리키던 객체 역시 소멸
    2. 다른 함수에서 unique_ptr 소유한 객체에 일시적으로 접근하고 싶다면, get을 통해 해당 객체의 포인터를 전달
    3. 소유권을 이동하고자하면 unique_ptr 을 move 한다.


* unique_ptr 을 쉽게 생성하기
    -> unique_ptr 를 만들 수 있는 std::make_unique 함수 제공
        -> make_unique 함수는 아예 템플릿 인자로 전달된 클래스의 생성자 인자들에 직접 완벽한 전달을 수행

    ex1)
    #include <iostream>
    #include <memory>

    class Foo {
    int a, b;

    public:
    Foo(int a, int b) : a(a), b(b) { std::cout << "생성자 호출!" << std::endl; }
    void print() { std::cout << "a : " << a << ", b : " << b << std::endl; }
    ~Foo() { std::cout << "소멸자 호출!" << std::endl; }
    };

    int main() {
    auto ptr = std::make_unique<Foo>(3, 5);
    ptr->print();
    }

    -> 불필요한 std::unique_ptr<Foo> ptr(new Foo(3, 5)); XXXXXX


* unique_ptr 원소로 가지는 컨테이너
    -> unique_ptr 원소로 가지는 STL 컨테이너에 대해
        -> unique_ptr은 다른 타입들과 큰 차이는 없지만, '복사 생성자가 없다' 차이


    ex1)
    #include <iostream>
    #include <memory>
    #include <vector>

    class A {
    int *data;

    public:
    A(int i) {
        std::cout << "자원을 획득함!" << std::endl;
        data = new int[100];
        data[0] = i;
    }

    void some() { std::cout << "값 : " << data[0] << std::endl; }

    ~A() {
        std::cout << "자원을 해제함!" << std::endl;
        delete[] data;
    }
    };

    int main() {
    std::vector<std::unique_ptr<A>> vec;

    // vec.push_back(std::unique_ptr<A>(new A(1))); 과 동일
    vec.emplace_back(new A(1));

    vec.back()->some();
    }

CODE 26 -> 삭제된 unique_ptr 복사 생성자로 접근했기에 -> pa를 vector 안으로 이동 시켜주어야함
    -> push_back 의 우측값 레퍼런스를 받는 버전이 오버로딩 될 수 있도록

    -> vec.push_back(pa); ->  vec.push_back(std::move(pa));

CODE 27 -> emplace_back 함수를 사용하면 vector, 안에 unique_ptr 직접 생성하면서 집어 넣기 가능

    -> emplace_back 함수는 전달된 인자를 완벽한 전달 (perfect forwarding) 을 통해
        -> 직접 unique_ptr<A> 생성자에 전달 -> vector 맨 뒤에 unique_ptr<A> 객체를 생성
        -> 불필요한 연산 필요 X -> vector 맨 뒤에 생성 하기 때문


    -> emplace_back 사용 참고
        -> 
        std::vector<int> v;
        v.emplace_back(100000);
        -> 100000 int 값을 v에 추가하지만

        std::vector<std::vector<int>> v;
        v.emplace_back(100000);
        -> 100000개 들어있는 벡터를 v에 추가