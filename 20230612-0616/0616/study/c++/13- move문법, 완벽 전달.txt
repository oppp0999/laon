타입에 따른 좌측값, 우측값 취급을 서로 바꿀 수 있는 함수

* move 함수 (move semantics)
    -> <utility> 라이브러리에서 좌측값을 우측값으로 바꾸어주는 move 함수를 제공

    ex1)
    #include <iostream>
    #include <utility>

    class A {
        public:
            A() { std::cout << "일반 생성자 호출!" << std::endl; }
            A(const A& a) { std::cout << "복사 생성자 호출!" << std::endl; }
            A(A&& a) { std::cout << "이동 생성자 호출!" << std::endl; }
    };

    int main() {
        A a;

        std::cout << "---------" << std::endl;
        A b(a);

        std::cout << "---------" << std::endl;
        A c(std::move(a));
    }

CODE 5 ~ 8 -> 생성자 호출하는 부분에서 
    12, 15 -> 일반 생성자와 복사 생성자가 각각 호출되었음을 알 수 있다.
        15 -> b(a) 를 했을 때 a가 이름이 있는 좌측값 이므로 좌측값 레퍼런스가 참조하기 때문

CODE 18 -> A c(std::move(a)); -> 이동생성자가 호출
    -> std::move 함수가 인자로 받은 객체를 우측값으로 변환해서 리턴 하기 때문에
        -> 실제로 단순한 타입 변환 만 수행 (이동 수행 X)
    -> std::move 덕분에 강제적으로 우측값 레퍼런스를 인자로 받는 이동 생성자를 호출 할 수 있음

    ex2)
    #include <iostream>
    #include <cstring>

    class MyString {
        char *string_content;  // 문자열 데이터를 가리키는 포인터
        int string_length;     // 문자열 길이

        int memory_capacity;  // 현재 할당된 용량

        public:
        MyString();

        // 문자열로 부터 생성
        MyString(const char *str);

        // 복사 생성자
        MyString(const MyString &str);

        // 이동 생성자
        MyString(MyString &&str);

        // 일반적인 대입 연산자
        MyString &operator=(const MyString &s);

        // 이동 대입 연산자
        MyString& operator=(MyString&& s);

        ~MyString();

        int length() const;

        void println();
    };

    MyString::MyString() {
        std::cout << "생성자 호출 ! " << std::endl;
        string_length = 0;
        memory_capacity = 0;
        string_content = NULL;
    }

    MyString::MyString(const char *str) {
        std::cout << "생성자 호출 ! " << std::endl;
        string_length = strlen(str);
        memory_capacity = string_length;
        string_content = new char[string_length];

        for (int i = 0; i != string_length; i++) string_content[i] = str[i];
    }
    MyString::MyString(const MyString &str) {
        std::cout << "복사 생성자 호출 ! " << std::endl;
        string_length = str.string_length;
        string_content = new char[string_length];

        for (int i = 0; i != string_length; i++)
            string_content[i] = str.string_content[i];
    }
    MyString::MyString(MyString &&str) {
        std::cout << "이동 생성자 호출 !" << std::endl;
        string_length = str.string_length;
        string_content = str.string_content;
        memory_capacity = str.memory_capacity;

        // 임시 객체 소멸 시에 메모리를 해제하지
        // 못하게 한다.
        str.string_content = nullptr;
        str.string_length = 0;
        str.memory_capacity = 0;
    }
    MyString::~MyString() {
        if (string_content) delete[] string_content;
    }
    MyString &MyString::operator=(const MyString &s) {
        std::cout << "복사!" << std::endl;
        if (s.string_length > memory_capacity) {
            delete[] string_content;
            string_content = new char[s.string_length];
            memory_capacity = s.string_length;
        }
        string_length = s.string_length;
        for (int i = 0; i != string_length; i++) {
            string_content[i] = s.string_content[i];
        }

        return *this;
    }
    MyString& MyString::operator=(MyString&& s) {
        std::cout << "이동!" << std::endl;
        string_content = s.string_content;
        memory_capacity = s.memory_capacity;
        string_length = s.string_length;

        s.string_content = nullptr;
        s.memory_capacity = 0;
        s.string_length = 0;
        return *this;
    }
    int MyString::length() const { return string_length; }
    void MyString::println() {
        for (int i = 0; i != string_length; i++) std::cout << string_content[i];

        std::cout << std::endl;
    }

    template <typename T>
    void my_swap(T &a, T &b) {
        T tmp(std::move(a));
        a = std::move(b);
        b = std::move(tmp);
    }
    int main() {
        MyString str1("abc");
        MyString str2("def");
        std::cout << "Swap 전 -----" << std::endl;
        std::cout << "str1 : ";
        str1.println();
        std::cout << "str2 : ";
        str2.println();

        std::cout << "Swap 후 -----" << std::endl;
        my_swap(str1, str2);
        std::cout << "str1 : ";
        str1.println();
        std::cout << "str2 : ";
        str2.println();
    }

CODE 105 ~ 110 
    105 -> 임시 객체 tmp를 a로 부터 이동 -> 이동 생성이기에 기존에 복사 생성하는 것보다 훨씬 빠르게 수행
    108, 109 -> a에 b를 이동, b에 tmp를 이동함으로써 swap을 수행 

CODE 87 ~ 97 -> 이동 대입 연산자 정의
    -> 기존의 문자열을 가리키고 있던 string_content만 복수
    -> 이동 되는 과정은 이동 생성자나 이동 대입 연산자를 호출할 때 수행 -> std::move 시점은 아님.
    -> 이 부븐의 operator= 정의하지 않았더라면, 일반적인 대입 연산자가 오버로딩 돼서 매우 느린 복사가 수행
        -> 이동이 아님.

    
    -> 이동 자체는 std::move 를 실행함으로써 발생하는 것이 아니라 우측값을 받는 함수들이 오버로딩

    ex3)
    #include <iostream>

    class A {
    public:
    A() { std::cout << "ctor\n"; }
    A(const A& a) { std::cout << "copy ctor\n"; }
    A(A&& a) { std::cout << "move ctor\n"; }
    };

    class B {
    public:
    B(A&& a) : a_(std::move(a)) {}/////////// 

    A a_;
    };

    int main() {
    A a;
    std::cout << "create B-- \n";
    B b(std::move(a)); //////////////
    }

    -> 이동 생성자를 호출하려면 B생성자에서(A&& a)로 우측값을 인자로 받는다 그리고 캐스팅도 a를 다시 한 번 우측값으로 캐스팅 시켜준다.
        -> a는 우측값 레퍼런스지만 자체는 좌측값이기에

* 완벽한 전달 (perfect forwarding)
    -> push_back에서는 불필요한 이동 혹은 복사가 발생
        -> emplace_back함수를 사용하면 인자를 직접받아 내부에서 A의 생성자를 호출한 뒤에 이를 벡터 원소 뒤에 추가
    -> 모든 조합의 템플릿 함수들을 정의해야함
    -> 이는 되게 귀찮은 일.

* 보편적 레퍼런스(universal reference)

    ex1)
    #include <iostream>

    template <typename T>
    void wrapper(T&& u) {
        g(std::forward<T>(u));
    }

    class A {};

    void g(A& a) { std::cout << "좌측값 레퍼런스 호출" << std::endl; }
    void g(const A& a) { std::cout << "좌측값 상수 레퍼런스 호출" << std::endl; }
    void g(A&& a) { std::cout << "우측값 레퍼런스 호출" << std::endl; }

    int main() {
        A a;
        const A ca;

        std::cout << "원본 --------" << std::endl;
        g(a);
        g(ca);
        g(A());

        std::cout << "Wrapper -----" << std::endl;
        wrapper(a);
        wrapper(ca);
        wrapper(A());
    }

CODE 3 ~ 6 -> wrapper 함수는 인자로 인해 T && 를 받아버리고 있다. -> T에 대해 우측값 레퍼런스를 받는 형태를 보편적 레퍼런스
        -> 보편적 레퍼런스는 우측값만 받는 레퍼런스와 다르게
    3, 4 -> 템플릿 타입의 우측값 레퍼런스는 좌측값도 받아 낼 수 있다.
        -> 레퍼런스 겹침 규칙, T 타입의 추론
        typedef int& T;
        T& r1;   // int& &; r1 은 int&
        T&& r2;  // int & &&;  r2 는 int&

        typedef int&& U;
        U& r3;   // int && &; r3 는 int&
        U&& r4;  // int && &&; r4 는 int&&
        -> & 는 1, &&은 0이라 두고, OR 연산한다고 생각하면 됨
        
        24~ 25 -> 즉, T가 각각 A& 와 const A& 로 추론
        26 -> 은 T가 단순히 A로 추론

        문제는 g에 인자를 전달하는 방법
        5 -> g(u) 로 하지 않은 이유?
            -> u는 좌측값이다. -> 따라서 우리는 int && 를 오버로딩 하는 g를 호출하고 싶었으나 실제로는 const int&를 오버로딩하는 g가 호출
            -> 이 경우 move 를 통해 u를 다시 우측값으로 변환 -> 인자로 받은 u가 우측값 레퍼런스일때만

            -> 해결법
                -> g(forward<T>(u)); -> forward 함수 -> u가 우측값 레퍼런스 일 때만 마치 move 적용한 것 처럼 작동.
                    ->  
                    template <class S>
                    S&& forward(typename std::remove_reference<S>::type& a) noexcept { //-> std::remove_reference -> 타입의 레퍼런스를 지워주는 템플릿 메타 함수.
                    return static_cast<S&&>(a);
                    }
                    -> S가 A& 라면 
                        -> 
                        A&&& forward(typename std::remove_reference<A&>::type& a) noexcept {
                        return static_cast<A&&&>(a);
                        }
                        -> 가 되어 레퍼런스 겹침 규칙에 따라 &&& -> &
                        A& forward(A& a) noexcept { return static_cast<A&>(a); }
                        -> 가 되어, S가 A 라면,
                        A&& forward(A& a) noexcept { return static_cast<A&&>(a); }
                        -> 가 되어 성공적인 우측값으로 캐스팅해준다. -> wrapper를 사용했을 때 모두 호출되는 함수가 동일함을 알 수 있다.