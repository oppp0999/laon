* 예외란?
    -> 필요한 자원을 제공할 수 없을 때?

    ex)
    std::vector<int> v(3);  // 크기가 3 인 벡터 만듦
    std::cout << v.at(4);   // ??
    -> 또는 너무 큰 메모리를 할당하는 경우

- 정상적인 상황에서 벗어난 모든 예외적인 상황들을 예회(exception) 이라 함.

* 예외 발생시키기 - throw
    -> 예외가 발생했다는 사실을 명시적으로 나타낼 수 있음 -> throw 문

    ex1) vector 클래스

    template <typename T>
    class Vector {
    public:
        Vector(size_t size) : size_(size) {
            data_ = new T[size_];
            for (int i = 0; i < size_; i++) {
                data_[i] = 3;
            }
        }
        const T& at(size_t index) const {
            if (index >= size_) {
                throw out_of_range("vector 의 index 가 범위를 초과하였습니다.");
            }
            return data_[index];
        }
        ~Vector() { delete[] data_; }

        private:
        T* data_;
        size_t size_;
    };
-> vector의 요청한 위치에 있는 원소를 리턴하는 함수 at 함수
    -> 인자로 전달된 index 범위 이내라면, 간단히 data[index] 를 리턴
    -> 범위 밖이라면?
        -> at함수가 const T&를 리턴하기 때문에 오류 메세지 리턴 불가능

CODE 10 ~ 15 -> 예외를 던지고 싶다면, throw 예외 전달을 하고싶은 객체를 쓰면 됨.
    -> out_of_range 객체를 throw
    -> out_of_range 외에도 overflow_error, length_error, runtime_error 등등 여러가지가 정의
    -> throw 하게되면, throw 한 위치에서 함수가 종료되고, 예외 처리하는 부분까지 점프
        -> 즉, throw 아래 문장 코드들은 실행 안됨.
    -> 함수에서 예외처리하는 부분에서 throw 아래에 코드를 실행하지 않고 함수를 빠져나옴
        -> stack 같은 경우는 생성되었던 객체들을 모두 소멸

* 예외 처리 하기 - try, catch
    
    ex1)
    #include <iostream>
    #include <stdexcept>

    template <typename T>
    class Vector {
    public:
    Vector(size_t size) : size_(size) {
        data_ = new T[size_];
        for (int i = 0; i < size_; i++) {
        data_[i] = 3;
        }
    }
    const T& at(size_t index) const {
        if (index >= size_) {
        throw std::out_of_range("vector 의 index 가 범위를 초과하였습니다.");
        }
        return data_[index];
    }
    ~Vector() { delete[] data_; }

    private:
    T* data_;
    size_t size_;
    };
    int main() {
    Vector<int> vec(3);

    int index, data = 0;
    std::cin >> index;

    try {
        data = vec.at(index);
    } catch (std::out_of_range& e) {
        std::cout << "예외 발생 ! " << e.what() << std::endl;
    }
    // 예외가 발생하지 않았다면 3을 이 출력되고, 예외가 발생하였다면 원래 data 에
    // 들어가 있던 0 이 출력된다.
    std::cout << "읽은 데이터 : " << data << std::endl;
    }

CODE 31 ~ 33 -> try 안에서 무언가 예외가 발생할만한 코드가 실행 
    -> 예외가 발생 X -> try문 안에 있는 코드 그냥 실행 -> data 에는 vec의 index 번째 값이 들어가고 밑에 있는 catch 문은 무시
    -> 예외 발생 => stack에 생성된 모든 객체들의 소멸자들이 호출, 가장 가까운 catch 문으로 점프

CODE 14 ~ 16 -> throw 다음으로 실행 되는 문장이 33~35 코드 문장
    -> catch 문은 throw 된 예외를 받는 부분인데, 어떤 예외를 받냐면, catch 문 안에 정의된 예외의 꼴에 맞는 객체를 받게 됨.
        -> out_of_range 를 throw 하여 catch문이 out_of_range
    -> out_of_range 클래스는 -> 내부에 발생된 예외에 관한 내용을 저장하는 문자열
        -> what() 함수로 그 값을 볼 수 있음

- 즉, try 후에 예외 처리 throw에서 예외 발생하면 오류를 들고 catch문으로 점프 그리고 예외 std::out으로 알리고 e.what으로 예외 확인할 수 있다.

* 스택 풀기 (stack unwinding)
    -> throw 하게 되면 가장 가까운 catch로 점프하는데 그 예시이다.

    ex1)
    #include <iostream>
    #include <stdexcept>

    class Resource {
        public:
            Resource(int id) : id_(id) {}
            ~Resource() { std::cout << "리소스 해제 : " << id_ << std::endl; }

            private:
            int id_;
    };

    int func3() {
        Resource r(3);
        throw std::runtime_error("Exception from 3!\n");
    }
    int func2() {
        Resource r(2);
        func3();
        std::cout << "실행 안됨!" << std::endl;
        return 0;
    }
    int func1() {
        Resource r(1);
        func2();
        std::cout << "실행 안됨!" << std::endl;
        return 0;
    }

    int main() {
        try {
            func1();
        } catch (std::exception& e) {
            std::cout << "Exception : " << e.what();
        }
    }
-> 예외가 발생했을 때 가장 가까운 구문이 func1,2 에 없고 main에 있어 잘 전달되어 출력됨.
리소스 해제 : 3
리소스 해제 : 2
리소스 해제 : 1
Exception : Exception from 3!

-> 실행안됨 문장은 무시
    -> 만약 throw가 없었다면 '실행 안됨' 이라는 문장이 모두 함수가 종료되면서 호출 되었을 것이다.


* 여러 종류의 예외 받기
    -> 한 개의 try, 다수의 catch

    ex1)

    #include <iostream>
    #include <string>

    int func(int c) {
    if (c == 1) {
        throw 10;
    } else if (c == 2) {
        throw std::string("hi!");
    } else if (c == 3) {
        throw 'a';
    } else if (c == 4) {
        throw "hello!";
    }
    return 0;
    }

    int main() {
    int c;
    std::cin >> c;

    try {
        func(c);
    } catch (char x) {
        std::cout << "Char : " << x << std::endl;
    } catch (int x) {
        std::cout << "Int : " << x << std::endl;
    } catch (std::string& s) {
        std::cout << "String : " << s << std::endl;
    } catch (const char* s) {
        std::cout << "String Literal : " << s << std::endl;
    }
    }

-> 입력에 따라 switch문 처럼 catch를 여러 종류의 throw 된 객체를 받을 수 있다.
-> 또한 던져주는 값에 따라 catch가 달라지는 것을 알 수 있다. 받아들이는 타입에 맞춰
  

    ex2)
    #include <exception>
    #include <iostream>

    class Parent : public std::exception {
        public:
            virtual const char* what() const noexcept override { return "Parent!\n"; }
    };

    class Child : public Parent {
        public:
           const char* what() const noexcept override { return "Child!\n"; }
    };

    int func(int c) {
        if (c == 1) {
            throw Parent();
        } else if (c == 2) {
            throw Child();
        }
        return 0;
    }

    int main() {
    int c;
    std::cin >> c;

    try {
        func(c);
    } catch (Parent& p) { //////////
        std::cout << "Parent Catch!" << std::endl;
        std::cout << p.what();
    } catch (Child& c) { ///////////
        std::cout << "Child Catch!" << std::endl;
        std::cout << c.what();
    }
    }

-> Parent 나 Child 클래스 객체를 리턴 -> Parent 클래스 객체를 throw 하였을 때, Parent 받는 catch 문이 실행되어 
    "Parent catch"가 출력
-> Child 객체를 throw 했을 때, 예상과 다르게, Child 받는 catch 문이 아닌 Parent 받는 catch 문이 실행
    -> 그 이유는 catch 가장 먼저 대입될 수 있는 객체를 받는데, Parent& p = Child(); 가능하기에 일어나는 일
        -> 해결 법은 catch 문 순서를 자식 을 먼저 적어준다.


* 모든 예외 받기
    -> 예외를 throw 했는데 catch가 없을 때
    #include <iostream>
    #include <stdexcept>

    int func() { throw std::runtime_error("error"); }

    int main() {
    try {
        func();
    } catch (int i) {
        std::cout << "Catch int : " << i;
    }
    }
    -> 모든 예외 처리는 switch문의 default나 if-else 에 else 부분을 이용

    그리고 

    catch (...) {
    std::cout << "Default Catch!" << std::endl;
    }
    -> 를 사용하면 모든 객체들을 다 받을 수 있다.

* 예외를 발생시키지 않는 함수 - noexcept
    -> 어떤 함수가 예외를 발생시키지 않는다면, noexcept
    int foo() noexcept {}
    - 함수 정의 옆에 noexcept를 넣음으로써 나타낼 수 있다.
    - noexcept 키워드를 붙였다고 -> 함수가 예외를 절대로 던지지 않는다는 것이 아님
        #include <iostream>
        int foo() noexcept {}
        int bar(int x) noexcept { throw 1; }
        int main() { foo(); }
        -> 경고는 뜨지만 문제 없이 컴파일
    
    -> noexcept를 사용하는 이유? -> 컴파일러에게 주는 힌트 -> 컴파일러에게 어떤 함수가 절대 예외를 발생시키지 않는다고 전달하면 - 여러가지 추가 최적화 수행 가능

-> 소멸자는 기본적으로 noexcept (소멸자에 예외를 던지면 안됨.)