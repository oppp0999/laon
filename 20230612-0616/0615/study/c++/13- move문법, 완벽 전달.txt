타입에 따른 좌측값, 우측값 취급을 서로 바꿀 수 있는 함수

* move 함수 (move semantics)
    -> <utility> 라이브러리에서 좌측값을 우측값으로 바꾸어주는 move 함수를 제공

    ex1)
    #include <iostream>
    #include <utility>

    class A {
        public:
            A() { std::cout << "일반 생성자 호출!" << std::endl; }
            A(const A& a) { std::cout << "복사 생성자 호출!" << std::endl; }
            A(A&& a) { std::cout << "이동 생성자 호출!" << std::endl; }
    };

    int main() {
        A a;

        std::cout << "---------" << std::endl;
        A b(a);

        std::cout << "---------" << std::endl;
        A c(std::move(a));
    }

CODE 5 ~ 8 -> 생성자 호출하는 부분에서 
    12, 15 -> 일반 생성자와 복사 생성자가 각각 호출되었음을 알 수 있다.
        15 -> b(a) 를 했을 때 a가 이름이 있는 좌측값 이므로 좌측값 레퍼런스가 참조하기 때문

CODE 18 -> A c(std::move(a)); -> 이동생성자가 호출
    -> std::move 함수가 인자로 받은 객체를 우측값으로 변환해서 리턴 하기 때문에
        -> 실제로 단순한 타입 변환 만 수행 (이동 수행 X)
    -> std::move 덕분에 강제적으로 우측값 레퍼런스를 인자로 받는 이동 생성자를 호출 할 수 있음

    ex2)
    #include <iostream>
    #include <cstring>

    class MyString {
    char *string_content;  // 문자열 데이터를 가리키는 포인터
    int string_length;     // 문자열 길이

    int memory_capacity;  // 현재 할당된 용량

    public:
    MyString();

    // 문자열로 부터 생성
    MyString(const char *str);

    // 복사 생성자
    MyString(const MyString &str);

    // 이동 생성자
    MyString(MyString &&str);

    // 일반적인 대입 연산자
    MyString &operator=(const MyString &s);

    // 이동 대입 연산자
    MyString& operator=(MyString&& s);

    ~MyString();

    int length() const;

    void println();
    };

    MyString::MyString() {
    std::cout << "생성자 호출 ! " << std::endl;
    string_length = 0;
    memory_capacity = 0;
    string_content = NULL;
    }

    MyString::MyString(const char *str) {
    std::cout << "생성자 호출 ! " << std::endl;
    string_length = strlen(str);
    memory_capacity = string_length;
    string_content = new char[string_length];

    for (int i = 0; i != string_length; i++) string_content[i] = str[i];
    }
    MyString::MyString(const MyString &str) {
    std::cout << "복사 생성자 호출 ! " << std::endl;
    string_length = str.string_length;
    string_content = new char[string_length];

    for (int i = 0; i != string_length; i++)
        string_content[i] = str.string_content[i];
    }
    MyString::MyString(MyString &&str) {
    std::cout << "이동 생성자 호출 !" << std::endl;
    string_length = str.string_length;
    string_content = str.string_content;
    memory_capacity = str.memory_capacity;

    // 임시 객체 소멸 시에 메모리를 해제하지
    // 못하게 한다.
    str.string_content = nullptr;
    str.string_length = 0;
    str.memory_capacity = 0;
    }
    MyString::~MyString() {
    if (string_content) delete[] string_content;
    }
    MyString &MyString::operator=(const MyString &s) {
    std::cout << "복사!" << std::endl;
    if (s.string_length > memory_capacity) {
        delete[] string_content;
        string_content = new char[s.string_length];
        memory_capacity = s.string_length;
    }
    string_length = s.string_length;
    for (int i = 0; i != string_length; i++) {
        string_content[i] = s.string_content[i];
    }

    return *this;
    }
    MyString& MyString::operator=(MyString&& s) {
    std::cout << "이동!" << std::endl;
    string_content = s.string_content;
    memory_capacity = s.memory_capacity;
    string_length = s.string_length;

    s.string_content = nullptr;
    s.memory_capacity = 0;
    s.string_length = 0;
    return *this;
    }
    int MyString::length() const { return string_length; }
    void MyString::println() {
    for (int i = 0; i != string_length; i++) std::cout << string_content[i];

    std::cout << std::endl;
    }

    template <typename T>
    void my_swap(T &a, T &b) {
    T tmp(std::move(a));
    a = std::move(b);
    b = std::move(tmp);
    }
    int main() {
    MyString str1("abc");
    MyString str2("def");
    std::cout << "Swap 전 -----" << std::endl;
    std::cout << "str1 : ";
    str1.println();
    std::cout << "str2 : ";
    str2.println();

    std::cout << "Swap 후 -----" << std::endl;
    my_swap(str1, str2);
    std::cout << "str1 : ";
    str1.println();
    std::cout << "str2 : ";
    str2.println();
    }
