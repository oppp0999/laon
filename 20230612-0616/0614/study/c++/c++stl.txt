* 내가 만든 클래스를 `unordered_set/unordered_map` 의 원소로 넣고 싶을 때
    -> 클래스의 객체를 위한 '해시 함수'를 직접 만들어야함.
    -> 순서대로 정렬하지 않기에 operator< 는 필요없음
    -> operator== 는 필요함 -> 해시 충돌 발생 시에 상자안에 있는 원소들과 비교

    ex1)
    #include <functional>
    #include <iostream>
    #include <string>
    #include <unordered_set>

    template <typename K>
    void print_unordered_set(const std::unordered_set<K>& m) {
        // 셋의 모든 원소들을 출력하기
        for (const auto& elem : m) {
            std::cout << elem << std::endl;
        }
    }

    template <typename K>
    void is_exist(std::unordered_set<K>& s, K key) {
        auto itr = s.find(key);
        if (itr != s.end()) {
            std::cout << key << " 가 존재!" << std::endl;
        } else {
            std::cout << key << " 가 없다" << std::endl;
         }   
    }
    class Todo {
        int priority;  // 중요도. 높을 수록 급한것!
        std::string job_desc;

        public:
            Todo(int priority, std::string job_desc)
                : priority(priority), job_desc(job_desc) {}

            bool operator==(const Todo& t) const {
                if (priority == t.priority && job_desc == t.job_desc) return true;
                return false;
            }

            friend std::ostream& operator<<(std::ostream& o, const Todo& t);
            friend struct std::hash<Todo>;
    };

    // Todo 해시 함수를 위한 함수객체(Functor)
    // 를 만들어줍니다!
    namespace std {
        template <>
        struct hash<Todo> {
        size_t operator()(const Todo& t) const {
            hash<string> hash_func;

            return t.priority ^ (hash_func(t.job_desc));
        }
        };
    }  // namespace std
    std::ostream& operator<<(std::ostream& o, const Todo& t) {
        o << "[중요도 : " << t.priority << " ] " << t.job_desc;
        return o;
    }

    int main() {
        std::unordered_set<Todo> todos;

        todos.insert(Todo(1, "농구 하기"));
        todos.insert(Todo(2, "수학 숙제 하기"));
        todos.insert(Todo(1, "프로그래밍 프로젝트"));
        todos.insert(Todo(3, "친구 만나기"));
        todos.insert(Todo(2, "영화 보기"));
        print_unordered_set(todos);
        std::cout << "----------------" << std::endl;
    }

CODE 43 ~ 50 -> string 을 템플릿 인자로 받기위해 hash_func으로 객체를 만든 뒤 Functor로 사용
    -> 해시 함수는 객체의 operator() 를 오버로드하여 std::size_t 타입을 리턴 하면된다. (보통은 int랑 동일)
    -> priority는 int 값 이므로 해시값 자체를 쓰고 string의 해시값은 hash_func 객체로 계산
    -> 두 결과 값을 XOR 연산하여 합친다.

    hash 클래스가 namespace std 안에 정의 되어 있냐면, 특정 namespace 안에 클래스/함수를 추가히기 위해 명시적으로 namespace (이름) 을 써줘야함.

CODE 31 ~ 34 -> 연산자를 추가하여 Todo 객체를 unordered_set 에 사용 함

-> 상황에 따른 맵, 셋, 멀티셋, 멀티맵 사용
    1. 데이터의 존재 유무 만 궁금할 경우 -> set
    2. 중복 데이터를 허락할 경우 -> multiset
    3. 데이터에 대응되는 데이터를 저장하고 싶은 경우 -> map
    4. 중복 키를 허락할 경우 -> multimap
    5. 속도가 매우매우 중요해서 최적화를 해야하는 경우 -> unordered_map, unordered_set

* 알고리즘 라이브러리
    -> 컨테이너에 반복자들을 가지고 작업을 쉽게 수행할 수 있도록 도와주는 라이브러리
    -> 크게 두 가지의 형태를 가지고 있다.
        1. 
        template <typename Iter>
        void do_something(Iter begin, Iter end);
        -> 알고리즘을 수행할 반복자의 시작점과 끝점 바로 뒤를 받고

        2. 
        template <typename Iter, typename Pred>
        void do_something(Iter begin, Iter end, Pred pred)
        -> 반복자는 동일하게 받되, '특정한 조건'을 추가 인자로 받음
            -> 특정한 조건을 서술자(predicate) 이라고 부르며, pred 에는 보통 bool을 리턴하는 함수 개체를 전달

* 정렬 (sort, stable_sort, partial_sort)
    -> 3가지 정렬 알고리즘 지원

    1. sort : 일반적인 정렬 함수

        ex1)
        #include <algorithm>
        #include <iostream>
        #include <vector>

        template <typename Iter>
        void print(Iter begin, Iter end) {
            while (begin != end) {
                std::cout << *begin << " ";
                begin++;
            }
            std::cout << std::endl;
        }
        int main() {
            std::vector<int> vec;
            vec.push_back(5);
            vec.push_back(3);
            vec.push_back(1);
            vec.push_back(6);
            vec.push_back(4);
            vec.push_back(7);
            vec.push_back(2);

            std::cout << "정렬 전 ----" << std::endl;
            print(vec.begin(), vec.end());
            std::sort(vec.begin(), vec.end());

            std::cout << "정렬 후 ----" << std::endl;
            print(vec.begin(), vec.end());
        }

CODE 25 -> 시작 위치와 마지막 위치 바로 뒤를 반복자로 받음.
    -> sort에 들어가는 반복자의 경우반드시 임의접근 반복자(RandomAccessIterator) 타입을 만족해야 하므로
        우리가 봐왔던 컨테이너들 중에선 벡터와 데크만 가능하고 나머지 컨테이너는 sort함수를 적용 X -> 예를 들어 리스트는 양방향 반복자(BidirectionalIterator)이기에 불가능
    -> 만약 오름차순을 내림차순으로 바꾸고 싶다면? -> 직접 만든 타입이라면 operator< 를 오버로딩하여 반대로 바꾸면되지만 int이기에 불가능
    -> 3번째 인자인 특정한 조건을 전달하여 비교 수행
        struct int_compare {
        bool operator()(const int& a, const int& b) const { return a > b; }
        };

         std::sort(vec.begin(), vec.end(), int_compare());
        -> 구조체 정의 후에 operator() 함수를 만들어주면됨
    -> functional 해더에 다음과 같은 템플릿 클래스가 존재
        -> std::sort(vec.begin(), vec.end(), greater<int>());
        -> greater에 타입을 넣게 되면 함수 객체를 자동으로 만들어줌 -> 그리고 > 연산자 이용


    2. stable_sort : 정렬을 하되 원소들 간의 순서를 보존, [a, b] 순으로 있는데, a, b가 크기가 같다면 정렬을 [a,b], [b,a]로 가능
        sort의 경우 순서가 랜덤으로 정해짐, stable_sort의 경우 순서를 반드시 보장

        ex1)
        #include <algorithm>
        #include <functional>
        #include <iostream>
        #include <string>
        #include <vector>

        template <typename Iter>
        void print(Iter begin, Iter end) {
            while (begin != end) {
                std::cout << "[" << *begin << "] ";
                begin++;
            }
            std::cout << std::endl;
        }
        struct User {
            std::string name;
            int age;

            User(std::string name, int age) : name(name), age(age) {}

            bool operator<(const User& u) const { return age < u.age; }
        };

        std::ostream& operator<<(std::ostream& o, const User& u) {
            o << u.name << " , " << u.age;
            return o;
        }

        int main() {
            std::vector<User> vec;
            for (int i = 0; i < 100; i++) {
                std::string name = "";
                name.push_back('a' + i / 26);
                name.push_back('a' + i % 26);
                vec.push_back(User(name, static_cast<int>(rand() % 10)));
            }

            std::vector<User> vec2 = vec;

            std::cout << "정렬 전 ----" << std::endl;
            print(vec.begin(), vec.end());

            std::sort(vec.begin(), vec.end());

            std::cout << "정렬 후 ----" << std::endl;
            print(vec.begin(), vec.end());

            std::cout << "stable_sort 의 경우 ---" << std::endl;
            std::stable_sort(vec2.begin(), vec2.end());
            print(vec2.begin(), vec2.end());
        }

CODE 15 ~ 22 -> User 클래스가 가진 name, age 멤버이고 크기비교 operator<는 이름과 관계없이 모두 age로 하게 됨. age가 같다면 크기가 같다고 불 수 있다.

CODE 31 ~ 36 -> 벡터에 원소들을 삽입하는 부분 -> aa, ab, ac ... 순으로 하되 age의 경우 0부터 10 사이의 랜덤한 값 부여
    -> 원소간의 순서를 보전함 -> age 라면 반드시 삽입된 순서, 즉 name순으로 나오게됨

sort 를 이용하게 되면 dh, ck, cx, ad, cw, cu, co
stable_sort 를 이용하게 되면 ad, ck, co, cu, cw, cx, dh -> 삽입 순서를 지키고 age에 따른 정렬을 시킴

    3. partial_sort : 배열의 일부분만 정렬

        ex1)
        #include <algorithm>
        #include <iostream>
        #include <vector>

        template <typename Iter>
        void print(Iter begin, Iter end) {
            while (begin != end) {
                std::cout << *begin << " ";
                begin++;
            }
            std::cout << std::endl;
        }
        int main() {
            std::vector<int> vec;
            vec.push_back(5);
            vec.push_back(3);
            vec.push_back(1);
            vec.push_back(6);
            vec.push_back(4);
            vec.push_back(7);
            vec.push_back(2);

            std::cout << "정렬 전 ----" << std::endl;
            print(vec.begin(), vec.end());
            std::partial_sort(vec.begin(), vec.begin() + 3, vec.end());

            std::cout << "정렬 후 ----" << std::endl;
            print(vec.begin(), vec.end());
        }

CODE 25 -> std::partial_sort(start, middle, end) -> start, end 전체 원소들 중에 start, middle 부분까지 전체 원소들 중 제일 작은 애들만 순으로 정렬
    -> vec.begin() ~ vec.end() 원소들 중 , vec.begin() ~ vec.begin() + 3 까지에 전체에서 가장 작은 애들 순서대로 저장 

    -> 5 3 1 6 4 7 2 -> 1 2 3 6 5 7 4 - 1 2 3 만 정렬 됨.
-> 즉, 전체 배열을 정렬할 필요가 없을 경우, 100명의 학생 중에서 상위 10명의 학생의 성적순으로 보고 싶다.
-> sort로 정렬할 필요없이 partial_sort로 10개만 정렬 하는 것이 더 빠르게 됨.

* 원소 제거 (remove, remove_if)

    ex1)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
        while (begin != end) {
            std::cout << "[" << *begin << "] ";
            begin++;
        }
        std::cout << std::endl;
    }
    int main() {
        std::vector<int> vec;
        vec.push_back(5);
        vec.push_back(3);
        vec.push_back(1);
        vec.push_back(2);
        vec.push_back(3);
        vec.push_back(4);

        std::cout << "처음 vec 상태 ------" << std::endl;
        print(vec.begin(), vec.end());

        std::cout << "벡터에서 값이 3 인 원소 제거 ---" << std::endl;
        vec.erase(std::remove(vec.begin(), vec.end(), 3), vec.end());
        print(vec.begin(), vec.end());
    }

#erase 함수는 기본적인 두 가지 형태
    1. Iterator erase(Iterator pos);
    -> 가장 흔한 방법, pos가 가리키는 원소를 벡터에서 지움

    2. Iterator erase(Iterator first, Iterator last);
    -> first ~ last 사이에 있는 모든 원소들을 지우는 형태 

하지만 어떤 편리한 함수가 있어서 값이 3인 원소들을 벡터에서 연속적으로 존재할 수 있게 해주면 어떨까?

CODE 28 -> 3인 원소를 만나면 그 뒤에 있는 원소들을 쉬프트한다. 따라서 해당 위치에서 3이 제외된 원소들이 한쪽으로 채워지면
    그 위치부터 마지막까지 제거한다.
    실제로 remove 함수는 원소의 이동을 수행만함 삭제X -> 삭제는 erase 가 함

#remove -> ForwardIterator 반복자 타입 (벡터, 리스트, 맵 모두 사용 가능)

CODE 28 -> 
    struct is_odd {
    bool operator()(const int& i) { return i % 2 == 1; }
    }; 
    vec.erase(std::remove_if(vec.begin(), vec.end(), is_odd()), vec.end());
    로 사용한다면,

    -> 홀수 숫자 삭제하는 코드 인데
        -> 값이 정해진 게 아닌 특정한 조건을 만족하는 원소들을 제거 -> remove_if 사용

#remove_if

    ex1)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
        while (begin != end) {
            std::cout << "[" << *begin << "] ";
            begin++;
        }
        std::cout << std::endl;
    }
    struct is_odd {
        int* num_delete;

        is_odd(int* num_delete) : num_delete(num_delete) {}

        bool operator()(const int& i) {
            if (*num_delete >= 2) return false;

            if (i % 2 == 1) {
            (*num_delete)++;
            return true;
            }

            return false;
        }
    };
    int main() {
        std::vector<int> vec;
        vec.push_back(5);
        vec.push_back(3);
        vec.push_back(1);
        vec.push_back(2);
        vec.push_back(3);
        vec.push_back(4);

        std::cout << "처음 vec 상태 ------" << std::endl;
        print(vec.begin(), vec.end());

        std::cout << "벡터에서 홀수인 원소 앞의 2개 제거 ---" << std::endl;
        int num_delete = 0;
        vec.erase(std::remove_if(vec.begin(), vec.end(), is_odd(&num_delete)), vec.end());
        print(vec.begin(), vec.end());
    }

CODE 15 ~ 30 -> 홀수 원소 삭제를 할 수 있는 함수 구조체 인데.
    24 -> 함수 객체 안에 인스턴스 변수 (num_delete) 를 넣는 것은 원식상 불가능
        -> 그 이유는 해당 함수 객체가 여러번 복수 될 수 있기 때문
    44 -> num_delete를 밖으로 빼서 주소값이 변하지 않으므로 문제 되지않음
        -> 하지만 STL 을 사용할 때마다 외부에 클래스나 함수를 하나 씩 만들어야함.


* 람다 함수 (lambda function)
    -> 람다 함수를 통해 쉽게 이름이 없는 함수 객체를 만들 수 없게 됨. -> 익명의 함수 객체

    ex1)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
    while (begin != end) {
        std::cout << "[" << *begin << "] ";
        begin++;
    }
    std::cout << std::endl;
    }
    int main() {
    std::vector<int> vec;
    vec.push_back(5);
    vec.push_back(3);
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);

    std::cout << "처음 vec 상태 ------" << std::endl;
    print(vec.begin(), vec.end());

    std::cout << "벡터에서 홀수인 원소 제거 ---" << std::endl;
    vec.erase(std::remove_if(vec.begin(), vec.end(), [](int i) -> bool { return i % 2 == 1; }),vec.end());
    print(vec.begin(), vec.end());
    }

CODE 28 -> 람다 함수의 정의 부분 [](int i) -> bool { return i % 2 == 1; }
    -> 일반적인 꼴 ----->>>>>> [capture list] (받는 인자) -> 리턴 타입 { 함수 본체 }
        -> capture_list 는 람다 함수 외부에 몇 개를 지웠는지 변수를 정의한 뒤에 사용해야만 하는데, 그 변수에 접근할 수 없음 -> 이를 해결할 수 있는 방법 캡쳐목록 (capture_list)
        -> 인자 int i 로 받고, bool 리턴하는 함수를 정의 -> 리턴 타입을 생략한다면 컴파일러가 알아서 함수 본체에서 retrun 문을 보고 리턴 타입을 추측
    -> 리턴 타입 생략 ------>>>>> [capture list] ( 받는 인자) {함수 본체}
    -> 결국 bool 타입을 리턴하는 함수로 알 수 있다.

    -> 이름 없는 함수를 만들고 [](int i) { return i % 2 == 1; }(3);  // true
        -> (3) 처럼 바로 이 함수를 사용할 수 있다.
    -> 또는 이름 있는 함수 auto func = [](int i) { return i % 2 == 1; }; func(4);
        -> 객체를 생성한 후에 호출 할 수도 있다. 

    -> 두 개의 원소를 지우고 싶을 때
        std::cout << "벡터에서 홀수인 원소 최대 2 개 제거 ---" << std::endl;
        int num_erased = 0;
        vec.erase(std::remove_if(vec.begin(), vec.end(),
                                [](int i) {
                                if (num_erased >= 2)
                                    return false;
                                else if (i % 2 == 1) {
                                    num_erased++;
                                    return true;
                                }
                                return false;
                                }),
                vec.end());
        print(vec.begin(), vec.end());

        처럼 사용할 수 있다.



    ex2) capture_list 사용한 활용 코드
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
        while (begin != end) {
            std::cout << "[" << *begin << "] ";
            begin++;
        }
        std::cout << std::endl;
    }
    int main() {
        std::vector<int> vec;
        vec.push_back(5);
        vec.push_back(3);
        vec.push_back(1);
        vec.push_back(2);
        vec.push_back(3);
        vec.push_back(4);

        std::cout << "처음 vec 상태 ------" << std::endl;
        print(vec.begin(), vec.end());

        std::cout << "벡터에서 홀수인 원소 ---" << std::endl;
        int num_erased = 0;
        vec.erase(std::remove_if(vec.begin(), vec.end(),
                            [&num_erased](int i) {
                                if (num_erased >= 2)
                                return false;
                                else if (i % 2 == 1) {
                                num_erased++;
                                return true;
                                }
                                return false;
                            }),
                    vec.end());
        print(vec.begin(), vec.end());
    }

CODE 30 ~ 38 -> 캡쳐 목록에 어떤 변수를 사용할지 넣어주면된다. num_erased를 캡쳐하여 같은 스코프 처럼 사용 가능
    -> 이때 num_erased 앞에 &가 붙었는데 실제 num_erased 의 레퍼런스를 캡쳐한다는 의미.
    -> 함수 내부에서 num_erased 수정 가능
    -> 만약 &가 붙지않았다면 const 형태로 복사본을 가져온다.
    -> 일반 변수 형태

    -> 만약 클래스 내부에서 멤버 변수로 되어 있다면 this로 가져오면 된다. 
        num_erased = 0;

        vec.erase(std::remove_if(vec.begin(), vec.end(),
                                [this](int i) {
                                if (this->num_erased >= 2)
                                    return false;
                                else if (i % 2 == 1) {
                                    this->num_erased++;
                                    ...
                                    ..
                                    .

#캡쳐리스트 사용 방법
    1. [] : 아무것도 캡쳐 안함
    2. [&a, b] : a 는 레퍼런스로 캡쳐하고 b 는 (변경 불가능한) 복사본으로 캡쳐
    3. [&] : 외부의 모든 변수들을 레퍼런스로 캡쳐
    4. [=] : 외부의 모든 변수들을 복사본으로 캡쳐

* 원소 수정하기 (transform)
    -> 컨테이너 전체, 일부를 순회하면서 값들을 수정하는 작업
    -> 이를 transform으로 도울 수 있다.

    -> 함수 꼴
    transform (시작 반복자, 끝 반복자, 결과를 저장할 컨테이너의 시작 반복자, Pred)


    ex1)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
        while (begin != end) {
            std::cout << "[" << *begin << "] ";
            begin++;
        }
        std::cout << std::endl;
    }

    int main() {
        std::vector<int> vec;
        vec.push_back(5);
        vec.push_back(3);
        vec.push_back(1);
        vec.push_back(2);
        vec.push_back(3);
        vec.push_back(4);

        std::cout << "처음 vec 상태 ------" << std::endl;
        print(vec.begin(), vec.end());

        std::cout << "벡터 전체에 1 을 더한다" << std::endl;
        std::transform(vec.begin(), vec.end(), vec.begin(),[](int i) { return i + 1; });
        print(vec.begin(), vec.end());
    }

CODE 29 -> vec의 시작(begin) ~ 끝(end) 각 원소에 [](int i) { return i + 1; } 의 함수를 적용시킨 결과 vec.begin부터 저장
    -> 주의 할 점 - 값을 저장하는 컨테이너의 크기가 원래의 컨테이너보다 최소한 같거나 커야함.


    -> vec 의 처음 부터 끝 까지 읽으면서 1 씩 더한 결과를 vec2 에 저장
      // vec2 에는 6 개의 0 으로 초기화 한다.
        std::vector<int> vec2(6, 0);

        std::cout << "처음 vec 과 vec2 상태 ------" << std::endl;
        print(vec.begin(), vec.end());
        print(vec2.begin(), vec2.end());

        std::cout << "vec 전체에 1 을 더한 것을 vec2 에 저장 -- " << std::endl;
        std::transform(vec.begin(), vec.end(), vec2.begin(),
                        [](int i) { return i + 1; });
        print(vec.begin(), vec.end());
        print(vec2.begin(), vec2.end());


* 원소를 탐색하는 함수 (find, 'find_if, any_of, all_of')

    ex1)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
    while (begin != end) {
        std::cout << "[" << *begin << "] ";
        begin++;
    }
    std::cout << std::endl;
    }

    int main() {
    std::vector<int> vec;
    vec.push_back(5);
    vec.push_back(3);
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);

    auto current = vec.begin();
    while (true) {
        current = std::find(current, vec.end(), 3);
        if (current == vec.end()) break;
        std::cout << "3 은 " << std::distance(vec.begin(), current) + 1
                << " 번째 원소" << std::endl;
        current++;
    }
    }

CODE 26 ~ 32 -> find를 통해서 모든 3을 찾기 위한 코드이다.
    -> 만약 while 이 없었다면 3 하나만을 찾고 종료된다.
    -> forward_iterator 면 앞에서 부터 찾고, reverse_iterator 이면 뒤에서 부터 거꾸로 찾게 됨


    ex2)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
        while (begin != end) {
            std::cout << "[" << *begin << "] ";
            begin++;
        }
        std::cout << std::endl;
    }

    int main() {
        std::vector<int> vec;
        vec.push_back(5);
        vec.push_back(3);
        vec.push_back(1);
        vec.push_back(2);
        vec.push_back(3);
        vec.push_back(4);

        auto current = vec.begin();
        while (true) {
            current = std::find_if(current, vec.end(), [](int i) { return i % 3 == 2; });
            if (current == vec.end()) break;
            std::cout << "3 으로 나눈 나머지가 2 인 원소는 : " << *current << " 이다 "
                    << std::endl;
            current++;
    }
    }

CODE 27 -> find_if를 사용하여 함수 객체를 인자로 받아 그 결과가 참인 원소를 찾게 됨

    ex3)
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <string>
    #include <vector>

    template <typename Iter>
    void print(Iter begin, Iter end) {
    while (begin != end) {
        std::cout << "[" << *begin << "] ";
        begin++;
    }
    std::cout << std::endl;
    }

    struct User {
    std::string name;
    int level;

    User(std::string name, int level) : name(name), level(level) {}
    bool operator==(const User& user) const {
        if (name == user.name && level == user.level) return true;
        return false;
    }
    };

    class Party {
    std::vector<User> users;

    public:
    bool add_user(std::string name, int level) {
        User new_user(name, level);
        if (std::find(users.begin(), users.end(), new_user) != users.end()) {
        return false;
        }
        users.push_back(new_user);
        return true;
    }

    // 파티원 모두가 15 레벨 이상이여야지 던전 입장 가능
    bool can_join_dungeon() {
        return std::all_of(users.begin(), users.end(),
                        [](User& user) { return user.level >= 15; });
    }

    // 파티원 중 한명 이라도 19렙 이상이면 특별 아이템 사용 가능
    bool can_use_special_item() {
        return std::any_of(users.begin(), users.end(),
                        [](User& user) { return user.level >= 19; });
    }
    };
    int main() {
        Party party;
        party.add_user("철수", 15);
        party.add_user("영희", 18);
        party.add_user("민수", 12);
        party.add_user("수빈", 19);

        std::cout << std::boolalpha;
        std::cout << "던전 입장 가능 ? " << party.can_join_dungeon() << std::endl;
        std::cout << "특별 아이템 사용 가능 ? " << party.can_use_special_item()
                    << std::endl;
    }

any_of -> 인자로 받은 범위안의 모든 원소들 중에서 조건을 하나라도 충족하면 true -> OR
all_of -> 모든 원소들이 전부 조건을 충족해야 true 를 리턴 -> AND

CODE 31 ~ 38 -> 유저 정보를 담고 있는 user, user파티를 이룰 때 만들어지는 party
    -> add_user 함수를 사용하면 파티원 추가 가능
        -> 중복 주의!

CODE 47 ~ 50 -> 파티원중 한명이라도 19이상이 라면 true

* C++ 문자열의 모든 것 (string, string_view)
    -> 표준 문자 라이브러리 <string>

* basic_string
    -> std::string basic_string 이라는 클래스 템플릿의 인스턴스화 버전

    -정의-
    template <class CharT, class Traits = std::char_traits<CharT>,
          class Allocator = std::allocator<CharT> >
    class basic_string;

    -> CharT 타입의 객체들을 메모리에 연속적으로 저장하고, 여러가지 문자열 연산들을 지원해주는 클래스
    -> 만약 CharT 자리에 char이 오게 된다면, std::string 이 됨.
    -> 5가지 종류의 인스턴스화 된 문자열
            타입        /        정의
        1. std::string -> std::basic_string<char>
        2. std::wstring -> std::basic_string<wchar_t> - wchar_t 의 크기는 시스템 마다 다름. 윈도우에서는 2 바이트이고, 유닉스 시스템에서는 4 바이트
        3. std::u8string -> std::basic_string<char8_t> - (c++20에 추가) char8_t 는 1 바이트; UTF-8 문자열을 보관할 수 있음
        4. std::u16string -> std::basic_string<char16_t> - char16_t 는 2 바이트; UTF-16 문자열을 보관할 수 있음
        5. std::u32string -> std::basic_string<char32_t> - char32_t 는 4 바이트; UTF-32 문자열을 보관할 수 있음

    -> 다시 템플릿 인자를 살펴보면, Traits는 주어진 CharT 문자들에 대해 기본적인 문자열 연산들을 정의
    -> 즉, basic_string에 문자열들을 보관하고, Traits 에서 문자열들을 어떻게 연산하는지

#숫자들의 순위가 알파벳 보다 낮은 문자열 -> 1a < a1

    ex1)
    #include <cctype>
    #include <iostream>
    #include <string>

    // char_traits 의 모든 함수들은 static 함수 입니다.
    struct my_char_traits : public std::char_traits<char> {
    static int get_real_rank(char c) {
        // 숫자면 순위를 엄청 떨어트린다.
        if (isdigit(c)) {
        return c + 256;
        }
        return c;
    }

    static bool lt(char c1, char c2) {
        return get_real_rank(c1) < get_real_rank(c2);
    }

    static int compare(const char* s1, const char* s2, size_t n) {
        while (n-- != 0) {
        if (get_real_rank(*s1) < get_real_rank(*s2)) {
            return -1;
        }
        if (get_real_rank(*s1) > get_real_rank(*s2)) {
            return 1;
        }
        ++s1;
        ++s2;
        }
        return 0;
    }
    };

    int main() {
    std::basic_string<char, my_char_traits> my_s1 = "1a";
    std::basic_string<char, my_char_traits> my_s2 = "a1";

    std::cout << "숫자의 우선순위가 더 낮은 문자열 : " << std::boolalpha
                << (my_s1 < my_s2) << std::endl;

    std::string s1 = "1a";
    std::string s2 = "a1";

    std::cout << "일반 문자열 : " << std::boolalpha << (s1 < s2) << std::endl;
    }

CODE 6 -> basic_string의 Traits 에는 char_traits 에서 제공하는 모든 멤버 함수들이 구현된 클래스에 전달 되어야 함.
    -> char_traits 를 상속 받을 필요는 없음 -> 새로 구현하면 됨.
    -> char_traits 에 정의되는 함수들은 모두 static 함수
        -> 그 이유는 문자열들 간에 간단한 연산을 제공해주는 클래스(Traits) 데이터 저장 필요 X 이를 -> Stateless 라 함
    -> char 들을 다루는 char_traits<char> 에서 바꿔줘야 할 부분은 대소 비교하는 부분
        -> 즉 compare를 새로 정의

CODE 15 ~ 32 -> get_real_rank 함수는 문자를 받아서 256 을 더해 순위를 떨어뜨림. (숫자들이 앞으로 옴)


* 짧은 문자열 최적화 (SSO)
    -> 짧은 길이 문자열의 경우 따로 문자 데이터를 위한 메모리를 할당 하는 대신에 그냥 객체 자체 저장
        -> 이를 짧은 문자열 최적화 라 함

    ex1)
    #include <iostream>
    #include <string>

    // 이와 같이 new 를 전역 함수로 정의하면 모든 new 연산자를 오버로딩 해버린다.
    // (어떤 클래스의 멤버 함수로 정의하면 해당 클래스의 new 만 오버로딩됨)
    void* operator new(std::size_t count) {
        std::cout << count << " bytes 할당 " << std::endl;
        return malloc(count);
    }

    int main() {
        std::cout << "s1 생성 --- " << std::endl;
        std::string s1 = "this is a pretty long sentence!!!";
        std::cout << "s1 크기 : " << sizeof(s1) << std::endl;

        std::cout << "s2 생성 --- " << std::endl;
        std::string s2 = "short sentence";
        std::cout << "s2 크기 : " << sizeof(s2) << std::endl;
    }

CODE 6 ~ 9 -> 메모리 할당 확인을 위해서 new로 연산자 정의
    -> 모든 연산자들이 new 로 사용됨.
    -> 길이가 긴 문자열 s1을 생성할 때 메모리 할당이 발생
    -> 길이가 짧은 문자열 s2의 경우 메모리 할당이 발생하지 않음!

* 문자열 리터럴 정의
    -> auto str = "hello"s; -> ""뒤에 s를 붙여주면 auto가 string으로 추론

    -정의-
    std::string operator"" s(const char *str, std::size_t len);
    -> "hello"s -> operator""s("hello", 5); 로 변경
    -> 리터럴 연산자를 사용하기 위해서는 string_literals 네임 스페이스를 사용함

# 리터럴 정의하는 여러가지 방법
    1. std::string str = "hello";     // char[] -> 그냥 "hello" 했다면 char 배열 생성
    2. std::wstring wstr = L"hello";  // wchar_t[] -> wchar_t 배열 을 만들고 싶다면 앞에 L
    3. R"()" 안에 오는 문자들은 모두 문자 그대로 char 배열 안에 들어가게 됨
        - 개행 문자 포함
        괄호를 사용하기 위해서 
        -> "foo( &@!*& )foo"; -> R"/* delimiter */( /* 문자열 */ )/* delimiter */"


* C++에서 한글 다루기
    -> 문자들을 바이트 값을 줄이기위해서 인코딩 등장 -> 문자를 표현하기 위해 4바이트를 사용하는 대신에 어떤 문자는 1, 어떤 문자는 2 바이트 등등 길이로 저장
    -> UTF-8 : 문자를 최소 1 부터 최대 4 바이트로 표현한다. (즉 문자마다 길이가 다르다!)
    -> UTF-16 : 문자를 2 혹은 4 바이트로 표현한다.
    -> UTF-32 : 문자를 4 바이트로 표현한다.

    ex1) UTF-32 -> 4바이트
    #include <iostream>
    #include <string>

    int main() {
    //                         1234567890 123 4 567
    std::u32string u32_str = U"이건 UTF-32 문자열 입니다";
    std::cout << u32_str.size() << std::endl;
    }
-> 17 출력 ( 4 바이트로 나타내기 때문에 문자열의 원소 개수와 실제 문자열의 크기가 일치)

CODE 6 -> u32string은 UTF-32 인코딩 된 문자열을 보관 하는 타입, ""앞에 붙은 U는 해당 문자열 리터럴이 UTF-32로 인코딩 하라는 뜻
    ->  std::string str = u8"이건 UTF-8 문자열 입니다"; 로 한다면 -> 32


* string_view
    -> 문자열을 전달 할 때 읽기만 필요로 한다면?
        1. const std::string&

            ex1)
            #include <iostream>
            #include <string>

            void* operator new(std::size_t count) {
            std::cout << count << " bytes 할당 " << std::endl;
            return malloc(count);
            }

            // 문자열에 "very" 라는 단어가 있으면 true 를 리턴함
            bool contains_very(const std::string& str) {
            return str.find("very") != std::string::npos;
            }

            int main() {
            // 암묵적으로 std::string 객체가 불필요하게 생성된다.
            std::cout << std::boolalpha << contains_very("c++ string is very easy to use")
                        << std::endl;

            std::cout << contains_very("c++ string is not easy to use") << std::endl;
            }
        -> 불 필요한 메모리가 할당됨.


        2. const char*
            -> 문제점
            1. string에 함수에 직접 전달 불가 , c_str 함수를 통해 string에서 주소값을 뽑아내야함.
            2. 변환하다가 길이에 대한 정보를 잃어버리게 됨.

    ex1)
    #include <iostream>
    #include <string>

    void* operator new(std::size_t count) {
    std::cout << count << " bytes 할당 " << std::endl;
    return malloc(count);
    }

    // 문자열에 "very" 라는 단어가 있으면 true 를 리턴함
    bool contains_very(std::string_view str) {
    return str.find("very") != std::string_view::npos;
    }

    int main() {
        // string_view 생성 시에는 메모리 할당이 필요 없다.
        std::cout << std::boolalpha << contains_very("c++ string is very easy to use")
                    << std::endl;

        std::cout << contains_very("c++ string is not easy to use") << std::endl;

        std::string str = "some long long long long long string";
        std::cout << "--------------------" << std::endl;
        std::cout << contains_very(str) << std::endl;
    }

    -> 문자열을 참조하여 읽기만 하기 때문에 메모리 할당 X
    -> std::string_view 은 문자열을 소유하고 있지 않기 때문에 현재 읽고 있는 문자열이 소멸되지 않은 상태인지 주의!

    ex2) -> substr -> O(1)
    #include <iostream>
    #include <string>

    void* operator new(std::size_t count) {
        std::cout << count << " bytes 할당 " << std::endl;
        return malloc(count);
    }

    int main() {
        std::cout << "string -----" << std::endl;
        std::string s = "sometimes string is very slow";
        std::cout << "--------------------" << std::endl;
        std::cout << s.substr(0, 20) << std::endl << std::endl;

        std::cout << "string_view -----" << std::endl;
        std::string_view sv = s;
        std::cout << "--------------------" << std::endl;
        std::cout << sv.substr(0, 20) << std::endl;
    }

    -> string에서 substr은 문자열을 새로 생성했지만, 여기서 string_view에서는 substr 시 메모리 할당 X
    
    -> 대신 s가 소멸되면 사용할 수 없음.
            #include <iostream>
            #include <string>

            std::string_view return_sv() {
            std::string s = "this is a string";
            std::string_view sv = s;

            return sv;
            }

            int main() {
            std::string_view sv = return_sv();  // <- sv 가 가리키는 s 는 이미 소멸됨!

            // Undefined behavior!!!!
            std::cout << sv << std::endl;
            }

        -> 컴파일이 되어도 - a string 이렇게 출력됨
        -> s의 string_view 이지만 함수가 리턴하면서 지역 객체 s가 소멸하였기에 sv는 소멸된 문자열을 가리킴.!
