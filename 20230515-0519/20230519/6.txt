#6 연산자 오버로딩(overloading) -> 기본 연산자들을 직접 사용자가 정의하는 연산자
방법 -> (리턴 타입) operator(연산자) (연산자가 받는 인자) -- 
-> 이 방법 외에는 함수 이름으로 연산자를 절대 넣을 수 없다.

- ==를 오버로딩 하고 싶다면 == 연산자는 그 결과값이 언제나 bool이고, 인자로는 ==로 비교하는 것 하나만 받게 됨.
다음과 같이 정의 -> bool operator==(MyString& str);
-> str1 == str2 라는 명령을 한다면 -> str1.operator == (str2) 로 변횐되어 처리

#6. ex - 1
    int MyString::compare(MyString& str) {
    // (*this) - (str) 을 수행해서 그 1, 0, -1 로 그 결과를 리턴한다
    // 1 은 (*this)가 사전식으로 더 뒤에 온다는 의미. 0 은 두 문자열이 같다는 의미
    // -1 은 (*this)가 사전식으러 더 앞에 온다는 의미이다.

    for (int i = 0; i < std::min(string_length, str.string_length); i++) {
        if (string_content[i] > str.string_content[i])
        return 1;

        else if (string_content[i] < str.string_content[i])
        return -1;
    }


    if (string_length == str.string_length) return 0;

    else if (string_length > str.string_length)
        return 1;

    return -1;
    }

    bool MyString::operator==(MyString& str) {
    return !compare(str);  // str 과 같으면 compare 에서 0 을 리턴
    }

    int main(){
        if (str1 == str2){ ... }
    }

-> !compare(str) 을 리턴하는 이유는 compare 함수에서 str과 *this 가 같으면 0으로 리턴

* friend 키워드 -> 다른 클래스나 함수들을 friend로 정의하여 private로 정의된 변수나 함수들에 접근할 수 있다.

    class A {
    private:
    int x;

    friend class B;
    };

    class B {
    private:
    int y;
    };
-> B는 A의 모든 private를 접근 할 수 있다.
-> A는 B의 private에 접근할 수 없다. -> class B에서 A를 friend로 지정하지 않았기 때문.

* 이항 연산자 -> 피연산자를 두 개를 취하는 연산자들, + - * / -> = 등

- 어떤 임의의 연산자 @에 대해 -> a @ b 라고 한다면,
1. *a.operator@(b); -> operator@ 는 a의 클래스 멤버 함수로써 사용
2. *operator@(a, b); -> operator@ 는 클래스 외부에 정의되어 있는 일반적인 함수를 의미

이를 위해 함수를 정의
    Complex operator+(const Complex& a, const Complex& b) {
    // ...
    }
-> const Complex& 타입의 인자 a,b 를 받게 됨 -> 컴파일러는 정확히 일치하지 않는 경우 가장 가까운 가능한 오버로딩 되는 함수를 찾음
-> Complex(const char *) 생성되어있다고 가정한다면
    1. "-1.1 + i3.923" + a; 방식은 허용 -> operator+(Complex("-1.1 + i3.923"), a);
    2. Complex operator+(const Complex& a, const Complex& b) 가 작동되기 위해서는 함수 a와 b의 멤버 변수에 접근해야하는데 private로 제한되어있으면 Complex의 friend로 지정
        -> friend Complex operator+(const Complex& a, const Complex& b);

문제점
1. Complex a(0, 0);, a = "-1.1 + i3.923" + a; -> 실행이 잘 되었지만
    -> a = a + a; 으로 실행한다면? -> 두가지 형식으로 컴파일러가 해석
        1. a.operator+(a);
        2. operator+(a, a);

        -> 두 가지 형태 모두 가능하기 때문에 모호한 상황 발생 -> error
    
-> 이를 해결하기 위해 두 함수 중 하나를 없애야함. 
    -> """자기 자신을 리턴하지 않는 이항 연산자들, +,-,*,/ 들은 모두 외부 함수로 선언하는 것이 원칙."""
    -> 반대로 자기 자신을 리턴하는 이항 연산자들 +=, -= -> """모두 멤버 함수로 선언하는 것이 원칙"""

-> 1. 함수 자체 삭제

* 입출력 연산자 오버로딩
- std::cout << a; -> std::cout.operator<<(a) 동일한 명령어
    -> 어떤 std::cout 이라는 객체에 멤버 함수 operator<<가 정의되어 있어서 a를 호출하게 되는 것

Complex c;
std::cout << c;
- 처럼 정의할 수 있다면? -> c.println(); 효과
    1. operator<< 를 보면 iostream의 헤더파일을 보면 실제로 ostream 클래스에 정의되어 있음 
    2. operator<< 멤버 함수를 새롭게 추가하는 것은 불가능 -> 1. 처럼 정의 되어 있음
    3. 하지만 ostream 클래스 객체와 Complex 객체 두 개를 인자로 받는 전역 operator<< 함수를 정의하면 -> 가능
        3.1 operator<< 에서 Complex의 private 멤버 변수가 있다면 접근 불가능.
            -> 방법
            3.1.1 private -> public 으로 변경 -> 권장하지 않음
            3.1.2 Complex에 print(std::ostream& os) 와 같은 멤버 함수를 추가한 뒤, 이를 operator<< 호출
            3.1.3 operator<< 를 friend 지정 
        3.2 3.1.3 방법을 사용하여 선언


* 첨자 연산자 (operator[]) -> 배열에서 원소를 지정할 때 사용되는 첨자 연산자
    #include <iostream>
    #include <cstring>

    class MyString {
    char* string_content;  // 문자열 데이터를 가리키는 포인터
    int string_length;     // 문자열 길이

    int memory_capacity;  // 현재 할당된 용량

    public:
    // 문자 하나로 생성
    MyString(char c);

    // 문자열로 부터 생성
    MyString(const char* str);

    // 복사 생성자
    MyString(const MyString& str);

    ~MyString();

    int length();

    void print() const;
    void println() const;

    char& operator[](const int index);
    };

    MyString::MyString(char c) {
    string_content = new char[1];
    string_content[0] = c;
    memory_capacity = 1;
    string_length = 1;
    }
    MyString::MyString(const char* str) {
    string_length = strlen(str);
    memory_capacity = string_length;
    string_content = new char[string_length];

    for (int i = 0; i != string_length; i++) string_content[i] = str[i];
    }
    MyString::MyString(const MyString& str) {
    string_length = str.string_length;
    string_content = new char[string_length];

    for (int i = 0; i != string_length; i++)
        string_content[i] = str.string_content[i];
    }
    MyString::~MyString() { delete[] string_content; }
    int MyString::length() { return string_length; }
    void MyString::print() const {
    for (int i = 0; i != string_length; i++) {
        std::cout << string_content[i];
    }
    }
    void MyString::println() const {
    for (int i = 0; i != string_length; i++) {
        std::cout << string_content[i];
    }
    std::cout << std::endl;
    }

    char& MyString::operator[](const int index) { return string_content[index]; }

    int main() {
    MyString str("abcdef");
    str[3] = 'c';

    str.println();
    }

CODE 27 -> index로 []안에 들어가는 값을 받게 됨.
char&를 인자로 리턴하는 이유는 -> str[10] = 'c'; 같은 명령어를 실행하기에 그 원소의 레퍼런스를 리턴하게 되는 것이기에.

CODE 64 -> operator[] 구현 -> index 번째의 string_content를 리턴해서 operator[] 를 사용하는 사용자가, 이의 레퍼런스를 가질 수 있게 됨.

* int Wrapper 클래스 - 타입 변환 연산자 -> 클래스는 무언가를 포장하는 의미, 이때 기본 자료형(int, float 등)들을 객체로써 다루어야 할 때
-> 클래스로 포장해서 각각의 자료형을 객체로 사용하는 것을 Wrapper

    //ex int 자료형을 감싸는 int Wrapper 클래스 Int
    class Int
    {
    int data;
    // some other data

    public:
    Int(int data) : data(data) {}
    Int(const Int& i) : data(i.data) {}

    operator int() { return data; }
    };

    int main() {
    Int x = 3;
    int a = x + 4;

    x = a * 2 + x + 4;
    std::cout << x << std::endl;
    }

CODE 3 -> int 형 자료형을 보관하는 data라는 변수 -> int 형 데이터를 저장하는 객체로 Int 클래스를 사용할 수 있음.

CODE 10 -> 생성자 리턴 타입 X -> 단순히 data를 리턴 -> 컴파일러 입장에서 적절한 변환 연산자로 operator int 를 찾아서 결국 int로 변환해서 처리하기 때문
-> 대입시에도 발생하지만 -> 디폴트 대입 연산자가 처리해줌.

* 전위/후위 증감 연산자 -> ++, -- 
- operator에서는 다음으로 구현하게 됨.
    1. operator++(int x);
    2. operator--(int x);
    -> x는 아무런 의미가 없음. 단순 전위 후위를 구별하기 위해 int 인자를 넣어주는 것 뿐

