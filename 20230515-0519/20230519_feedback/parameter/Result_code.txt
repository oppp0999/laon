CODE 14, 16 -> tas, param를 namespace 로 구성

CODE 19 -> enum은 열거형으로 자신만의 자료형을 만들 수 이는 사용자 정의 자료형이다.
    enum
    1. 서로 다른 enum은 멤버의 이름이 중복될 수 없다.
    2. enum 타입의 값들이 자동으로 정수로 변환되어 계산, 비교 및 출력된다.
    3. 특정 enum 멤버를 따로 선언 및 초기화 하지 않고 사용 할 수 있다.
    4. 기본적으로 enum 멤버는 int 타입을 가짐

    enum class
    1. enum class라는 특정 타입을 가진다. -> 서로 다른 enum class멤버의 이름이 중복될 수 있다.
    2. class 타입이 생겼기 때문에 멤버를 소속없이 이름만 가지고 사용할 수 없다.
    3. 형변환을 하지 않는 이상 서로 다른 enum class 끼리 비교할 수 없다. if(c == a) -> 불가능
    4. enum class 멤버의 타입을 정해줄 수 있다. (int 내에서)
        1. enum class eAnimal : int8_t // 1바이트(8bit) 타입 정수형
        2. enum class eAnimal2 : int16_t // 2바이트(16bit) 타입 정수형

        static_assert(sizeof(eAnimal::Tiger) == 1);
        static_assert(sizeof(eAnimal2::Lion) == 2);

    멤버 변수 NONE, INIT, CONNECT, READY, ANALYSIS, FAIL 정의

CODE 21 -> ChannelState 객체를 문자열로 변환하는 toString 함수를 선언 -> state객체를 문자열로 변환 해당 반환값은 std::string이다.
    TAS_EXPORTS는 환경 설정, 매크로 제공 기능으로 추측

CODE 23 -> LaneInfo 구조체 생성
CODE 25 -> std::set<LaneType> 형식의 types 라는 변수를 선언 -> std::set는 내부적으로 값을 정렬하여 유일한 값을 유지
CODE 26 ~ 36 -> 구조체 멤버 변수 값을 추가, 변경

CODE 37 -> std::map형식으로 키-쌍을 저장하는 컨테이너 -> others에 <std::string, std::string> 형식의 키와 값으로 이루어짐

CODE 39 ~ 50 -> Occupancy, Speed 등 타입으로 반환하는 함수
    const로 선언된 객체에서만 사용할 수 있다.
    -> 즉 객체의 멤버 변수를 읽기만 한다는 뜻

* 오버로딩 사용
CODE 54 -> operator<< 함수를 오버로딩하여 사용자 정의가 된 LaneInfo 객체를 출력하기 위함
    ex -> LaneInfo info; -> std::cout << info; -> LaneInfo가 가진 객체 변수를 출력
