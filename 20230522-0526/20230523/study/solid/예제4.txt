* ISP - 인터페이스 분리 원칙
-> 작업자 worker 인터페이스를 통해 작업자의 일반 적업과 관리 작업을 분리, 클리아이너트는 필요한 인터페이스만 의존

CODE 4 ~ 7 -> Worker 인터페이스에는 doWork 순수 가상 함수를 가지고있어 작업자의 일반 작업을 수행

CODE 10 ~ 15 -> GeneralWorker 클래스는 Worker 인터페이스를 상속받아 doWork 함수를 구현하여 일반 작업을 수행

CODE 18 ~ 21 -> Manager 인터페이스에는 manage 라는 순수 가상 함수를 가지고, 관리자의 작업 수행 기능

CODE 24 ~ 29 -> AdminManager 클래스는 Manager 인터페이스를 상속받아 manage 함수를 구현하여 작업 수행

CODE 31 ~ 46 -> Client 클래스는 Worker, Manager 객체를 멤버로 가지고 있어 인터페이스만 의존
    excuteTasks 함수는 worker 멤버 변수를 통해 작업자 객체에 접근 -> doWork 함수를 호출하여 작업 수행
        -> Client 클래스는 작업자 인터페이스에만 의존하고 실제로 작업자 객체에 대해선 중요하지 않음

    Client 클래스의 생성자에서 Worker 객체를 인자로 받아 worker 멤버 변수에 저장
        ->  Client 객체는 특정 작업자 객체에 의존하지 않고, 다양한 작업자 객체를 받아서 동일한 인터페이스를 통해 작업을 수행

CODE 48 ~ 57 -> GeneralWorker, AdminManager 객체를 생성하고, 이를 Client 객체의 생성자에 전달
    - executeTasks 함수가 호출되면 GeneralWorker의 doWork 함수가 실행되어 일반 작업이 수행
    - executeManagement 함수가 호출되면 AdminManager의 manage 함수가 실행



-----------
const 를 사용하지 못하는 이유?

1. const 한정자 : 멤버 함수가 호출된 객체를 수정하지 않음을 나타내는 한정자
    -> 하지만 인터페이스에서 선언된 가상 함수는 실제 구현되는 클래스에서 오버리이딩하여 구현되는 것이 일반적
    -> 오버라이딩된 가상 함수는 상속된 인터페이스에 대한 포인터나 참조를 호출
    -> const를 사용하면 오버라이딩된 함수가 인터페이스에서 선언된 것과 동일한 시그니처를 가져야 하므로 불가능

2. override 한정자 : 가상 함수가 베이스 클래스에서 선언된 함수를 오버라이딩하고 있음을 나타냄
    -> 컴파일러에게 오버라이딩된 함수가 정확하게 베이스 클래스의 가상 함수를 대체하고 있는지를 확인 할 수 있음
    -> 그러나 인터페이스에서 선언된 가상 함수는 구현부가 없기 때문에 오버라이딩 개념 적용 X

선언된 코드들에서 doWork, manage 함수는 Worker, Manager 인터페이스에서 선언된 가상 함수
-> GeneralWorker, AdminManager 클래스에서 오버라이딩되어 구현되고 있으며, 다향성 지원
-> 인터페이스에서 가상 함수에는 const override 사용 불가