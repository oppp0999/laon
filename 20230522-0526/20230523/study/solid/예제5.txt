* DIP - 의존성 역전 원칙
-> 고수준 모듈은 저수준 모듈에 의존해서는 안되며, 둘 모두 추상화에 의존해야 한다는 원칙

CODE 4 ~ 7 -> IWorker 인터페이스에서 doWork 메소드를 정의

CODE 10 ~ 15 -> Worker 클래스는 IWorker 인터페이스를 구현한다.

CODE 18 ~ 28 -> Client 클래스는 IWorker 인터페이스에 의존되도록 설계
    -> Worker가 아닌 IWorker에 의존하면서 DIP원칙을 준수
        -> 고수준 모듈인 Client 는 저수준 모듈인 Worker에 의존하지 않고 추상화된 인터페이스에 의존
    -> Client 클래스의 생성자는 IWorker* 타입의 매개변수 w를 받음
    -> worker 멤버 변수를 초기화하는데, 인자로 전달된 w를 사용
    ->> Client 객체는 생성될 때 어떤 구체적인 작업자 객체를 사용할지를 외부에서 결정 가능


-> DIP를 정의함으로써 Client 는 어떤 구체적인 작업자 클래스를 사용하더라도 동일한 인터페이스를 통해 작업 가능
