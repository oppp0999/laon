* OCP - 개방-폐쇄 원칙 예제
-> 도형을 나타내는데 추상 클래스를 활용하여 다양한 도형을 추가할 수 있는 예제

CODE 4 ~ 7 -> area라는 순수 가상 함수를 가지고 있다.
    - 각 도형의 면적을 반환하기 위해 파생 클래스로 구현

CODE 9 ~ 20 -> Rectangle는 shape 클래스를 상속받아 면적 계산을 구현
    - 면적을 계산하는 방식이 다르므로 다형성을 활용하여 area함수를 오버라이드

CODE 22 ~ 32 -> Circle는 shape 클래스를 상속받아 면적 계산을 구현

CODE 34 ~ 38 -> printAreas는 shape 포인터의 벡터를 인자로 받아, 각 도형의 면적을 출력
    - 도형을 한꺼번에 처리할 수 있도록
    - 개방-폐쇄 원칙을 준수

CODE 40 ~ 51 -> Rectangle, Circle 객체를 생성하고 shape 포인터 백터에 저장
    - printAreas를 호출하여 도형의 면적 출력

* 출력 결과
    Area :12
    Area :12.56

-> 기존 코드를 수정하지 않고도 새로운 기능을 추가할 수 있는 코드를 작성할 수 있다.




const std::vector<Shape*>& shapes는 printAreas 함수의 매개변수로 사용되는 인자

1. const: shapes 벡터 자체를 수정하지 않음을 나타냄
printAreas 함수가 shapes 벡터를 읽기만 하고 수정하지 않는다는 것을 의미

2. std::vector<Shape*>: Shape 포인터의 벡터를 나타냄 
Shape* 타입은 Shape 클래스에 대한 포인터를 가리키는 포인터 타입
-> shapes 벡터는 Shape 클래스의 객체를 가리키는 포인터들의 모음을 담고 있음

&: shapes 인자가 참조로 전달된다는 것을 나타냄
참조로 전달되면 함수 내에서 원래의 shapes 벡터를 직접 참조
-> 함수 내에서 shapes 벡터에 접근하여 각 도형의 면적을 계산하고 출력

요약하자면, const std::vector<Shape*>& shapes 인자는 Shape 포인터의 벡터를 참조로 전달받으며, 
          해당 벡터를 수정하지 않고 읽기만 하는 함수의 매개변수