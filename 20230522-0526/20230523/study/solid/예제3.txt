* LSP - 리스코프 치환 원칙
-> 동물과 새를 나타내는 클래스를 활용한 예제

CODE 3 ~ 9 -> Animal 는 makeSound 라는 가상 함수를 가지고 있음

CODE 11 ~ 20 -> Bird 클래스는 Animal을 상속받아 makeSound 함수를 오버라이드 하여 새의 소리를 출력

CODE 22 ~ 24 -> Animal 객체를 인자로 받아 해당 동물의 소리를 출력
    - 리스코프 치환 원칙을 준수하여 Animal의 파생 클래스인 Bird 객체도 인자로 받알 수 있음

CODE 26 ~ 34 -> Animal, Bird 객체를 생성한 뒤 performed 함수를 호출


-------------------------

virtual을 사용하지 않는다고 가정하면 LSP 를 준수하지 않은 코드이다.
-> 즉 서브 타입은 언제나 베이스타입으로 대체 될 수 있어야 한다.

1. Animal makeSound 함수는 void makeSound() const { ... } 으로

2. 파생 클래스 Bird에서 makeSound 함수를 가지고 void makeSound() const 오버라이드 하지 않는다.

3. main에서 performSound의 Animal인자를 받기 위해서 형변환하여 전달
    performSound(static_cast<const Animal&>(bird));
