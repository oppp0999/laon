* operator[] 문제 -> N 차원 배열의 각각의 원소에 어떻게 접근하는지?
    1. arr[1][2][3][4]
    -> 먼저 arr[1] 이 처리되며, 첫 번째 차원으로 1을 선택했다는 정보가 담긴 어떤 객체 T 를 리턴
    2. (T)[2][3][4]
    -> T 또한 operator[]가 있어서, 두번째 차원으로 2를 선택했다는 정보가 담긴 어떤 객체 T' 리턴
    3. (T')[3][4]
    -> T' 또한 operator[]가 있어서, 두번째 차원으로 3를 선택했다는 정보가 담긴 어떤 객체 T'' 리턴
    4. (T'')[4]
    -> T'' 또한 operator[]가 있어서, 두번째 차원으로 4를 선택했다는 정보가 담긴 어떤 객체 T''' 리턴
    5. T'''
    -> 여기에서 찾는 타입이 일치해야함.

이를 구현하는 방법?
    1. Array 가 아닌 새로운 타입의 객체를 만들어야 한다는 것
        -> operator[] 가 Array& 타입이라면, 1 차원 Array 배열에 대해서 ->arr[1] = 3; 과 같은 문장이기 때문에
    2. operator[] 가 int& 타입을 리턴할 수도 없다.
        -> int& 리턴하면 1차원 배열인 -> arr[1] =3 이지만 고차원 배열에선 -> arr[1][2] = 3; 이 된다.

#ex
    #include <iostream>

    namespace MyArray { //이름공간으로 감싸 다른 라이브러리에서 Array라는 클래스를 정의해도 문제 없음
    class Array; //정의 순서 중요
    class Int; //Int 알려주기위해 (friend를 위해)

    class Array {
    friend Int; //Array 클래스에서 Int를 사용하기 위해 friend 해줌.

    const int dim;  // 몇 차원 배열 인지
    int* size;  // size[0] * size[1] * ... * size[dim - 1] 짜리 배열이다.

    struct Address {
        int level;
        // 맨 마지막 레벨(dim - 1 레벨) 은 데이터 배열을 가리키고, 그 위 상위
        // 레벨에서는 다음 Address 배열을 가리킨다.
        void* next;
    };

    Address* top;

    public:
    class Iterator {
        int* location;
        Array* arr;

        friend Int;

    public:
        Iterator(Array* arr, int* loc = NULL) : arr(arr) {
        location = new int[arr->dim];
        for (int i = 0; i != arr->dim; i++)
            location[i] = (loc != NULL ? loc[i] : 0);
        }
        Iterator(const Iterator& itr) : arr(itr.arr) {
        location = new int[arr->dim];
        for (int i = 0; i != arr->dim; i++) location[i] = itr.location[i];
        }
        ~Iterator() { delete[] location; }
        // 다음 원소를 가리키게 된다.
        Iterator& operator++() {
        if (location[0] >= arr->size[0]) return (*this);

        bool carry = false;  // 받아 올림이 있는지
        int i = arr->dim - 1;
        do { //받아 올림을 위해서 do while로 처리
            // 어차피 다시 돌아온다는 것은 carry 가 true
            // 라는 의미 이므로 ++ 을 해야 한다.
            location[i]++;
            if (location[i] >= arr->size[i] && i >= 1) { //i>=1 처리
            // i 가 0 일 경우 0 으로 만들지 않는다 (이러면 begin 과 중복됨)
            location[i] -= arr->size[i];
            carry = true;
            i--;
            } else
            carry = false;

        } while (i >= 0 && carry);

        return (*this);
        }
        Iterator& operator=(const Iterator& itr) {
        arr = itr.arr;
        location = new int[itr.arr->dim];
        for (int i = 0; i != arr->dim; i++) location[i] = itr.location[i];

        return (*this);
        }
        Iterator operator++(int) {
        Iterator itr(*this);
        ++(*this);
        return itr;
        }
        bool operator!=(const Iterator& itr) {
        if (itr.arr->dim != arr->dim) return true;

        for (int i = 0; i != arr->dim; i++) {
            if (itr.location[i] != location[i]) return true;
        }

        return false;
        }
        Int operator*();
    };

    friend Iterator;
    Array(int dim, int* array_size) : dim(dim) {
        size = new int[dim];
        for (int i = 0; i < dim; i++) size[i] = array_size[i];

        top = new Address;
        top->level = 0;

        initialize_address(top);
    }
    Array(const Array& arr) : dim(arr.dim) {
        size = new int[dim];
        for (int i = 0; i < dim; i++) size[i] = arr.size[i];

        top = new Address;
        top->level = 0;

        initialize_address(top);
        // 내용물 복사
        copy_address(top, arr.top);
    }

    void copy_address(Address* dst, Address* src) {
        if (dst->level == dim - 1) {
        for (int i = 0; i < size[dst->level]; ++i)
            static_cast<int*>(dst->next)[i] = static_cast<int*>(src->next)[i];
        return;
        }
        for (int i = 0; i != size[dst->level]; i++) {
        Address* new_dst = static_cast<Address*>(dst->next) + i;
        Address* new_src = static_cast<Address*>(src->next) + i;
        copy_address(new_dst, new_src);
        }
    }

    // address 를 초기화 하는 함수이다. 재귀 호출로 구성되어 있다.
    void initialize_address(Address* current) {
        if (!current) return;
        if (current->level == dim - 1) {
        current->next = new int[size[current->level]];
        return;
        }
        current->next = new Address[size[current->level]];
        for (int i = 0; i != size[current->level]; i++) {
        (static_cast<Address*>(current->next) + i)->level = current->level + 1;
        initialize_address(static_cast<Address*>(current->next) + i);
        }
    }
    void delete_address(Address* current) {
        if (!current) return;
        for (int i = 0; current->level < dim - 1 && i < size[current->level]; i++) {
        delete_address(static_cast<Address*>(current->next) + i);
        }

        if (current->level == dim - 1) {
        delete[] static_cast<int*>(current->next);
        }
        delete[] static_cast<Address*>(current->next);
    }
    Int operator[](const int index);
    ~Array() {
        delete_address(top);
        delete[] size;
    }

    Iterator begin() {
        int* arr = new int[dim];
        for (int i = 0; i != dim; i++) arr[i] = 0;

        Iterator temp(this, arr);
        delete[] arr;

        return temp;
    }
    Iterator end() {
        int* arr = new int[dim];
        arr[0] = size[0];
        for (int i = 1; i < dim; i++) arr[i] = 0;

        Iterator temp(this, arr);
        delete[] arr;

        return temp;
    }
    };
    class Int {
    void* data; //배열 요소를 가르킴 -> 포인터 거나 NULL

    int level; // 객체 속한 레벨 배열의 차원에 따라 1 ~ dim
    Array* array; // 객체가 속한 배열인 Array 객체

    public:
    Int(int index, int _level = 0, void* _data = NULL, Array* _array = NULL)
        : level(_level), data(_data), array(_array) {
        if (_level < 1 || index >= array->size[_level - 1]) {
        data = NULL;
        return;
        } //오류 발생 시 처리하는 문장
        if (level == array->dim) { //같다는 말은 실질적 접근 완료
        // 이제 data 에 우리의 int 자료형을 저장하도록 해야 한다.
        // 하지만 void * 로 명시된 이유는 void*로 선언되어 컴파일러가 해당 포인터의 타입을 추론할 수 없기 때문
        // 실제론 int* 타입을 가리키는 포인터
        // index를 더해주어 배열에서 원하는 요소를 가리키는 포인터로 설정
        data = static_cast<void*>((static_cast<int*>(static_cast<Array::Address*>(data)->next) + index)); 
        } else {
        // 그렇지 않을 경우 data 에 그냥 다음 addr 을 넣어준다.
        //맨 마지막에서 사용자가 원하는 int 데이터를 정확히 찾을 수 있다.
        data = static_cast<void*>(static_cast<Array::Address*>(static_cast<Array::Address*>(data)->next) + index);
        }
    };

    Int(const Int& i) : data(i.data), level(i.level), array(i.array) {}

    operator int() {//Int가 Wrapper 클래스로써 동작하기에 가장 필수적인 요소인 타입 변환 연산자
        if (data) return *static_cast<int*>(data); //Int객체의 data에는 int 원소의 주소값이 들어가 있기 때문에 void*를 int*로 변환해서 리턴
        return 0;
    }
    Int& operator=(const int& a) {
        if (data) *static_cast<int*>(data) = a;
        return *this;
    }

    Int operator[](const int index) { //level에 다음 레벨을 전달함으로써 다음 단계의 Int를 생성
        if (!data) return 0; //data가 null 예외상황
        return Int(index, level + 1, data, array);
    }
    };


    //Array 클래스 안에 넣지 않고 빼 놓은 이유는 Int를 실제로 이용하기 위해 Int 내부 생성자를 사용하기 위해 (friend는 선언, 클래스 포인터 정의만 가능)
    Int Array::operator[](const int index) { //Int 리턴하면서 level 1, data인자는 top, 생성되는 객체가 top의 next가 가리키고있는 index data로 가질 수 있다.
    return Int(index, 1, static_cast<void*>(top), this);
    }


    Int Array::Iterator::operator*() { 
    Int start = arr->operator[](location[0]);
    for (int i = 1; i <= arr->dim - 1; i++) {
        start = start.operator[](location[i]);
    }
    return start; //(*itr)을 통해 실제 데이터에 접근해야 하므로, Int를 리턴
    }
    }  // namespace MyArray
    int main() {
    int size[] = {2, 3, 4};
    MyArray::Array arr(3, size);

    MyArray::Array::Iterator itr = arr.begin();
    for (int i = 0; itr != arr.end(); itr++, i++) (*itr) = i;
    for (itr = arr.begin(); itr != arr.end(); itr++)
        std::cout << *itr << std::endl;

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
        for (int k = 0; k < 4; k++) {
            arr[i][j][k] = (i + 1) * (j + 1) * (k + 1) + arr[i][j][k];
        }
        }
    }
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
        for (int k = 0; k < 4; k++) {
            std::cout << i << " " << j << " " << k << " " << arr[i][j][k]
                    << std::endl;
        }
        }
    }
    }

-> MyArray 네임스페이스에 속하는 Array, Int 클래스를 정의하고 사용하는 예제
    1. Array 클래스는 다차원 배열을 나타냄
    2. Int 클래스는 배열의 요소에 접근하기 위한 래퍼 클래스

CODE 7 ~ 170 -> Array 클래스는 배열의 차원 수와 각 차원의 크기를 인자로 받아 초기화
    -> Address 구조체를 사용하여 배열의 주소를 저장
        1. 다음 레벨의 Address 배열을 가리키고,
        2. 마지막 레벨에서는 데이터 배열을 가리킴
    -> Address 주요 멤버 변수
        1. top 멤버 변수는 가장 상위 레벨의 Address를 가리키는 포인터
        2. size 는 각 차원의 크기를 담은 배열
        3. dim 배열의 차원 수를 나타냄

CODE 151 ~ 169 -> begin() 함수의 첫 번째 원소를 가리키는 Iterator 객체 반환
                  end() 함수는 배열의 끝을 표시하는 Iterator 객체 반환

CODE 171 ~ 212 -> Int 클래스는 배열의 요소에 접근하기 위한 래퍼 클래스
    -> 멤버변수
        1. 해당 위치에 대한 정보를 가짐
        2. 배열 주소에 대한 포인터 -> data
    -> operator int() 를 정의
        1. Int 객체를 int 로 변환
    -> operator= 을 사용하여 요소에 값을 할당

CODE 23 ~ 84 -> Iterator 배열을 순회하기 위한 반복자
    -> Array 클래스의 begin, end 함수를 통해 생성될 수 있다.
    -> Iterator 에서 객체의 멤버 변수
        1. 현재 위치를 나타내는 location 포인터
        2. 배열에 대한 포인터 (arr)
    -> operator++() 함수를 통해 다음 원소를 가리킴
    -> operator*() 함수를 통해 현재 위치의 요소를 반환

CODE 229 ~ 253 -> main함수
    -> main 함수에서 3차원 배열을 생성하고 순회하여 값을 설정
        -> 배열의 크키 {2,3,4} -> 배열 값을 초기화하고 출력