* C++ 스타일의 캐스팅
    캐스팅의 종류
    1. 암시적 캐스팅 -> int와 double 변수와의 덧셈을 수행할 때, int형 변수가 자동으로 double 변수로 캐스팅
    2. 명시적 캐스팅 -> void* 타입의 주소를 특정 구조체 포인터 타입의 주소로 바꿈
        2.1 ->  ptr = (Something *)other_ptr;
                int_variable = (int)float_variable;

    -> 괄호에 타입을 넣는 방식으로 변환을 수행하면 코드의 가독성이 떨어짐

    c++의 캐스팅
    1. static_cast : 흔히 생각하는, 언어적 차원에서 지원하는 일반적인 타입 변환
    2. const_cast : 객체의 상수성(const) 를 없애는 타입 변환 -> const int 가 int 로 바뀐다.
    3. dynamic_cast : 파생 클래스 사이에서의 다운 캐스팅
    4. reinterpret_cast : 위험을 감수하고 하는 캐스팅으로 서로 관련이 없는 포인터들 사이의 캐스팅 등

    -> 사용 법 : (원하는 캐스팅 종류)<바꾸려는 타입>(무엇을 바꿀 것인가?)
        ex) static_cast -> static_cast<int>(float_variable);   
                            = (int)(float_variable)

* N 차원 배열
    public : 
    Array(int dim, int *array_size) : dim(dim) {
    size = new int[dim];
    for (int i = 0; i < dim; i++) size[i] = array_size[i];

    top = new Address;
    top->level = 0;

    initialize_address(top);
    }
    Array(const Array &arr) : dim(arr.dim) {
    size = new int[dim];
    for (int i = 0; i < dim; i++) size[i] = arr.size[i];

    top = new Address;
    top->level = 0;

    initialize_address(top);

    // 내용물 복사
    copy_address(top, arr.top);
    }

    void copy_address(Address *dst, Address *src) {
    if (dst->level == dim - 1) {
        for (int i = 0; i < size[dst->level]; ++i)
        static_cast<int *>(dst->next)[i] = static_cast<int *>(src->next)[i];
        return;
    }
    for (int i = 0; i != size[dst->level]; i++) {
        Address *new_dst = static_cast<Address *>(dst->next) + i;
        Address *new_src = static_cast<Address *>(src->next) + i;
        copy_address(new_dst, new_src);
    }
    }

    void initialize_address(Address *current) {
    if (!current) return;
    if (current->level == dim - 1) {  // 두 번째 질문 (종료 조건)
        current->next = new int[size[current->level]];
        return;
    }
    current->next = new Address[size[current->level]];
    for (int i = 0; i != size[current->level]; i++) {  // 다음 단계로 넘어가는 과정
        (static_cast<Address *>(current->next) + i)->level = current->level + 1;

        initialize_address(static_cast<Address *>(current->next) + i);
    }
    }

    void delete_address(Address *current) {
    if (!current) return;
    for (int i = 0; current->level < dim - 1 && i < size[current->level]; i++) {
        delete_address(static_cast<Address *>(current->next) + i);
    }

    if (current->level == dim - 1) {
        delete[] static_cast<int *>(current->next);
    }

    delete[] static_cast<Address *>(current->next);
    }

    ~Array() {
    delete_address(top);
    delete[] size;
    }



    -> Array 기본 생성자와 복사 생성자, 소멸자를 나타냄
    1. 재귀 함수의 시작으로 current에 top을 전달
    2. top을 시작으로 함수들이 재귀 호출 되면서 N차원 메모리 구조가 생성, 소멸
    3. 소멸자에서 동적으로 할당한 모든 것들을 정리하면서 재귀 호출로 생성한 메모리 구조만 소멸해야한느 것이 아니라 size 역시 동적으로 할당한 것이므로 해제 해주어야함
    4. 복사 생성자에서 트리 안에 모든 원소들을 복사해줘야함.

CODE 2 ~ 10 -> Array(int dim, int *array_size) : dim(dim): 생성자 함수 -> dim과 array_size를 인자로 받고
    - dim은 배열의 차원 수
    - array_size는 각 차원의 크기를 나타내는 정수 배열
    1. 생성자는 dim 멤버 변수를 초기화
    2. size 배열을 동적으로 할당하여 array_size를 복사해줘야함
    3. top은 Address 객체를 가리키는 포인터 -> 초기화 후 initialize_address 함수를 호출하여 초기화

CODE 11 ~ 22 -> Array(const Array &arr) : dim(arr.dim) : 복사 생성자 함수 -> arr 객체를 인자로 받음
    1. dim 멤버 변수를 복사
    2. size 배열을 동적 할당하여 arr.size 값을 복사
    3. top은 Address 객체를 가리키는 포인터 -> 초기화 후 initialize_address 함수를 호출하여 초기화
    4. copy_address 함수를 호출하여 arr.top의 내용을 복사

CODE 24 ~ 35 -> void copy_address(Address *dst, Address *src) 은 내부적으로 사용하는 멤버 함수
    1. dst, src 포인터를 인자로 받음
    2. dst는 목적지 주소를 가리키는 포인터, src는 소스 주소를 가리키는 포인터
    3. dst -> level 이 dim - 1 인 경우 배열의 마지막 차원에 도달
        3.1 static_cast 를 사용하여 dst->next, src->netx의 내용을 복사
    4. dim - 1 이 아닌 경우, -> 재귀적으로 copy_address 함수를 호출하며 다음 차원으로 이동하고 복사

CODE 37 ~ 49 -> void initialize_address(Address *current) 은 주소 초기화를 위한 멤버 함수
    1. current 포인터를 인자로 받음
    2. current -> level이 dim - 1 인 경우 배열의 마지막 차원 도달
        2.1 current -> next에 size[current->level] 길이의 int 배열을 동적 할당
    3. dim - 1 이 아닌 경우, -> current -> next에 size[current->level] 길이의 Address 배열을 동적 할당
        3.1 Address 객체에 level 값을 설정한 후 재귀적으로 initialize_address 호출하여 다음 차원으로 이동

CODE 51 ~ 62 -> void delete_address(Address *current) 재귀적으로 호출 되어 current가 가리키는 현재 노드의 다음 레벨에 있는 노드들을 순회하면서 메모리 해제
    1. current 포인터를 인자로 받음
    2. 현재 노드(current)의 레벨 (current -> level)이 dim - 1 인 경우
        2.1 마지막 레벨에 해당하므로 current->next를 int 배열로 캐스팅하여 메모리 해제
    3. dim - 1 아닌 경우
        3.1 current->next 를 Address 배열로 캐스팅하여 다음 레벨에 대한 메모리를 해제
    4. 최종적으로는 current 노드에 대한 메모리 해제 


CODE 36 ~ 39 -> ~Array() : 소멸자 함수
    1. delete_address 함수를 호출 -> top이 가리키는 Address 객체와 그 하위 주소 객체들을 삭제
    2. size 배열 해제