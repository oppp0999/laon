* decltype
    - 사용 문법
    -> decltype(/* 타입을 알고자 하는 식*/)

    
    ex1)
    #include <iostream>

    struct A {
    double d;
    };

    int main() {
        int a = 3;
        decltype(a) b = 2;  // int

        int& r_a = a;
        decltype(r_a) r_b = b;  // int&

        int&& x = 3;
        decltype(x) y = 2;  // int&&

        A* aa;
        decltype(aa->d) dd = 0.1;  // double
    }

    -> decltype이 각각 int, int&, int&& 로 취환돼서 컴파일
        -> decltype에 전달된 식이 괄호로 둘러쌓이지 않은 식별자 표현식(id-expression)이라면 해당 식의 타입을 얻을 수 있다.


# 식별자 표현식
    -> 변수의 이름, 함수의 이름, enum 이름, 클래스 멤버 변수(a.b 나 a->b 같은 꼴) 등 을 의미
    -> 어떠한 연산을 하지 않고 단순히 객체 하나만을 가리키는 식이라고 보면 됨.

    -> decltype에 식별자 표현식이 아닌 식을 전달하면?
        -> 해당 식의 값의 종류에 따라 달라짐
            1. xvalue 라면 decltype 는 T&& 가 됩니다.

            2. lvalue 라면 decltype 는 T& 가 됩니다.

            3. prvalue 라면 decltype 는 T 가 됩니다.



* Value Category
    -> 모든 c++식에는 두 가지 정보가 있음 -> 타입, 값 카테고리
        - 타입 : 데이터 형식
        - 값 카테고리 : 좌측값/우측값

    -> 식의 값 카테고리는 두 가지로 질문
        1. 정체를 알 수 있는가?
            -> 해당 식이 어떤 다른 식과 같은 것인지 아닌지를 구분 할 수 있다.
                -> 일반적인 변수라면 주소 값을 취해 구분
                -> 함수의 경우라면 이름 확인
            
        2. 이동 시킬 수 있는가?
            -> 해당 식을 다른 곳으로 안전하게 이동할 수 있는지의 여부
                -> 해당 식을 받는 이동 생성자, 이동 대입 연산자 등을 사용

        -> 값 카테고리 구분
            1. 정체를 알 수 있지만 이동 시킬 수 있다 : xvalue
            2. 정체를 알 수 있지만 이동 시킬 수 없다 : lvalue

            3. 정체를 알 수 없지만 이동 시킬 수 있다 : prvalue
            4. 정체를 알 수 없지만 이동 시킬 수 없다 : 쓸모 없음


# lvalue
    -> int i; 
    -> i;
        -> j 라는 것이 있을 때 구분이 되고, i라는 식의 주소값은 실제 변수 i의 주소값
        -> i는 이동할 수 없다. int&& x = i;가 컴파일 되지 않음
        -> i 는 lvalue

    -> 이름을 가진 대대분의 객체들은 모두 lvalue -> 해당 객체의 주소값을 취할 수 있기 때문
        -> lvalue 카테고리 안에 들어가는 식들을 나열
            1. 변수, 함수의 이름, 어떤 타입의 데이터 멤버 (예컨대 std::endl, std::cin) 등등
            2. 좌측값 레퍼런스를 리턴하는 함수의 호출식. std::cout << 1, ++it
            3. a = b, a += b, a *= b 같이 복합 대입 연산자 식들
            4. ++a , --a  같은 전위 증감 연산자 식들
            5. a.m, p->m 과 같이 멤버를 참조할 때. m은 enum 값이거나 static 이 안니 멤버 함수인 경우 제외
                5.1
                class A {
                int f();         // static 이 아닌 멤버 함수
                static int g();  // static 인 멤버 함수
                }

                A a;
                a.g;  // <-- lvalue
                a.f;  // <-- lvalue 아님 (아래 나올 prvalue)
            6. a[n] 과 같은 배열 참조 식둘
            7. 문자열 리터럴 "hi"
    
    -> 주소값 연산자 (&) 을 통해 해당 식의 주소 값을 알아 낼 수 있음.
        -> 예를 들어 &++i, &std::endl 모두 올바른 작업 -> 좌측값 레퍼런스를 초기화 하는데에 사용할 수 있음

# prvalue
    ex1)
    int f() { return 10; }
    f();  // <-- ?
    -> f() 의 주소값을 취할 수 없다 -> 하지만 f()는 우측값 레퍼런스에 붙을 수 있다.
    -> f() 는 prvalue

        - 대표적인 예
        1. 문자열 리터럴을 제외한 모든 리터럴들 42, true, nulltpr 같은 애들
        2. 래퍼런스가 아닌 것을 리턴하는 함수의 호출식, 예를 들어서 str.substr(1,2), str1 + str2
        3. 후위 증감 연산자 식. a++, a--
        4. 산술 연산자, 논리 연산자 식들, a+b, a&&b, a<b 같은 것들을 말함. 물론 이들은 연산자 오버로딩 된 경우들 말고 디폴트로 제공되는 것들을 말함.
        5. 주소값 연산자 식 &a
        6. a.m, p->m 과 같이 멤버를 참조할 때, m은 enum 값이거나, static 이 아닌 멤버 함수
        7. this
        8. enum 값
        9. 람다식 []() { return 0; } 과 같은 애들

    -> prvalue 들은 정체를 알 수 없기에 주소값을 취할 수 없다.
    -> &a++ 이나 &42 와 같은 문장은 모두 오류
    -> prvalue들은 식의 좌측에 올 수 없다.
    -> prvalue는 우측값 레퍼런스와 상수 좌측값 레퍼런스를 초기화 하는데 사용할 수 있다.
        -> 
        const int& r = 42;
        int&& rr = 42;
        // int& rrr = 42; <-- 불가능


# xvalue
    -> 값 카테고리가 lvalue, prvalue 두 개로만 구분된다면 문제가 발생
        -> 좌측값으로 분류되는 식을 이동 시킬 방법이 없기 때문에, 좌측값 처럼 정체가 있지만 이동도 시킬 수 있는 것들을 생각
    -> 즉, 형태의 값의 카테고리에 들어가는 식들로 가장 크게 우측값 레퍼런스를 리턴하는 함수의 호출식
        -> 대표적으로 std::move()
            - move 의 리턴 타입은 우측값 레퍼런스임을 알 수 있다.
            - move를 호출한 식은 lvalue 처럼 좌측값 레퍼런스를 초기화 하는데 사용할 수 있고, prvalue처럼 우측값 레퍼런스에 붙이거나 이동 생성자에 전달해서 이동 가능
                1. 만일 식의 값 종류가 xvalue 라면 decltype 는 T&& 가 됨
                2. 만일 식의 값 종류가 lvalue 라면 decltype 는 T& 가 됨
                3. 만일 식의 값 종류가 prvalue 라면 decltype 는 T 가 됨

    ex1)
    int a, b;
    decltype(a + b) c;  // c 의 타입은?
    -> a + b 는 prvalue이므로 a + b 실제 타입은 int로 추론
        -> 즉, int c;를 한 것과 같음

    ex2)
    int a;
    decltype((a)) b;  // b 의 타입은?
    -> (a) 는 식별자 표현식이 아니기 때문에 어느 값 카테고리에 들어가는지 생각
        -> &(a) 처럼 주소값 연산자를 사용할 수 있고, 이동이 불가능 하기에 lvalue
        -> 즉, b는 int& 로 추론


* decltype의 쓰임새
    -> 타입 추론이 필요한 부분에서 그냥 auto 가능?

    함수의 리턴값을 인자들 정의 부분 뒤에 써야 함
    ex1)
    template <typename T, typename U>
    auto add(T t, U u) -> decltype(t + u) {
    return t + u;
    }
    -> t 와 u의 정의가 decltype 나중에 나오기 때문
        -> 람다 함수와 비슷하게 사용


* std::declval
    decltype과 다르게 키워드가 아닌 <utilty> 에 정의된 함수

    ex1) 어떤 T의 f 라는 함수의 리턴 타입을 정의 -> decltype
    struct A {
    int f() { return 0; }
    };

    decltype(A().f()) ret_val;  // int ret_val; 이 된다.
    -> A의 객체 생성, 함수 f가 호출 되지 않음
    -> decltype 안에 들어가는 식은, 식의 형태로만 존재할 뿐 컴파일 시에, decltype() 전체 식이 타입으로 변환되어 런타임시에 실행되는 것이 아님

    -> 디폴트 값을 설정하지 않고 생성자를 만든다면 오류가 발생할 수 있음
    -> 생성자를 사용하는 방식은 전달되는 타입들의 생성자가 모두 같은 꼴이지 않을 경우 문제가 생김

    ex2) 생성자를 사용하는 방식말고 객체를 나태내는 방식
    #include <utility>

    template <typename T>
    decltype(std::declval<T>().f()) call_f_and_return(T& t) {
    return t.f();
    }
    struct A {
    int f() { return 0; }
    };
    struct B {
    B(int x) {}
    int f() { return 0; }
    };

    int main() {
        A a;
        B b(1);

        call_f_and_return(a);  // ok
        call_f_and_return(b);  // ok
    }

CODE 4 -> T에 생성자가 존재하지 않더라도 T()와 같은 효과를 낼 수 있음