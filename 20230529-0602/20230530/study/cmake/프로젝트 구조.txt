# 프로젝트 구조
$ tree
.
├── Makefile
├── obj
└── src
    ├── bar.cc
    ├── bar.h
    ├── foo.cc
    ├── foo.h
    └── main.cc

-> 모든 소스파일 -> src
-> 빌드 파일 -> obj

///// include 에 빼는 경우가 있는데 굳이 라이브러리를 만드는 경우가 아니라면 선호 X





######## 만능 makefile

CC = g++

# C++ 컴파일러 옵션
CXXFLAGS = -Wall -O2

# 링커 옵션
LDFLAGS =

# 소스 파일 디렉토리
SRC_DIR = ./src

# 오브젝트 파일 디렉토리
OBJ_DIR = ./obj

# 생성하고자 하는 실행 파일 이름
TARGET = main

# Make 할 소스 파일들
# wildcard 로 SRC_DIR 에서 *.cc 로 된 파일들 목록을 뽑아낸 뒤에
# notdir 로 파일 이름만 뽑아낸다.
# (e.g SRCS 는 foo.cc bar.cc main.cc 가 된다.)
SRCS = $(notdir $(wildcard $(SRC_DIR)/*.cc))
# foo.cc, bar.cc, main.cc ->  ./src/foo.cc ./src/bar.cc ./src/main.cc 가 됨

OBJS = $(SRCS:.cc=.o)


# OBJS 안의 object 파일들 이름 앞에 $(OBJ_DIR)/ 을 붙인다.
# 안에 있는 모든 %.o 패턴을 $(OBJ_DIR)/%.o 로 치환 -> /obj/foo.o ./obj/bar.o ./obj/main.o
OBJECTS = $(patsubst %.o,$(OBJ_DIR)/%.o,$(OBJS))

DEPS = $(OBJECTS:.o=.d)

all: main

$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cc
	$(CC) $(CXXFLAGS) -c $< -o $@ -MD $(LDFLAGS)

$(TARGET) : $(OBJECTS)
	$(CC) $(CXXFLAGS) $(OBJECTS) -o $(TARGET) $(LDFLAGS)

.PHONY: clean all
clean:
	rm -f $(OBJECTS) $(DEPS) $(TARGET)

-include $(DEPS)


# 프로젝트 구조 2 
$ tree
.
├── include
│   ├── bar.h
│   └── foo.h
├── Makefile
├── obj
└── src
    ├── bar.cc
    ├── foo.cc
    └── main.cc


-> 헤더파일 경로
INCLUDE = -Iinclude/ 만 추가로 하고 INCLUDE 변수로 사용
