#c++ 템플릿
    -> 사용자가 원하는 타입을 넣으면 그에 맞춰 코드를 찍어내는 틀

    ex1)
    // 템플릿 첫 활용
    #include <iostream>
    #include <string>

    template <typename T>
    class Vector {
        T* data;
        int capacity;
        int length;

        public:
            // 생성자
            Vector(int n = 1) : data(new T[n]), capacity(n), length(0) {}

            // 맨 뒤에 새로운 원소를 추가한다.
            void push_back(T s) {
                if (capacity <= length) {
                T* temp = new T[capacity * 2];
                for (int i = 0; i < length; i++) {
                    temp[i] = data[i];
                }
                delete[] data;
                data = temp;
                capacity *= 2;
                }

                data[length] = s;
                length++;
            }

            // 임의의 위치의 원소에 접근한다.
            T operator[](int i) { return data[i]; }

            // x 번째 위치한 원소를 제거한다.
            void remove(int x) {
                for (int i = x + 1; i < length; i++) {
                data[i - 1] = data[i];
                }
                length--;
            }

            // 현재 벡터의 크기를 구한다.
            int size() { return length; }

            ~Vector() {
                if (data) {
                delete[] data;
                }
            }
    };

    int main() {
        // int 를 보관하는 벡터를 만든다.
        Vector<int> int_vec;
        int_vec.push_back(3);
        int_vec.push_back(2);

        std::cout << "-------- int vector ----------" << std::endl;
        std::cout << "첫번째 원소 : " << int_vec[0] << std::endl;
        std::cout << "두번째 원소 : " << int_vec[1] << std::endl;

        Vector<std::string> str_vec;
        str_vec.push_back("hello");
        str_vec.push_back("world");
        std::cout << "-------- std::string vector -------" << std::endl;
        std::cout << "첫번째 원소 : " << str_vec[0] << std::endl;
        std::cout << "두번째 원소 : " << str_vec[1] << std::endl;
    }

CODE 4 -> 정의되어 있는 클래스에 대해 템플릿을 정의하고 템플릿 인자로 T를 받는데, T는 반드시 어떠한 타입의 이름임을 명시하고 있다.
    CODE 4 아래에 오는 class vector 클래스에 대한 템플릿을 명시하는데, 만약 함수 일 땐 함수에 대한 템플릿이 됨.

    -> template <typename T> = template <class T> 동일하기에 T자리에 class가 오지않고 int, char도 사용할 수 있다.
        -> template <typename T> 권장

CODE 53 -> 정의한 템플릿의 인자에 값을 전달하기 위해서 사용한 코드로
    <> 안에 전달하려는 것을 명시해주면 된다.
    -> vector 템플릿은 템플릿 인자로 타입을 받게 되는데, T에 int가 전달됨. -> 물론 std::string으로도 가능 그럼 클래스에 T가 치환되어 코드를 생성함.

    -> 이를 클래스 템플릿에 인자를 전달해서 실제 코드를 생성하는 것 -> 클래스 템플릿 인스턴스화 라고 부름

-> vector<bool> -> bool 데이터는 1개 비트만 사용해도 저장할 수 있지만, 8비트를 사용해 1개의 bool값을 저장하기에, 메모리 처리를 따로 해줘야함.

* 템플릿 특수화
    ex1)
    template <typename A, typename B, typename C>
    class test {};

    -> 다양한 타입을 따로 처리하고 싶을 때 (A => int, C => double)

    template <typename B>
    class test<int, B, double> {};

    -> 특수화 하고 싶은 부분에 원하는 타입을 전달하고 B는 템플릿을 사용
        -> B도 함께 특수화 하고싶다면

    template <>
    class test<int, int, double> {};

    ex2)
    template<>
    class Vector<bool> {
        ...
    }

    -> Vector<bool> 을 구현하기 위해서 int 배열을 이용
        -> int 는 4 바이트 이므로 -> 32개의 bool 데이터들을 묶어서 저장 가능
        -> 비트를 이용하여 각 위치에 1 0 을 이용해서 bool로 활용 가능
            -> (1 << (i % 32))) != 0 를 사용하여 or이나 and 이용, |, &

