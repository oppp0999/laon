* 래퍼런스 
    #include <iostream>

    class A {
        public:
        virtual void show() { std::cout << "Parent !" << std::endl; }
    };
    class B : public A {
        public:
            void show() override { std::cout << "Child!" << std::endl; }
    };

    void test(A& a) { a.show(); }
    int main() {
        A a;
        B b;
        test(a);
        test(b);

        return 0;
    }

    -> void test(A& a) { a.show(); } 로 기반 클래스를 인자로 받아도 그의 레퍼런스가 되어도 문제없이 작동
    -> test(b)를 B클래스의 객체를 전달해도 A 클래스를 상속 받기 때문에 타입 변환되어 전달된다.

* 가상 함수의 구현 원리
    -> virtual 이라는 키워드로 가상 함수를 만들어도 실제로 존재하는 함수이고 정상적 호출도 가능
    -> 자바의 경우 모든 함수들이 디폴트로 virtual 선언
    -> 하지만 c++에서 virtual 로 직접 선언하게 만든 이유는?
        -> 오버헤드 존재, 반대로 업캐스팅한 객체의 가상 함수 테이블을 참조하여 오버라이드할 수 있다 
            ->  Parent* c = Child(); -> child 객체를 가리키는 포인터 c를 parent클래스의 포인터로 초기화.

        -> 두 단계를 걸쳐서 함수를 호출함을써 소프트웨어적으로 동적 바인딩을 구현할 수 있다.

* 순수 가상 함수와 추상 클래스

    ex1)
    #include <iostream>

    class Animal {
        public:
            Animal() {}
            virtual ~Animal() {}
            virtual void speak() = 0;
    };

    class Dog : public Animal {
        public:
            Dog() : Animal() {}
            void speak() override { std::cout << "왈왈" << std::endl; }
    };

    class Cat : public Animal {
        public:
            Cat() : Animal() {}
            void speak() override { std::cout << "야옹야옹" << std::endl; }
    };

    int main() {
        Animal* dog = new Dog();
        Animal* cat = new Cat();

        dog->speak();
        cat->speak();
    }

    -> Animal 클래스의 speak 함수를 살펴보면, 다른 함수들과는 달리, 함수의 몸통이 정의되어 있지 않고
        = 0; 으로 처리되어 있는 가상 함수
            -> 반드시 오버라이딩 되어야만 하는 함수
        -> 즉, 순수 가상 함수라고 불림
            -> 본체가 없기 때문에, 이 함수를 호출하는 것은 불가능 -> Animal 객체를 생성하는 것 또한 불가능
                ->
                Animal a;
                a.speak();
                    -> 객체 자체를 생성할 수 없다.
        -> Animal처럼, 순수 가상 함수를 최소 한 개 이상 포함하고 있는 클래스는 객체를 생성할 수 없다.
        -> 인스턴스화 시키기 위해서는 이 클래스를 상속 받는 클래스를 만들어 모든 순수 가상 함수를 오버라이딩 해야함.
            -> 순수 가상 함수를 최소 한 개 포함, 반드시 상속 되어야하는 클래스를
                -> 추상 클래스라 부름

        -> private에 순수 가상 함수를 정의하여도 상관없음
            -> 오버라이드는 되지만 자식 클래스에서 호출을 못함.
        
    -> 객체는 생성할 수 없지만, 추상 클래스를 가리키는 포인터는 문제 없이 만들 수 있다.
        -> Animal* 의 변수를 생성하여 자식 클래스를 대입 받는다.

* 다중 상속
    -> 한 클래스가 여러 개의 클래스들을 상속 받는 것

    ex1)
    class A {
        public:
        int a;
    };

    class B {
        public:
        int b;
    };

    class C : public A, public B {
        public:
        int c;+
    };

    int main() { C c; }

    -> class C : public A, public B -> ---- A >> B >> C
        class C : public B, public A -> ---- B >> A >> C
        -> 상속 받는 순서에 따라 함수가 호출되는 순서가 바뀐다. 


    다중 상속 주의 사항
        ex2)
        class A {
        public:
            int a;  
        };

        class B {
        public:
            int a;
        };

        class C : public B, public A {
        public:
            int c;
        };

        int main() {
        C c;
        c.a = 3;
        }

        -> 클래스 C의 객체를 생성해서 중복되는 멤버 변수에 접근하면, B의 a 인지 A의 a인지 구분할 수 없기때문에 오류가 난다.
            -> 이런 상속으로 다이아몬드 상속이라고 한다.
        
        -> 겹치는 멤버 변수의 문제점을 해결하기 위해서는 
   
            class Human {
            public:
            // ...
            };
            class HandsomeHuman : public virtual Human {
            // ...
            };
            class SmartHuman : public virtual Human {
            // ...
            };
            class Me : public HandsomeHuman, public SmartHuman {
            // ...
            };

            -> 중복되는 멤버 변수를 합치기 위해 베이스 클래스를 만든 후에 human의 클래스를 virtual로 상속을 받게되면
                -> me에서 다중 상속 시에도, 컴파일러가 언제나 Human을 한 번만 포함하도록 지정할 수 있다.

