* 저장 방식 지정자 (Storage class specifier)
    C++ 에서 허용 하는 Storage class specifier 들은 아래와 같이 총 4가지
    1. static
    2. thread_local
    3. extern
    4. mutable (저장 기간과 링크 방식에 영향 X)

* 저장 기간 (Storage duration)
    -> 프로그램에서의 모든 객체들의 경우 반드시 한 가지의 방식의 저장 기간을 가지

    1. 자동(automatic) 저장 기간
        -> 객체들의 경우 보통 {} 안에 정의된 녀석들로 코드 블록을 빠져나가게 되면 자동으로 소멸
        -> static, extern, thread_local -> 지정된 객체들 이외의 모든 지역 객체들이 바로 이 자동 저장 기간을 가짐
        -> 흔히 지역 변수가 여기에 해당

        ex1)
        int func() {
            int a;
            SomeObject x;

        {
            std::string s;
        }

            static int not_automatic;
        }

        -> a, x, s 모두 자동 저장 기간을 가짐, not_automatic 는 아님
        
    2. static 저장 기간
        -> 저장 기간에 해당하는 객체들의 경우, 프로그램이 시작할 때 할당, 프로그램이 끝날 때 소멸
        -> static 객체들은 프로그램에서 유일하게 존재 (지역 변수는 복사본들이 존재)
        -> 함수 밖에 정의된 것들(namespace 단위에서 정의된 것들) static 혹은 extern으로 정의된 객체들이 static 저장 기간을 가짐
        -> static 키워드, static 저장 기간을 가진다는 것을 구분
            -> 즉 다른 방식을 정의된 것들도 static 저장 기간을 가질 수 있다.

        ex1)
        int a;  // 전역 변수 static 저장 기간
        namespace ss {
            int b;  // static 저장 기간
        }

        extern int a;  // static 저장 기간
        int func() {
            static int x;  // static 저장 기간
        }

        -> static 저장 기간을 가짐 

/////
extern - 현재 파일에서 작성중인 코드에, 현재 스코프까지 사용하고자하는 함수가 없는 경우 extern 키워드를 적절히 사용하면 된다.
/////

    3. 쓰레드(thread) 저장 기간
        -> 쓰레드가 할 때 할당 되고, 쓰레드가 종료될 때 소멸되는 객체들
        -> 각 쓰레들이 해당 객체들의 복사본들을 가지게 됨.
        -> thread_local로 선언된 객체들이 이 쓰레드 저장 기간을 가질 수 있다.
    
        ex1)
        #include <iostream>
        #include <thread>

        thread_local int i = 0;

        void g() { std::cout << i; }

        void threadFunc(int init) {
            i = init;
            g();
        }

        int main() {
            std::thread t1(threadFunc, 1);
            std::thread t2(threadFunc, 2);
            std::thread t3(threadFunc, 3);

            t1.join();
            t2.join();
            t3.join();

            std::cout << i;
        }
    -> thread_local 로 정의된 i 가 각 쓰레드에 유일하게 존재하기 때문.
    -> 정의는 전역 변수인 것처럼 정의되어 있지만, 실제로 각 쓰레드에 하나씩 복사본이 존재하게 되고, 각 쓰레드 안에서 해당 i를 전역 변수인 것 처럼 참조
    -> 함수 스레드에서 g함수를 호출하여 출력한 값이고 스레드 실행 순서에 따라 달라짐

    4. 동적 (Dynamic) 저장 기간
        -> 동적 저장 기간의 경우 동적 할당 함수를 통해 할당 되고 해제되는 객체들을 의미
        -> 대표적으로 new와 delete 로 정의되는 객체들을 의미
        
* 링크 방식 (Linkage)
    
    1. 링크 방식 없음 (no Linkage)
    -> 블록 스코프 ({}) 안에 정의되어 있는 이름들이 이 경우에 해당 (extern X)
    -> 링크 방식이 지정되지 않는 개체들의 경우 같은 스코프 안에서 참조

    ex1)
    { int a = 3; }
    a;  // 오류

    2. 내부 링크 방식(Internal Linkage)
    -> static으로 정의된 함수, 변수, 템플릿 함수, 템플릿 변수들이 내부 링크 방식에 해당
    -> 내부 링크 방식으로 정의된 것들의 경우 같은 TU안에서만 참조 가능
    -> 그 외에도 익명의 이름 공간에 정의된 함수나 변수들 모두 내부 링크 방식이 적용

    ex1)
    namespace {
      int a;  // <- 내부 링크 방식
    }
    static int a;  // 이와 동일한 의미

    3. 외부 링크 방식 (External Linkage)
    -> 정의된 개체들은 다른 TU에서도 참조 가능
    -> 외부 링크 방식으로 정의된 개체들에 언어 링크 방식을 정의 -> 다른 언어 사이에서도 공유 가능
    -> 링크 방식이 없는 겨우나 내부 링크 방식을 개체들을 정의하는 경우를 제외하면 나머지 모두 외부 링크 방식으로 정의
    -> 참고 -> 스코프 안에 정의된 변수를 외부 링크로 사용하고싶다? -> extern 사용

    ex1)
    extern "C" int func();  // C 및 C++ 에서 사용할 수 있는 함수.

    // C++ 에서만 사용할 수 있는 함수. 기본적으로 C++ 의 모든 함수들에 extern "C++"
    extern "C++" int func2();
    int func2();  // 위와 동일

* 이름 맹글링 (Name Mangling)
    -> C에서 C++의 함수를 사용하기 위해 extern "C" 로 언어 링크 방식을 명시.
        -> 목적파일 생성시 C컴파일러가 함수 이름을 변환하는 방식과 C++컴파일러가 함수 이름을 변환하는 방식이 다르기 때문
        -> C의 경우 함수 이름 변환 자체가 이루어 지지 않음
            ex1) func 함수 정의
            int func(const char* s) {}

            -> nm a.out 을 하게 되면 -> 함수 이름이 바뀜 -> 오버로딩의 문제가 발생할 수 있기에 extern "C"를 통해 이름맹글링을 하지 않고 그대로 전달.

* 링킹
    -> 각각의 TU들에서 생성된 목적 코드들을 한데 모아서 하나의 실행파일을 만들어내는 작업

    ex1)
    static int a = 3;
    int b = 3;
    const int c = 3;
    static int d;

    int func() {}
    static int func2() {}

-> nm test.o

    0000000000000004 D b
    0000000000000000 T _Z4funcv
    0000000000000000 d _ZL1a
    0000000000000000 r _ZL1c
    0000000000000000 b _ZL1d
    000000000000000b t _ZL5func2v

    -> 각 어떤 방식으로 심볼 되어있는지 배치할지 정보들이 보여짐.

    1. 가운데 알파벳의 경우
        1.1 대문자 - 외부 링크 방식
          22:	5d                   	pop    %rbp
          23:	c3                   	retq   
        예상했던대로, 내부 및 외부 링크 방식인 변수들인 a, b, c 들은 데이터 섹션과 BSS 섹션의 위치가 확정되기 전까지 어디에 위치할 지 모르기 때문에 추후에 재배치 시켜야만 합니다. 예를 들어서 a 의 값을 읽어들이는 부분부터 봅시다.
        
           8:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # e <_ZL5func2v+0xe>
        먼저 0x0(%rip),%edx 의 어셈블리는 C 코드로 바꿔서 생각했을 때 %edx = *(int*)(%rip + 0x0) 이라고 보시면 됩니다. 즉 RIP 레지스터에다 0 만큼 더한 주소값에 있는 데이터를 읽어라 라는 의미가 됩니다.
        
        여기서 a 의 상대적 위치가 결정되지 않았기 때문에 일단 0 으로 대체되어 있습니다. 그 대신에, 만일 a 가 어디에 배치되는지 위치가 확정이 된다면,
        1.2 소문자 - 내부 링크 방식

        1.3
            B, b : 초기화 되지 않은 데이터 섹션 (BSS 섹션)
            D, d : 초기화 된 데이터 섹션
            T, t : 텍스트 (코드) 섹션
            R, r : 읽기 전용 (read only) 섹션
    
    2. 오른쪽 부분 변수 이름

    3. 왼쪽 메모리 위치

* 재배치 (Relocation)
    -> 목적 코드들은 링킹 과정 전까지 심돌들의 위치를 확정할 수 없기 때문에,
        확정 됐을 때 값을 바꿔야 할 부분들을 적어놓은 재배치 테이블(Relocation Table) 을 생성
    
    ex1)

    static int a = 3;
    int b = 3;
    static int c;

    static int func2() {
        c += a + b;
        return c;
    }

    int func3() {
        b += c;
        return b;
    }

    int func() {
        a += func2();
        a += func3();
        return a;
    }

-> objdump -r s.o -> -r은 재배치가 필요한 부분들을 보여줌 


    s.o:     file format elf64-x86-64


    Disassembly of section .text:

    0000000000000000 <_ZL5func2v>:
    static int a = 3;
    int b = 3;
    static int c;

    static int func2() {
        0:	f3 0f 1e fa          	endbr64 
        4:	55                   	push   %rbp
        5:	48 89 e5             	mov    %rsp,%rbp
        c = a + b;
        8:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # e <_ZL5func2v+0xe>
                    a: R_X86_64_PC32	.data-0x4
        e:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 14 <_ZL5func2v+0x14>
                    10: R_X86_64_PC32	b-0x4
        14:	01 d0                	add    %edx,%eax
        16:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 1c <_ZL5func2v+0x1c>
                    18: R_X86_64_PC32	.bss-0x4
        return c;
        1c:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 22 <_ZL5func2v+0x22>
                    1e: R_X86_64_PC32	.bss-0x4
    }
    22:	5d                   	pop    %rbp
    23:	c3                   	retq   

    -> a,b,c 데이터 섹션과 BSS 섹션의 위치가 확정되지 전에 재배치 를 시켜야하는 상황
    -> a 값을 읽는 부분을 보면 ->    8:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # e <_ZL5func2v+0xe>
        -> 0x0(%rip),%edx 은 c코드로 생각했을 때, -> %edx = *(int*)(%rip + 0x0) 로 보면된다.
        -> RIP 레지스터에다가 0만큼 더한 주소값에 있는 데이터를 읽어라 라는 뜻
        -> a가 상대적 위치가 결정 되지 않았기 때문에 0값
        -> R_X86_64_PC32 의 형태로 재배치 하라고 써져있기때문에 
            -> 해당 부분 4 바이트 영역을 S + A - P 을 계산한 값으로 치환 
                S : 재배치 후에 해당 심볼의 실제 위치
                P : 재배치 해야하는 부분의 위치
                A : 더해지는 값으로, 재배치 테이블에서 그 값을 확인할 수 있다.

        ->readelf으로 확인했을 때 A의 값은 -4 (Addend 부분) 나머지 부분은 링킹 후에 심볼들의 위치가 정해져야 알 수 있음
    -> int main{} 만 있는 파일을 링크 -> nm s
        -> a 는 0000000000004010 d _ZL1a -> 4010으로 위치해있다.
            -> 따라서 S는 0x4010 이 된다.
        -> func2 는 1138 에 위치해있으므로 (마찬가지로 nm 을 통해서 확인 가능)
            -> 재배치해야할 위치는 0x1138 + a 는 0x1142가 됨 -> P는 0x1142
                -> S + A - P = 0x4010 - 0x4 - 0x1142 = 0x2ECA가 됨  (소문자를 대문자로 확인해보면 맞음)

        -> 0x2eca(%rip) 의 의미는 RIP 레지스터에서 0x2ECA 만큼 떨어진 곳에 있는 곳에서 4 바이트 만큼 읽어서 EDX 레지스터에 저장
        -> 해당 명령어를 실행할 때 RIP 에는 다음에 실행할 명령어의 위치가 들어가 있으니, 0x2ECA + 0x1146 = 0x4010 에 위치한 곳의 4 바이트를 읽어들임
            -> 즉 a의 위치