# std -> c++ 표준 라이브러리의 모든 함수, 객체 등이 정의된 이름 공간(namespace)

# 이름 공간이란?
- 어떤 정의된 객체에 대해 어디 소속인지 지정해주는 것과 동일
-- 코드의 크기가 늘어남에 따라, 혹은 다른 사람들이 쓴 코드를 가져다 쓰는 경우 중복된 이름을 가진 함수들이 많아짐 -> 이를 구분하기 위해 같은 이름이라도 소속된 이름 공간이 다르면 다른 것으로 취급

# std::cout -> std라는 이름 공간에 정의되어 있는 cout을 의미
- std:: 없이 그냥 cout 이라고 한다면 컴파일러가 cout을 찾지 못함

# ex
// header1.h
namespace header1 {
    int foo();
    void bar();
}

// header2.h
namespace header2 {
    int foo();
    void bar();
}

- 자기 자신이 포함되어 있는 이름 공간 안에서는 굳이 앞에 이름 공간을 명시하지 않고 자유롭게 부를 수 있다.
-- header1 이름 공간안에서 foo를 부른다면 알아서 header1::foo()를 호출
--- header1에서 header2의 foo 호출을 하는 방식은 header1 공간 안에 header2::foo(); 

- 어떠한 이름 공간에도 소속되지 않은 경우라면 명시적으로 이름 공간을 지정해야함
-- header1::foo();

- 간편하게 header1 이란 이름 공간에 들어있는 foo만 쓴다면,
-- using header1 :: foo; 로 선언 후 함수 내부에 foo();로 호출 가능

- header1 이름 공간안에 정의된 모든 것들을 header1:: 없이 사용하고 싶다면,
-- using namespace header1; 으로 명시

# 주의 사항
using namespace std; 와 같은 어떠한 이름 공간을 사용하겠다라고 선언하는 것은 권장되지 않음. -> std에 이름이 겹치는 함수를 만들게 된다면, 오류 발생

따라서, 권장하는 방식은 using namespace std;를 사용하지 않고 std::를 직접 앞에 붙여서 std의 이름 공간 함수라고 명시해주는 것이 좋음.

