간단한 실수
#include <iostream>

class A {
 public:
  A() { std::cout << "A 의 생성자 호출!" << std::endl; }
};

int main() {
  A a();  // ?
}

-> A의 객체를 만든 것이 아닌 A를 리턴하고, 인자를 받지 않는 함수 a를 정의한 것이다.
-> A a{}; -> 생성자 호출


* 균일한 초기화
    -> 위와 같은 문제를 해결하기 해결법
    -> 생성자를 호출하기 위해 () 를 사용하는 대신 {} 를 사용

    ex1)
    #include <iostream>

    class A {
    public:
    A(int x) { std::cout << "A 의 생성자 호출!" << std::endl; }
    };

    int main() {
        A a(3.5);  // Narrow-conversion 가능
        A b{3.5};  // Narrow-conversion 불가
    }

CODE 9,10 -> () 를 이용한 생성과 {} 를 이용한 생성의 경우 한 가지 차이가 있는데 일부 암시적 타입 변환들을 불허하고 있다는 점.
    9 -> 3.5 의 정수 캐스팅이 버전이 3이 되어 전달
    10 -> double 인 3.5를 int로 변환할 수 없다는 오류 발생

    -> 중괄호 {} 를 이용햇 생성자를 호출할 경우 암시적 타입 변환들이 불가능
        -> 전부 데이터 손실이 있는 (Narrowing) 변환
            1. 부동 소수점 타입에서 정수 타입으로의 변환
            2. long double 에서 double 혹은 float 으로의 변환, double 에서 float 으로의 변환.
            3. 정수 타입에서 부동 소수점 타입으로의 변환
             등

    
    ex2)
    #include <iostream>

    class A {
    public:
    A(int x, double y) { std::cout << "A 생성자 호출" << std::endl; }
    };

    A func() {
    return {1, 2.3};  // A(1, 2.3) 과 동일
    }

    int main() { func(); }

    -> {} 를 이용해서 생성하지 않았더라면 A (1, 2.3) 과 같이 클래스를 명시해줘야만 했지만, {}를 이용할 경우 컴파일러가 알아서 함수의 리턴타입을 보고 추론


* 초기화자 리스트 (Initializer list)
    -> Initializer list 를 이용하여 컨테이너들을 간단 정리 가능

    ex1)
    #include <iostream>
    #include <map>
    #include <string>
    #include <vector>

    template <typename T>
    void print_vec(const std::vector<T>& vec) {
    std::cout << "[";
    for (const auto& e : vec) {
        std::cout << e << " ";
    }
    std::cout << "]" << std::endl;
    }

    template <typename K, typename V>
    void print_map(const std::map<K, V>& m) {
    for (const auto& kv : m) {
        std::cout << kv.first << " : " << kv.second << std::endl;
    }
    }

    int main() {
        std::vector<int> v = {1, 2, 3, 4, 5};
        print_vec(v);

        std::cout << "----------------------" << std::endl;
        std::map<std::string, int> m = {
            {"abc", 1}, {"hi", 3}, {"hello", 5}, {"c++", 2}, {"java", 6}};
        print_map(m);
    }

CODE 23 -> vector 의 원소들을 그대로 나열하면된다. 이전에 배열을 정의할 때 처럼.

CODE 27, 28 -> map의 경우도 비슷, map의 경우 vector와 다르게 pair<key, value> 원소들을 초기화자 리스트의 원소들로 받음
    -> pair 는 C++ STL에서  지원하는 간단한 클래스로 두 개의 원소를 보관하는 객체
    -> map 에는 pair 의 첫 번째 원소를 키로, 두 번째 원소로 값을 전달


* initializer_list 사용 시 주의할 점
    -> {} 를 이용해서 객체를 생성할 경우 오버로딩 시에 해당 함수가 최우선으로 고려된다는 점

    -> vector(size_type count);
        -> 생성자는 count 개수 만큼의 원소 자리를 미리 생성
    -> vector v{10};
        -> 해당 생성자를 호출? -> 그냥 원소 1개 짜리 initializer_list라고 생각해 10을 보관하고 있던 벡터를 생성
    ->  따라서 vector v(10); 를 호출하여 생성자를 호출한다




    ex1)
    #include <initializer_list>
    #include <iostream>
    #include <string>

    class A {
    public:
    A(int x, double y) { std::cout << "일반 생성자! " << std::endl; }

    A(std::initializer_list<std::string> lst) {
        std::cout << "초기화자 사용 생성자! " << std::endl;
    }
    };

    int main() {
    A a(3, 1.5);        // 일반
    A b{3, 1.5};        // 일반
    A c{"abc", "def"};  // 초기화자
    }
    
CODE 15 -> () 를 통해서 생성자를 호출하였기에 일반 생성자 호출


CODE 9 -> initializer_list 가 std::initializer_list<int> lst 라면
    CODE 16 -> {} 를 이용해서 생성자 호출 -> initializer_list를 받는 생성자를 최우선으로 고려
        -> 컴파일러는 initializer_list 를 이용하도록 노력, 1.5는 int 는 아니지만 double에서 int 로 암시적 변환을 할 수 있으므로 이를 택
            -> {} 는 데이터 손실이 있는 변환을 할 수 없음 -> 오류 발생

CODE 9 -> <std::string> 을 string으로 주면서 
    -> 원소타입으로 타입 변환 자체가 불가능하게 만들어 문제 발생을 없애준다.


* initializer_list 와 auto
    -> {} 를 이용해서 생성할 때 타입으로 auto 를 지정한다면, initializer_list 객체가 생성
        -> auto list = {1, 2, 3}; -> list는 initializer_list<int>

    -> auto 타입 추론
        1. auto x = {arg1, arg2...} 형태의 경우 arg1, arg2 ... 들이 모두 같은 타입이라면 x 는 std::initializer_list<T> 로 추론
        2. auto x {arg1, arg2, ...} 형태의 경우 만일 인자가 단 1 개라면 인자의 타입으로 추론되고, 여러 개일 경우 오류를 발생

        주의할 점 ( 문자열 다룰 때 )
        -> auto list = {"a", "b", "cc"};
            -> list 는 initializer_list<std::string> 가 아니라 
                - initializer_list<const char*>

            -> 해결법
            using namespace std::literals;  // 문자열 리터럴 연산자를 사용하기 위해
                                // 추가해줘야함.
            auto list = {"a"s, "b"s, "c"s};
            -> 와 같이 한다면 initializer_list<std::string> 으로 추론