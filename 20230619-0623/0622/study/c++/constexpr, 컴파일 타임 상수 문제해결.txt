constexpr -> 객체나 함수 앞에 붙을 수 있는 키워드로, 해당 객체나 함수의 리턴값을 컴파일 타임에 값을 알 수 있다.

상수식 (constant expression) : 컴파일러나 컴파일 타임에 어떠한 식의 값을 결정할 수 있음

정수 상수식(Integral constant expression) : 상수식들 중에서 값이 정수

ex)
int arr[size];
-> 배열 선언식이 컴파일 되기 위해서는 size 가 정수 상수식

template <int N>
struct A {
  int operator()() { return N; }
};
A<number> a;
-> 템플릿 타입 인자의 경우도 마찬가지로 number 가 정수 상수식

enum A { a = number, b, c };
-> enum 에서 값을 지정해줄 때에 오는 number 역시 정수 상수식


* constexpr
    -> 어떠한 식이 상수식 이라고 명시해주는 키워드
    -> 객체의 정의에 constexpr이 오게 된다면, 해당 객체는 어떠한 상수식에도 사용 될 수 있다.


    ex1)
    #include <iostream>

    template <int N>
    struct A {
    int operator()() { return N; }
    };

    int main() {
    constexpr int size = 3;
    int arr[size];  // Good!

    constexpr int N = 10;
    A<N> a;  // Good!
    std::cout << a() << std::endl;

    constexpr int number = 3;
    enum B { x = number, y, z };  // Good!
    std::cout << B::x << std::endl;
    }

    -> constexpr 은 const와 비슷하게 정의된 변수들도 상수이미르로 수정할 수 없다.


* constexpr vs const
    -> const로 정의된 상수들은 굳이 컴파일 타임에 그 값을 알 필요가 없다.

    ex1)
    int a;

    // Do something...

    const int b = a;
-> b의 값을 컴파일 타임에 알 수는 없지만, b의 값을 지정해주면 바꿀 수없다는 점.

    ex2)
    int a;

    // Do something...

    constexpr int b = a;  // ??
-> constexpr 변수의 경우 반드시 오른쪽에 다른 상수식이 와야함.
    -> 하지만 컴파일러 입장에서 컴파일 타임 시에 a가 뭐가 올 지 알 수 없음
    -> constexpr 은 항상 const 이지만, const 는 constexpr 가 아님.!

    -> 컴파일 타임에 상수를 확실히 사용하고 싶다면 constexpr 키워드를 사용


* constexpr 함수
    -> constexpr로 객체를 선언한다면 해당 객체는 컴파일 상수로 정의
        -> 원래는 컴파일 상수인 객체를 만드는 함수를 작성하는 것이 불가


    ex1)
    #include <iostream>
    template <int N>
    struct Factorial {
    static const int value = N * Factorial<N - 1>::value;
    };

    template <>
    struct Factorial<0> {
    static const int value = 1;
    };

    template <int N>
    struct A {
    int operator()() { return N; }
    };

    int main() {
        // 컴파일 타임에 값이 결정되므로 템플릿 인자로 사용 가능!
        A<Factorial<10>::value> a;

        std::cout << a() << std::endl;
    }

CODE 3 ~ 11 -> N 부터 1 까지의 곱을 TMP의 형태로 수행

CODE 20 -> Factorial 클래스를 통해 계산한 10!(3628800) 의 값을 사용해 배열을 정의할 수도 있다.
    -> A<3628800> a 와 동일


    ex2) 함수의 리턴 타입에 constexpr 을 추가하면 조건이 맞을 떼, 해당 함수의 리턴값을 컴파일 타임 상수로 만듦

    #include <iostream>

    constexpr int Factorial(int n) {
    int total = 1;
    for (int i = 1; i <= n; i++) {
        total *= i;
    }
    return total;
    }

    template <int N>
    struct A {
    int operator()() { return N; }
    };

    int main() {
        A<Factorial(10)> a;

        std::cout << a() << std::endl;
    }

CODE 3 ~ 9 -> C++14 부터 constexpr의 제약 조건들(함수 내부에서 변수 정의 X, return 문 하나 등) 개선
    1. goto 문 사용
    2. 예외 처리 (try 문; C++ 20 부터 가능하게 바뀌었습니다.)
    3. 리터럴 타입이 아닌 변수의 정의
    4. 초기화 되지 않는 변수의 정의
    5. 실행 중간에 constexpr 이 아닌 함수를 호출하게 됨

    5 가지를 하지 않는 이상 constexpr 사용 가능

    예를들어

    int not_constexpr(int x) { return x++; }
    constexpr int Factorial(int n) {
    int total = 1;
    for (int i = 1; i <= n; i++) {
        total *= i;
    }

    not_constexpr(total);
    return total;
    }

-> 5번의 경우 함수 내부에서 다른 일반 함수를 호출했을 때의 오류 코드



    ex3)
    #include <iostream>

    constexpr int Factorial(int n) {
    int total = 1;
    for (int i = 1; i <= n; i++) {
        total *= i;
    }
    return total;
    }

    int main() {
    int num;
    std::cin >> num;
    std::cout << Factorial(num) << std::endl;
    }

-> A<Factorial(10)> a; 라면, 컴파일 타임 상수 값을 전달함으로 템플릿 인자로 전달 할 수 있다.
    -> 즉,
        constexpr int ten = 10;
        A<Factorial(ten)> a;
        동작할 수 있지만, constexpr 함수에 인자로 컴파일 타임 상수가 아닌 값을 전달하였다면 그냥 일반 함수처럼 동작



* 리터럴 타입
    -> 리터럴 타입은 쉽게 생각하면 컴파일러가 컴파일 타임에 정의할 수 있는 타입

    1. void 형
    2. 스칼라 타입 (char, int, bool, long, float, double ) 등
    3. 레퍼런스 타입
    4. 리터럴 타입의 배열
    5. 디폴트 소멸자를 가지고
        5.1 람다 함수
        5.2 Arggregate 타입 (사용자 정의 생성자, 소멸자가 없으며 모든 데이터 멤버들이 public) -> pair
        5.3 constexpr 생성자를 가지며, 복사 및 이동 생성자가 없음
    -> 들을 리터럴 타입이라 의미하며, constexpr로 선언되던지, constexpr 함수 내부에서 사용될 수 있다.


* constexpr 생성자
    -> constexpr 생성자의 인자들은 반드시 리터럴 타입, 해당 클래스는 다른 클래스를 가상 상속 받을 수 없다.

    ex1)
    class Vector {
    public:
    constexpr Vector(int x, int y) : x_(x), y_(y) {}

    constexpr int x() const { return x_; }
    constexpr int y() const { return y_; }

    private:
    int x_;
    int y_;
    };

    ->vector 클래스는 벡터를 나타내는 클래스(std::vector 아님) -> Vector의 생성자는 리터럴인 int 두 개를 인자
    -> 적합한 constexpr 생성자

CODE 5 ~ 6 -> 두 멤버 변수를 접근하는 함수 역시 constexpr 로 정의
    -> x(), y() constexpr 함수 내부에서 사용할 수 있게 됨.

    ex2)
    #include <iostream>

    class Vector {
    public:
    constexpr Vector(int x, int y) : x_(x), y_(y) {}

    constexpr int x() const { return x_; }
    constexpr int y() const { return y_; }

    private:
    int x_;
    int y_;
    };

    constexpr Vector AddVec(const Vector& v1, const Vector& v2) {
    return {v1.x() + v2.x(), v1.y() + v2.y()};
    }

    template <int N>
    struct A {
    int operator()() { return N; }
    };

    int main() {
        constexpr Vector v1{1, 2};
        constexpr Vector v2{2, 3};

        // constexpr 객체의 constexpr 멤버 함수는 역시 constexpr!
        A<v1.x()> a;
        std::cout << a() << std::endl;

        // AddVec 역시 constexpr 을 리턴한다.
        A<AddVec(v1, v2).x()> b; //x 끼리 더하기, y끼리 더하기
        std::cout << b() << std::endl;
    }

CODE 25 ~ 26 -> vector 를 constexpr로 선언할 수 있다. -> constexpr로 생성자를 만들었기 때문

CODE 29 -> v1의 constexpr 멤버 함수인 x를 호출하였는데, x역시 constexpr 함수이므로
            -> 결국 A<1> a 와 다름이 없게 됨.
            -> v1이나 x가 하나라도 constexpr 가 아니라면 -> 컴파일 X
                -> 즉, constexpr 객체의 constexpr멤버 함수만 constexpr을 줌

CODE 33 -> v1, v2 를 인자로 받아서 constexpr객체를 리턴.
    -> AddVec 이 constexpr 함수 이고, vector가 리터럴 타입이여서.


* if constexpr
    -> 타입에 따라 형태가 달라지는 함수를 짜고 싶다면?
        -> get_value 라는 함수가 있는데, 함수는 인자가 포인터 타입이면 *을 한 것을 리턴하고 아니면 원래의 인자를 리턴하는 함수.

    -> 원래 템플릿 타입 유추를 하면 -> 여러가지의 인자를 다르게 오버로딩 만들어야했다.


# c++ 표준 라이브러리에서 <type_traits> 에서 여러 템플릿중 타입이 포인터인지 아닌지 확인할 수 있다.
    void show_value(int t) {
        if (std::is_pointer<int>::value) {
            std::cout << "포인터 이다 : " << *t << std::endl;
        } else {
            std::cout << "포인터가 아니다 : " << t << std::endl;
        }
    }

    -> if (std::is_pointer<T>::value) { -> 부분에서 전달한 인자가 T가 포인터면 value가 true, 포인터가 아니면 false 인 템플릿 메타함수
        -> T가 포인터라면 *t를 출력, 아니면 t가 출력

        -> 하지만 템플릿이 인스턴스화 되면서 생성되는 코드에 컴파일이 불가능
            -> if constexpr 도입하면 문제해결
            -> if constexpr (std::is_pointer<T>::value) {
        
    -> if constexpr 의 조건이 반드시 bool 타입 변환 될 수 있어야하는 컴파일 타입 상수식이어야한다.
        -> if constexpr 이 참이면, else에 해당하는 문장은 (무시) 컴파일 되지 않고
        -> if constexpr 이 거짓이라면, else 에 해당하는 부분만 컴파일이
        
    -> 따라서 if constexpr (std::is_pointer<T>::value) { 부분은 거짓이므로 아예
        -> * t 자체가 컴파일 되지 않음.

        -> std::is_pointer<T>::value -> std::is_pointer_v<T> 만 사용해도됨.
            -> template <class T>
               inline constexpr bool is_pointer_v = is_pointer<T>::value;


    ex1) 결과함수
    template <typename T>
    void show_value(T t) {
    if constexpr (std::is_pointer_v<T>) {
        std::cout << "포인터 이다 : " << *t << std::endl;
    } else {
        std::cout << "포인터가 아니다 : " << t << std::endl;
    }
    }
