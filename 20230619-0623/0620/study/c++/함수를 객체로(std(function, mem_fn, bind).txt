* Callable - 호출 가능한 모든 것을 포괄해서 나타냄
    -> () 를 붙여서 호출할 수 있는 모든것

    ex1)
    #include <iostream>

    struct S {
        void operator()(int a, int b) { std::cout << "a + b = " << a + b << std::endl; }
    };

    int main() {
        S some_obj;

        some_obj(3, 5);
    }
    -> some_obj 클래스 S의 객체 -> 함수처럼 ()를 이용해서 호출 할 수 있다.
        -> some_obj.operator()(3, 5)

    ex2) 람다 함수 
    #include <iostream>

    int main() {
        auto f = [](int a, int b) { std::cout << "a + b = " << a + b << std::endl; };
        f(3, 5);
    }
    -> 일반적인 함수 꼴을 하고 있지 않지만 -> () 을 호출할 수 있기에 Callable이라 부름

* std::function
    -> Callable들을 객체 형태로 보관할 수 있는 std::function 클래스 제공

    ex1)
    #include <functional>
    #include <iostream>
    #include <string>

    int some_func1(const std::string& a) {
    std::cout << "Func1 호출! " << a << std::endl;
    return 0;
    }

    struct S {
        void operator()(char c) { std::cout << "Func2 호출! " << c << std::endl; }
    };

    int main() {
        std::function<int(const std::string&)> f1 = some_func1;
        std::function<void(char)> f2 = S();
        std::function<void()> f3 = []() { std::cout << "Func3 호출! " << std::endl; };

        f1("hello");
        f2('c');
        f3();
    }

CODE 46 ~ 48 -> function 객체를 정의하는 부분
    1. some_func1 : int를 리턴, 인자로 const string& 를 맞기에 -> std::function<int(const string&)> 의 형태로 정의
    2. functor 클래스 s의 객체 : S의 객체로 전달해도 마치 함수 처럼 -> s의 경우 operator() 가 인자로 char 받고 리턴 타입 void -> std::function<void(char)> 의 꼴로 표현
    3. 람다 함수 : std::function<void()> 로 정의


* 멤버 함수를 가지는 std::function
    -> 멤버 함수 내에서 this의 경우 자신을 호출한 객체를 의미 -> function에넣게되면 this는 알 수 없는 문제 발생

    ex1) 오류 문제 예시
    #include <functional>
    #include <iostream>
    #include <string>

    class A {
    int c;

    public:
    A(int c) : c(c) {}
    int some_func() { std::cout << "내부 데이터 : " << c << std::endl; }
    };

    int main() {
    A a(5);
    std::function<int()> f1 = a.some_func;
    }
    -> f1을 호출 했을 때, 함수 입장에서 자신을 호출하는 객체가 무엇인지 알 수 없는 c를 참고 했을 때, 오류 발생 -> 즉 f1에 a에 관한 정보도 추가로 전달

    ex2) 올바른 예시
    #include <functional>
    #include <iostream>
    #include <string>

    class A {
    int c;

    public:
    A(int c) : c(c) {}
    int some_func() {
        std::cout << "비상수 함수: " << ++c << std::endl;
        return c;
    }

    int some_const_function() const {
        std::cout << "상수 함수: " << c << std::endl;
        return c;
    }

    static void st() {}
    };

    int main() {
        A a(5);
        std::function<int(A&)> f1 = &A::some_func;
        std::function<int(const A&)> f2 = &A::some_const_function;

        f1(a);
        f2(a);
    }

CODE 25 ~ 26 -> 추가적으로 객체를 받는 인자를 전달, 상수 함수의 경우 당연히 상수 형태로 인자를 받으면 됨. (A&, const A&)
    -> &A::some_func와 다르게 함수의 이름 만으로는 주소값을 전달할 수 없음 -> 멤머 함수가 아닌 모든 함수들의 경우 함수의 이름이 함수의 주소값으로 암시적으로 변환이 일어나지만
        -> 멤버 함수들의 경우 암시적 변환이 발생하지 않으므로, & 연산자를 통해 명시적으로 주소값을 전달해줘야함.
            -> f1(a);, f2(a); 와 같은 형식으로 효과를 나타낼 수 있다.


* 멤버 함수들을 함수 객체로 - mem_fn
    
    ex1) vector 들을 가지는 vector가 있을 때, 각각의 vector 들의 크기들을 벡터로 만들어주는 코드
    #include <algorithm>
    #include <functional>
    #include <iostream>
    #include <vector>
    using std::vector;

    int main() {
        vector<int> a(1);
        vector<int> b(2);
        vector<int> c(3);
        vector<int> d(4);

        vector<vector<int>> container;
        container.push_back(a);
        container.push_back(b);
        container.push_back(c);
        container.push_back(d);

        std::function<size_t(const vector<int>&)> sz_func = &vector<int>::size;

        vector<int> size_vec(4);
        std::transform(container.begin(), container.end(), size_vec.begin(), sz_func); // 이전엔 &vector<int>::size 였음 -> sz_func
        for (auto itr = size_vec.begin(); itr != size_vec.end(); ++itr) {
            std::cout << "벡터 크기 :: " << *itr << std::endl;
        }
    }

CODE 22 -> transform 함수는 <algorithm> 라이브러리에 있는 함수 -> 각 원소들에 대해 인자로 전달된 함수를 실행시킨다음 그 결과를 전달된 컨테이너에 넣어줌.
    -> 해당 함수를 호출 할 때 템플릿을 보게 되면 -> unary_op -> 멤버 함수이기에 컴파일 오류 발생
        -> 템플릿 내부에  *__result = __unary_op(*__first); 전달된 size 함수가 멤버함수여서 발생하는 문제
        -> &vector<int>::size 가 들어간다면 해당 unary_op 호출하는 부분은 다음 과 같이 변환
            -> unary_op(*first1); -> &vector<int>::size(*first); 꼴로 되는데
                -> 멤머 함수의 경우
                    1. (*first).(*&vector<int>::size)
                    2. first->(*&vector<int>::size)
                -> 와 같이 호출 하므로 이를 위해서는 제대로 std::function으로 변환해서 전달

CODE 19 -> ex1 을 std::function으로 변환하여 전달 


--> mem_fn 이용, CODE 19 지우기
    - transform(container.begin(), container.end(), size_vec.begin(), std::mem_fn(&vector<int>::size));
    -> mem_fn 함수를 그대로 사용하여 functino의 객체를 리턴할 수있다.
    -> 람다함수로도 동일한 작업을 할 수 있다.
        -> mem_fn(&vector<int>::size) -> [](const auto& v){ return v.size()}
        -> 동일한 작업이다.
    -> mem_fn은 <functional> 헤더를 추가해야하고, 람다는 그냥 쓸 수 있다.


* std::bind
    -> 함수 객체 생성 시에 인자를 특정한 것으로 지정 할 수 있다.

    ex1)
    #include <functional>
    #include <iostream>

    void add(int x, int y) {
    std::cout << x << " + " << y << " = " << x + y << std::endl;
    }

    void subtract(int x, int y) {
    std::cout << x << " - " << y << " = " << x - y << std::endl;
    }
    int main() {
    auto add_with_2 = std::bind(add, 2, std::placeholders::_1);
    add_with_2(3);

    // 두 번째 인자는 무시된다.
    add_with_2(3, 4);

    auto subtract_from_2 = std::bind(subtract, std::placeholders::_1, 2);
    auto negate = std::bind(subtract, std::placeholders::_2, std::placeholders::_1);

    subtract_from_2(3);  // 3 - 2 를 계산한다.
    negate(4, 2);        // 2 - 4 를 계산한다
    }

CODE 12 ~ 23 
    12 -> add라는 함수에 첫 번째 인자로 2를 bind 시켜주고, 두 번째 인자는 새롭게 만들어진 함수 객체의 첫 번째 인자를 전달해줌.
    13 -> add_with_2(3); 라고 했다면, 원래 add 함수의 첫 번째 인자로는 2, 두번째 인자로는 3

    16 -> 인자를 여러개 전달하고 뒤에 것들은 무시된다.

    19 -> negate 함수는 첫 번째 인자와 두 번째 인자의 순서를 바꿔 subtract 함수를 호출
        -> 즉, negate(3, 5) 를 호출할 경우 실제로 subtract(5, 3 ) 이 호출 됨.
        -> std::placeholders의 _1, _2 는 일일 정의된 객체들 -> 라이브러리마다 개수가 다름 -> libstrdc++(_1~_29)


    ex2) 레퍼런스를 인자로 받는 함수들의 경우 주소
    #include <functional>
    #include <iostream>

    struct S {
    int data;
    S(int data) : data(data) { std::cout << "일반 생성자 호출!" << std::endl; }
    S(const S& s) {
        std::cout << "복사 생성자 호출!" << std::endl;
        data = s.data;
    }

    S(S&& s) {
        std::cout << "이동 생성자 호출!" << std::endl;
        data = s.data;
    }
    };

    void do_something(S& s1, const S& s2) { s1.data = s2.data + 3; }

    int main() {
    S s1(1), s2(2);

    std::cout << "Before : " << s1.data << std::endl;

    // s1 이 그대로 전달된 것이 아니라 s1 의 복사본이 전달됨!
    // auto do_something_with_s1 = std::bind(do_something, s1, std::placeholders::_1);
    auto do_something_with_s1 =std::bind(do_something, std::ref(s1), std::placeholders::_1);
    do_something_with_s1(s2);

    std::cout << "After :: " << s1.data << std::endl;
    }

CODE 26 -> 첫 번째 인자의 data를 두 번째 인자의 data+3으로 만들어었지만 -> do_something_with_s1 실행했을 때 첫번 째인자로 s1의 data가 바뀌지않음
    -> bind함수로 인자가 복사 되어 전달되었기 때문 -> 명시적으로 s1의 레퍼런스 전달

CODE 27 -> ref 함수는 전달받는 인자를 복사 가능한 레퍼런스로 변환, (const 레퍼런스 -> cref) 