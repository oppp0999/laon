* 동기 (synchronous) 와 비동기 (asynchronous) 실행
    동기적 : 순차적으로 한 번에 하나씩 실행되는 작업
    비동기적 : 프로그램의 실행이, 한 갈래가 아닌 여러 갈래로 갈라져서 동시에 실행되는 것.

* std::promise 와 std::future
    -> 비동기적 실행 이유 -> 어떠한 데이터를 다른 쓰레드를 통해 처리해서 받아내는 것
    -> 어떤 쓰레드 T를 사용해, 비동기적으로 값을 받아내겠다 의미 -> 미래에 (future) 쓰레드 T가 원하는 데이터를 돌려 주겠다 라는 약속 (promise) 라고 봄

    ex1)
    #include <future>
    #include <iostream>
    #include <string>
    #include <thread>
    using std::string;

    void worker(std::promise<string>* p) {
    // 약속을 이행하는 모습. 해당 결과는 future 에 들어간다.
    p->set_value("some data");
    }
    int main() {
    std::promise<string> p;

    // 미래에 string 데이터를 돌려 주겠다는 약속.
    std::future<string> data = p.get_future();

    std::thread t(worker, &p);

    // 미래에 약속된 데이터를 받을 때 까지 기다린다.
    data.wait();

    // wait 이 리턴했다는 뜻이 future 에 데이터가 준비되었다는 의미.
    // 참고로 wait 없이 그냥 get 해도 wait 한 것과 같다.
    std::cout << "받은 데이 터 : " << data.get() << std::endl;

    t.join();
    }
-> 출력 some data

CODE 12 -> promise 객체를 정의할 때, 연산을 수행 후에 돌려줄 객체의 타입을 템플릿 인자로 받음
    -> string 객체를 돌려줄 예정이므로 string 을 전달
    -> 연산이 끝난 다음 promise 객체는 자신이 가지고 있는 future 객체에 값을 넣어주게 됨.

CODE 15 -> promise 객체에 대응되는 future 객체를 get_future 함수를 통해 얻을 수 있음
    -> data 실제 연산 결과를 포함하고 있지는 않음

CODE 7 ~ 9 -> data가 실제 결과를 포함하기 위해서 -> promise 객체가 자신의 future 객체에 데이터를 제공한 후

CODE 20 ~ 24 -> 대응되는 future 객체의 get 함수를 통해 data 값을 얻어낼 수 있다.
    ->promise가 future에 값을 전달하기 전까지 wait 함수가 기다린다는 점, wait 함수가 리턴을 하였다면 get을 통해 future 에 전달된 객체를 얻을 수 있다.

    -> 참고 - wait 하지 않아도 get 함수를 바로 호출ㄹ하면 알아서 기다린 다음 리턴 -> get을 재호출하면 future값이 이동돼서 주의!

    -> promise 는 생성자-소비자 패턴에서 마치 생산자(producer) 의 역할, future는 소비자 (consumer) 의 역할을 수행

    ex2)promise - future
   #include <exception>
    #include <future>
    #include <iostream>
    #include <string>
    #include <thread>
    using std::string;

    void worker(std::promise<string>* p) {
    try {
        throw std::runtime_error("Some Error!");
    } catch (...) {
        // set_exception 에는 exception_ptr 를 전달해야 한다.
        p->set_exception(std::current_exception());
    }
    }
    int main() {
    std::promise<string> p;

    // 미래에 string 데이터를 돌려 주겠다는 약속.
    std::future<string> data = p.get_future();

    std::thread t(worker, &p);

    // 미래에 약속된 데이터를 받을 때 까지 기다린다.
    data.wait();

    try {
        data.get();
    } catch (const std::exception& e) {
        std::cout << "예외 : " << e.what() << std::endl;
    }
    t.join();
    }

CODE 13 -> set_exception에는 예외 객체가 아니라 exception_ptr를 전달
    -> exception_ptr 은 catch 로 받은 예외 객체의 포인터가 아니라, 현재 catch 된 예외에 관한 정보를 반환하는 current_exception 함수가 리턴하는 객체

    -> 물론, catch 로 전달받은 예외 객체를 make_exception_ptr 함수를 사용해 exception_ptr로 만들 수 있다.
        -> 하지만 그냥 current_exception 호출하는 것이 더욱 간단.

CODE 9 ~ 14 -> get 함수를 호출했을 때, 실제로 future 에 전달된 예외 객체가 던져지고, 마치 try와 catch 문을 사용한 것처럼 예외 처리