* 뮤텍스 
    counter += 1; -> 근본적인 문제? -> 여러 쓰레드에서 동시에 실행시켜서.

    ex1)
    #include <iostream>
    #include <mutex>  // mutex 를 사용하기 위해 필요
    #include <thread>
    #include <vector>

    void worker(int& result, std::mutex& m) {
        for (int i = 0; i < 10000; i++) {
            m.lock();
            result += 1;
            m.unlock();
        }
    }

    int main() {
        int counter = 0;
        std::mutex m;  // 우리의 mutex 객체

        std::vector<std::thread> workers;
        for (int i = 0; i < 4; i++) {
            workers.push_back(std::thread(worker, std::ref(counter), std::ref(m)));
        }

        for (int i = 0; i < 4; i++) {
            workers[i].join();
        }

        std::cout << "Counter 최종 값 : " << counter << std::endl;
    }
-> counter 최종 값 : 40000

CODE 16 -> 뮤텍스의 객체 정의 -> 상호 배제라는 단어

CODE 6 ~ 12 -> 뮤텍스를 쓰레드에서 사용하기 위해서 전달받아 사용하는 함수이다.
    8 -> 뮤텍스 m을 내가 쓰게 달라! 라는 뜻으로 -> 한 번에 한 쓰레드에서만 m의 사용 권한을 갖는 것
    10 -> 다른 쓰레드에서 m.lock()을 한 뒤에 m을 소유한 쓰레드가 m.unlock()을 통해 m을 반환할 때 까지 무한정 기다림.
        -> 즉, 많은 쓰레드들이 다른 코어에서 돌아가도 result += 1; 은 한 쓰레드에서 유일하게 실행
    -> m.lock() 과 m.unlock() 사이에 한 쓰레드만이 유일하게 실행할 수 있는 코드 부분을 임계 영역(critical section) 

    -> m.lock만 하고 m.unlock()을 하지 않았다? -> 아무 쓰레드도 연산 진행 못함 -> 데드락(deadlock)
        -> 반드시 반환하기!
        -> unique_ptr과 비슷한 결 -> unique_ptr을 사용한 후에는 소멸자자에서 처리하도록 했었음
            -> mutex도 동일하게 소멸자에서 처리 가능

            ex1)
            #include <iostream>
            #include <mutex>  // mutex 를 사용하기 위해 필요
            #include <thread>
            #include <vector>

            void worker(int& result, std::mutex& m) {
            for (int i = 0; i < 10000; i++) {
                // lock 생성 시에 m.lock() 을 실행한다고 보면 된다.
                std::lock_guard<std::mutex> lock(m);
                result += 1;

                // scope 를 빠져 나가면 lock 이 소멸되면서
                // m 을 알아서 unlock 한다.
            }
            }

            int main() {
                int counter = 0;
                std::mutex m;  // 우리의 mutex 객체

                std::vector<std::thread> workers;
                for (int i = 0; i < 4; i++) {
                    workers.push_back(std::thread(worker, std::ref(counter), std::ref(m)));
                }

                for (int i = 0; i < 4; i++) {
                    workers[i].join();
                }

                std::cout << "Counter 최종 값 : " << counter << std::endl;
            }
            
            CODE 9 -> lock_guard 개겣는 뮤텍스를 인자로 받아 생성 -> 생성자에서 뮤텍스를 lock
                -> lock_guard 가 소멸될 때 알아서 lock 했던 뮤텍스를 unlock하게 됨.



* 데드락 (deadlock)

    ex1) 서로 lock 된 상태
    #include <iostream>
    #include <mutex>  // mutex 를 사용하기 위해 필요
    #include <thread>

    void worker1(std::mutex& m1, std::mutex& m2) {
    for (int i = 0; i < 10000; i++) {
        std::lock_guard<std::mutex> lock1(m1);
        std::lock_guard<std::mutex> lock2(m2);
        // Do something
    }
    }

    void worker2(std::mutex& m1, std::mutex& m2) {
    for (int i = 0; i < 10000; i++) {
        std::lock_guard<std::mutex> lock2(m2);
        std::lock_guard<std::mutex> lock1(m1);
        // Do something
    }
    }

    int main() {
        int counter = 0;
        std::mutex m1, m2;  // 우리의 mutex 객체

        std::thread t1(worker1, std::ref(m1), std::ref(m2));
        std::thread t2(worker2, std::ref(m1), std::ref(m2));

        t1.join();
        t2.join();

        std::cout << "끝!" << std::endl;
    }

CODE 7 ~ 8, 15 ~ 16 -> worker1 에서 m1을 먼저 lock 한 후에 m2를 lock
    -> worker2에서 m2를 먼저 lock 한 후 m1을 lock
    -> 서로 lock하고 있는 상태라 다음 m2나 m1을 lock 하기 위해서는 다른 쓰레드에서 unlock을 진행해야함. -> 데드락 발생

    -> 이를 해결 하기 위한 기아 상태(starvation) 발생 -> 쓰레드가 다른 쓰레드에 비해 우위를 갖게 된다면 한 쓰레드만 일, 다른 쓰레드는 쉬는 상태



    ex2) 해결 코드
    #include <iostream>
    #include <mutex>  // mutex 를 사용하기 위해 필요
    #include <thread>

    void worker1(std::mutex& m1, std::mutex& m2) {
    for (int i = 0; i < 10; i++) {
        m1.lock();
        m2.lock();
        std::cout << "Worker1 Hi! " << i << std::endl;

        m2.unlock();
        m1.unlock();
    }
    }

    void worker2(std::mutex& m1, std::mutex& m2) {
    for (int i = 0; i < 10; i++) {
        while (true) {
        m2.lock();

        // m1 이 이미 lock 되어 있다면 "야 차 빼" 를 수행하게 된다.
        if (!m1.try_lock()) {
            m2.unlock();
            continue;
        }

        std::cout << "Worker2 Hi! " << i << std::endl;
        m1.unlock();
        m2.unlock();
        break;
        }
    }
    }

    int main() {
        std::mutex m1, m2;  // 우리의 mutex 객체

        std::thread t1(worker1, std::ref(m1), std::ref(m2));
        std::thread t2(worker2, std::ref(m1), std::ref(m2));

        t1.join();
        t2.join();

        std::cout << "끝!" << std::endl;
    }

CODE 22 ~ 25 -> worker2에서 낮은 순위를 가진 부분을 구현하여 -> worker1이 우선 순위를 가지게 된다.
    -> try_lock 함수 -> m1을 lock 할 수 있다면 lock 을하고 true 리턴 
        -> lock함수와 다르게 lock 할 수 없다면 기다리지 않고 그냥 false 를 리턴
    -> 따라서
        1. 따라서 m1.try_lock() 이 true 를 리턴하였다면 worker2 가 m1 과 m2 를 성공적으로 lock 한 상황이므로 (교차로에 노란차만 있는 상황) 그대로 처리
        2. m1.try_lock() 이 false 를 리턴하였다면 worker1 이 이미 m1 을 lock 했다는 의미, 이 경우 worker1 에서 우선권을 줘야 하기 때문에 자신이 이미 얻은 m2 역시 worker1 에게 제공

    -> worker2에서 성공적으로 lock을 하기 위해 무한 시도하여 성공하면 while을 빠져나감.

-> 데드락은 완벽하게 해결 할 수 있는 방법이 없기에 코드를 짤 때 설계를 신경써야함.!

# 가이드라인
    1. 중첩된 Lock 을 사용하는 것을 피해라
        - 모든 쓰레드들이 최대 1개의 lock만을 소유한다면 데드락 상황을 피할 수 있다. -> lock을 한다면 정팔 필요한지 ? 물어보기

    2. Lock 을 소유하고 있을 때 유저 코드를 호출하는 것을 피해라
        - 유저 코드서 lock을 소유할 수도 있기에 중첩된 lock을 얻는 것을 피하려면 lock 소유시 유저 코드를 호출하는 것을 지양.

    3. Lock 들을 언제나 정해진 순서로 획득해라
        - 여러 개의 lock을 획득해야 할 상황이 온다면, 반드시 이 lock들을 정해진 순서로 획득


* 생산자(Producer) 와 소비자(Consumer) 패턴
    -> 생성자 - 무언가 처리할 일을 받아오는 쓰레드
    -> 소비자 - 받은 일을 처리하는 쓰레드를 의미

    ex1)
    #include <chrono>  // std::chrono::miliseconds
    #include <iostream>
    #include <mutex>
    #include <queue>
    #include <string>
    #include <thread>
    #include <vector>

    void producer(std::queue<std::string>* downloaded_pages, std::mutex* m,
                int index) {
    for (int i = 0; i < 5; i++) {
        // 웹사이트를 다운로드 하는데 걸리는 시간이라 생각하면 된다.
        // 각 쓰레드 별로 다운로드 하는데 걸리는 시간이 다르다.
        std::this_thread::sleep_for(std::chrono::milliseconds(100 * index));
        std::string content = "웹사이트 : " + std::to_string(i) + " from thread(" +
                            std::to_string(index) + ")\n";

        // data 는 쓰레드 사이에서 공유되므로 critical section 에 넣어야 한다.
        m->lock();
        downloaded_pages->push(content);
        m->unlock();
    }
    }

    void consumer(std::queue<std::string>* downloaded_pages, std::mutex* m,
                int* num_processed) {
    // 전체 처리하는 페이지 개수가 5 * 5 = 25 개.
    while (*num_processed < 25) {
        m->lock();
        // 만일 현재 다운로드한 페이지가 없다면 다시 대기.
        if (downloaded_pages->empty()) {
        m->unlock();  // (Quiz) 여기서 unlock 을 안한다면 어떻게 될까요?

        // 10 밀리초 뒤에 다시 확인한다.
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
        continue;
        }

        // 맨 앞의 페이지를 읽고 대기 목록에서 제거한다.
        std::string content = downloaded_pages->front();
        downloaded_pages->pop();

        (*num_processed)++;
        m->unlock();

        // content 를 처리한다.
        std::cout << content;
        std::this_thread::sleep_for(std::chrono::milliseconds(80));
    }
    }

    int main() {
        // 현재 다운로드한 페이지들 리스트로, 아직 처리되지 않은 것들이다.
        std::queue<std::string> downloaded_pages;
        std::mutex m;

        std::vector<std::thread> producers;
        for (int i = 0; i < 5; i++) {
            producers.push_back(std::thread(producer, &downloaded_pages, &m, i + 1));
        }

        int num_processed = 0;
        std::vector<std::thread> consumers;
        for (int i = 0; i < 3; i++) {
            consumers.push_back(
                std::thread(consumer, &downloaded_pages, &m, &num_processed));
        }

        for (int i = 0; i < 5; i++) {
            producers[i].join();
        }
        for (int i = 0; i < 3; i++) {
            consumers[i].join();
        }
    }

CODE 54 -> producer 쓰레드에서는 웹사이트에서 페이지를 계속 다운로드 하는 역할을 함.
    -> 다운로드한 페이지들은 downloaded_pages 라는 큐에 저장
    -> 큐를 사용하는 이유? -> FIFO 특성
        -> 벡터도 상관없는데 속도 차이가 남

CODE 9 ~ 23
    14 -> 함수는 인자로 전달된 시간 만큼 쓰레드를 sleep 시키는데, 이때 해당 인자로 chrono의 시간 객체를 받게 됨.
        -> chrono는 시간 관련 라이브러리로 time.h 보다 훨씬 편리한 기능을 제공
        -> 100 * index 채우기 위해 -> std::chrono::milliseconds(100 * index) 같이 전달
    15 -> 다운 받은 웹사이트 내용, 다운 받은 페이지를 작업 큐에 집어 넣어야함. -> producer 쓰레드가 1개가 아닌 5개나 있다는 점 -> downloaded_pages 에 접근하는 쓰레드들 사이에 race condition이 발생
    19 ~ 21 -> 뮤텍스 m으로 감싸 문제를 발생하지 않게 함.
        -> cpu에 비해 downloaded_pages가 큐에 추가되는 속도가 매우 느림

CODE 25 ~ 50
    29 ~ 37 -> while 을 통해 downloaded_pages가 비어있지 않을 때까지 루플를 도는데
        -> downloaded_pages-> empty() 수십 만 번 호출 할 수 있음 -> cpu 낭비
            -> 그래서 강제로 쓰레드를 sleep 시킨다.
        32 -> m->unlock() 을 if문에서 하지 않는다면 데드락이 발생

    40 ~ 48 -> fornt를 통해서 맨 앞의 원소를 얻은 뒤에 pop을 호출하면 맨 앞의 원소를 큐에서 제거하게 됨.
        -> m->unlock() 함으로써 다른 쓰레드에서 다음 원소를 바로 처리할 수 있다.

    -> consumer 쓰레드가 10밀리초 마다 할 일을 체크하는 비효율을 줄이기 위해서
        -> producer에서 데이터가 느리게 오는 걸 안다면 consumer를 아예 재워놓고, consumer를 깨우는 방식


* condition_variable
    -> 어떠한 조건을 만족할 때 까지 쓰레드를 재웠다 깨웠다하는 방식도 비효율
        -> downloaded_pages 가 empty() 가 참이 아닐 때 까지 자라 -> 차라리 나은 방법
    -> 이는 조건 변수 (condition variable) 을 통해 해결

    ex1)
    #include <chrono>              // std::chrono::miliseconds
    #include <condition_variable>  // std::condition_variable
    #include <iostream>
    #include <mutex>
    #include <queue>
    #include <string>
    #include <thread>
    #include <vector>

    void producer(std::queue<std::string>* downloaded_pages, std::mutex* m,
                int index, std::condition_variable* cv) {
    for (int i = 0; i < 5; i++) {
        // 웹사이트를 다운로드 하는데 걸리는 시간이라 생각하면 된다.
        // 각 쓰레드 별로 다운로드 하는데 걸리는 시간이 다르다.
        std::this_thread::sleep_for(std::chrono::milliseconds(100 * index));
        std::string content = "웹사이트 : " + std::to_string(i) + " from thread(" +
                            std::to_string(index) + ")\n";

        // data 는 쓰레드 사이에서 공유되므로 critical section 에 넣어야 한다.
        m->lock();
        downloaded_pages->push(content);
        m->unlock();

        // consumer 에게 content 가 준비되었음을 알린다.
        cv->notify_one();
    }
    }

    void consumer(std::queue<std::string>* downloaded_pages, std::mutex* m,
                int* num_processed, std::condition_variable* cv) {
    while (*num_processed < 25) {
        std::unique_lock<std::mutex> lk(*m);

        cv->wait(
            lk, [&] { return !downloaded_pages->empty() || *num_processed == 25; });

        if (*num_processed == 25) {
        lk.unlock();
        return;
        }

        // 맨 앞의 페이지를 읽고 대기 목록에서 제거한다.
        std::string content = downloaded_pages->front();
        downloaded_pages->pop();

        (*num_processed)++;
        lk.unlock();

        // content 를 처리한다.
        std::cout << content;
        std::this_thread::sleep_for(std::chrono::milliseconds(80));
    }
    }

    int main() {
        // 현재 다운로드한 페이지들 리스트로, 아직 처리되지 않은 것들이다.
        std::queue<std::string> downloaded_pages;
        std::mutex m;
        std::condition_variable cv;

        std::vector<std::thread> producers;
        for (int i = 0; i < 5; i++) {
            producers.push_back(
                std::thread(producer, &downloaded_pages, &m, i + 1, &cv));
        }

        int num_processed = 0;
        std::vector<std::thread> consumers;
        for (int i = 0; i < 3; i++) {
            consumers.push_back(
                std::thread(consumer, &downloaded_pages, &m, &num_processed, &cv));
        }

        for (int i = 0; i < 5; i++) {
            producers[i].join();
        }

        // 나머지 자고 있는 쓰레드들을 모두 깨운다.
        cv.notify_all();

        for (int i = 0; i < 3; i++) {
            consumers[i].join();
        }
    }

CODE 59 -> 뮤텍스를 정의할 때 condition_variable을 함께 정의

CODE 32 ~ 35 -> condition_variable의 wait 함수에 어떤 조건이 참이 될 때 기다릴지 해당 조건을 인자로 전달
    35 -> downloaded_pages 에 원소들이 있거나, 전체 처리된 페이지의 개수가 25개 일 때 wait을 중지
        -> 조건 변수는 해당 조건이 거짓이라면, lk를 unlock 한 뒤에 영원히 sleep 하게 됨.
            -> 쓰레드는 다른 누가 깨워주기 전까지 계속 sleep 된 상태로 기다리게 됨.
        -> 조건 변수가 참이라면, cv.wait는 그대로 리턴해서 consumer의 content 를 처리하는 부분이 그대로 실행
    32 -> 기존이 lock_guard 와 다르게 unique_lock 을 정의하였는데, unique_lock은 lock_guard와 거의 동일
        -> lock_guard 의 경우 생성자 말고는 따로 lock 을 할 수 없다.
        -> unique_lock은 unlock 후에 다시 lock 할 수 있다.
            -> unique_lock을 선택한 이유 -> cv->wait 후에 unique_lock 을 인자로 받기 때문

CODE 37 ~ 40 -> cv.wait 이후에 num_processed 가 25인지 확인하는 구문이 추가되었는데, 이는 wait 에서 탈출한 이유가
    -> 모든 페이지 처리를 완료해서 인지, 아님 downloaded_pages 에 페이지가 추가됐는지 알 수 없음
        -> 모든 페이지 처리가 끝나서 탈출 한 것이였다면, 그냥 쓰레드를 종료

CODE 10 ~ 27
    25 -> 페이지를 하나 다운 받았다면, 잠자고 있는 쓰레들 중 하나를 깨워서 일을 시켜야함.
        -> 모든 쓰레드들이 일을 하고 있는 상태라면 아무 일도 일어나지않음,
        -> notify_one 함수는 말 그대로, 
            -> 조건이 거짓인 바람에 자고 있는 쓰레드 중 하나를 깨워서 조건을 다시 검사하게 해줌
            -> 만일 조건이 참이 된다면, 쓰레드가 다시 일을 시작

CODE 74 ~ 79 -> producer 들이 모두 일을 끝낸 시점을 생각해본다면, 자고 있는 일부 consumer 쓰레드들이 있을 것
    -> cv.notify_all() 하지 않는다면, 자고 있는 consumer 쓰레드들의 경우 join 되지 않는 문제 발생
    -> cv.notify_all() 을 통해서 모든 쓰레드를 깨워 조건을 검사하도록 함.
        -> num_processed 가 25가 되었 있을 것이므로, 모든 쓰레드들이 잠에서 깨어나 종료.

    


----condition_variable 에서 wait 포함 유용한 함수 ----
1. wait
blocks the current thread until the condition variable is awakened
(public member function)

2. wait_for
blocks the current thread until the condition variable is awakened or after the specified timeout duration
(public member function)

3. wait_until 
blocks the current thread until the condition variable is awakened or until specified time point has been reached
(public member function)