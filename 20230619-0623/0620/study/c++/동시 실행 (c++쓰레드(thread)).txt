* 멀티 쓰레드 프로그램
    - 프로세스란?
        -> 운영체제에서 실행되는 프로그램의 최소 단위
        -> cpu가 한 가지 일을 못하는데 어떻게 여러 가지의 일을 했을 까? -> 컨텍스트 스위칭(context switching)
            -> 프로그램을 돌면서 코어 하나에서 프로그램을 실행 -> 운영체제의 스케쥴러에 의해서 프로그램 스위치
    
    - 쓰레드란?
        -> cpu 코어에서 돌아가는 프로그램 단위 -> cpu의 코어 하나에서는 한 번에 한 개의 쓰레드의 명령을 실행
        -> 한 개의 프로세스는 최소 한 개의 쓰레드로 이루어짐. -> 여러 개의 쓰레드로 구성될 수 있다.
            -> 여러 개의 쓰레드 -> 멀티 쓰레드(nultithread)프로그램

    - 쓰레드와 프로세스의 차이점?
        -> 프로세스들은 서로 메모리를 공유하지 않음.
            -> 프로세스 1과 프로레스 2가 있을 때, 프로레스 1은 프로세스 2에 접근 불가, 프로세스 2는 프로세스 1에 접근 불가
        
        -> 쓰레드들은 한 프로세스 안에 쓰레드 1과 쓰레드 2가 있다면, 서로 같은 메모리를 공유
            -> 쓰레드 1과 쓰레드 2가 같은 변수에 값에 접근할 수 있다.

* C++ 에서 쓰레드 생성하기
    
    ex1) 멀티 쓰레드 예시
    #include <iostream>
    #include <thread>
    using std::thread;

    void func1() {
    for (int i = 0; i < 10; i++) {
        std::cout << "쓰레드 1 작동중! \n";
    }
    }

    void func2() {
    for (int i = 0; i < 10; i++) {
        std::cout << "쓰레드 2 작동중! \n";
    }
    }

    void func3() {
    for (int i = 0; i < 10; i++) {
        std::cout << "쓰레드 3 작동중! \n";
    }
    }
    int main() {
    thread t1(func1);
    thread t2(func2);
    thread t3(func3);

    t1.join();
    t2.join();
    t3.join();
    }
-> 리눅스 컴파일 에서는 -pthread 를 추가로 넣어야함.

CODE 2 -> thread 헤더 파일

CODE 23 ~ 25 -> thread 객체를 생성 -> 생성된 t1... 들은 인자로 전달받은 함수 func1...들을 새로운 쓰레드에서 실행
    -> 즉 각기 다른 쓰레드 상에서 실행

CODE 27 ~ 29 -> join을 통해서 쓰레드들이 실행을 종료하면 리턴할 수 있는 함수 -> t1.join()의 경우 t1이 종료하기 전까지 리턴하지 않음.
    -> 순서 상관없이 t2가 먼저 종료되었다면 t2 함수 리턴 후 t1끝났을 때 함수 리턴

    -> join을 사용하지 않는다면 main 함수가 종료될 때 쓰레드 객체들의 소멸자들이 호출됨
        -> join, detach 되지 않은 쓰레드는 예외 발생으로 오류 문제 발생
        -> detach은 해당 쓰레드를 실행 시킨 후, 잊어버리는 것 -> 쓰레드는 알아서 백그라운드에서 돌아가게됨.

        thread t1(func1);
        thread t2(func2);
        thread t3(func3);

        t1.detach();
        t2.detach();
        t3.detach();

        -> 메인 함수 종류 이후에 추가적인 문자열이 출력되지 않는다면, 쓰레드의 실행이 종료되지 않았거나 시작조차 하지 않은 것 -> 남겨진 쓰레드는 백그라운드에서 진행
        -> 쓰레드의 정상적인 실행을 위해 join로 쓰레드를 블로킹 시킬 수 있다.


* 쓰레드에 인자 전달하기
    
    ex1) 1부터 10000까지 합을 여러 쓰레드들을 소환해서 빠르게 계산하는 방법

    #include <cstdio>
    #include <iostream>
    #include <thread>
    #include <vector>
    using std::thread;
    using std::vector;

    void worker(vector<int>::iterator start, vector<int>::iterator end,
                int* result) {
    int sum = 0;
    for (auto itr = start; itr < end; ++itr) {
        sum += *itr;
    }
    *result = sum;

    // 쓰레드의 id 를 구한다.
    thread::id this_id = std::this_thread::get_id();
    printf("쓰레드 %x 에서 %d 부터 %d 까지 계산한 결과 : %d \n", this_id, *start,
            *(end - 1), sum);
    }

    int main() {
        vector<int> data(10000);
        for (int i = 0; i < 10000; i++) {
            data[i] = i;
        }

        // 각 쓰레드에서 계산된 부분 합들을 저장하는 벡터
        vector<int> partial_sums(4);

        vector<thread> workers;
        for (int i = 0; i < 4; i++) {
            workers.push_back(thread(worker, data.begin() + i * 2500,
                                    data.begin() + (i + 1) * 2500, &partial_sums[i]));
        }

        for (int i = 0; i < 4; i++) {
            workers[i].join();
        }

        int total = 0;
        for (int i = 0; i < 4; i++) {
            total += partial_sums[i];
        }
        std::cout << "전체 합 : " << total << std::endl;
    }

CODE 8 ~ 20 -> worker 함수는 덧셈을 수행할 테이터의 시작점과 끝점을 받아서 해당 범위 내의 원소들을 모두 더한 후, 그 결과를 result에 저장
    -> 쓰레드는 리턴 값이 없기 때문에 어떠한 결과를 반환하고 싶다면 포인터의 형태로 전달

CODE 31 ~ 35 -> main 함수 안에서 각 쓰레드에서 임무를 할당
    -> worker들이 덧셈을 수행해야 할 범위는 data.begin() + i * 2500, data.begin() + ( i + 1 ) * 2500
        -> 즉, 첫 번째 쓰레드는 0부터 2499, 두 번째 쓰레드는 2500부터 4999까지 할당 -> ~~~ 4개까지 할당
    33, 34 -> thread 생성자의 첫 번째 인자로 함수(callable)를 전달하고, 이어서 해당 함수에 전달할 인자들을 써줌.
        -> worker함수 내부에서 해당 범위의 원소들의 덧셈을 수행하고 있음

CODE 17 -> 각 쓰레드에는 고유 아이디 번호가 할당
    -> 사용하고 있는 어떤 쓰레드에서 작업 중인지 확인 하고 싶다면 this_thread::get_id를 통해 확인할 수 있다.

CODE 18 ~ 19 -> printf 함수를 통해 부분합 결과를 출력
    -> cout으로 사용하지 않은 이유? -> << 를 실행하는 과정 중에 쓰레드가 바뀌면 섞이게 됨.
        1. std::cout << A -> A의 내용이 출력되는 동안 중간에 다른 쓰레드가 내용을 출력할 수 없게 보장 (컨텍스트 스위치가 되어도)
        2. std::cout << A << B -> A를 출력한 이후에 B를 출력하기 전에 다른 쓰레드가 내용을 출력할 수 있음
    -> printf 는 " " 안에 있는 문자열을 출력할 때, 컨텍스트 스위치가 되더라도 다른 쓰레드들이 참여할 수 없게 됨.
        -> 멀티 쓰레드에서는 좋지 않은 방법인 듯

* 메모리를 같이 접근한다면?

    ex1) 서로 다른 쓰레드들에서 counter 라는 변수의 값을 1씩 증가 시키는 연산
    #include <iostream>
    #include <thread>
    #include <vector>
    using std::thread;
    using std::vector;

    void worker(int& counter) {
    for (int i = 0; i < 10000; i++) {
        counter += 1;
    }
    }

    int main() {
        int counter = 0;

        vector<thread> workers;
        for (int i = 0; i < 4; i++) {
            // 레퍼런스로 전달하려면 ref 함수로 감싸야 한다 (지난 강좌 bind 함수 참조)
            workers.push_back(thread(worker, std::ref(counter))); //인자 전달을 위해
        }

        for (int i = 0; i < 4; i++) {
            workers[i].join();
        }

        std::cout << "Counter 최종 값 : " << counter << std::endl;
    }
-> counter 의 값은 40000만이 아닌 26459 이다. 그 이유는 메모리를 공유할 때 발생하는 쓰레드들의 경쟁 상태(race condition)
    -> 이 경우 counter 라는 변수에 race condition


# Race Condition

    ---cpu 소개---

    - counter += 1의 어셈블리 코드
      
    mov rax, qword ptr [rbp - 8] -> rax, rbp 모두 cpu의 레지스터를 의미 -> mov는 대입 명령 -> 즉, [rbp = 8]이 rax에 대입
                                    -> []의 의미는 역참조, rbp-8 이 주소값일 때 해당 주소에 있는 값을 읽는 뜻 ( *과 동일 )
                                    -> 해당 주소부터 얼마나 읽어야하는지? -> qword는 8바이트 (주소값의 크기)
                                    -> rax = *(int**)(rbp - 8)
    mov ecx, dword ptr [rax] -> rax는 result의 주소값이 담겨 있다. -> ecx 에는 result 의 현재 값이 들어있게 됨.
                                -> ecx = *(int*)(rax) // rax에는 &result가 있음
    add ecx, 1 -> ecx에 1을 더하는 명령어 (result에 1이 더해짐)
    mov dword ptr [rax], ecx -> result에 이전의 result에 1 이 더해진 값이 저장

-> 쓰레드를 어떻게 스케쥴링 할지는 운영체제가 결정하기에 매번 결과가 달라진다. 즉, 디버깅이 어렵다.